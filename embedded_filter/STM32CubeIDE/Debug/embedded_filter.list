
embedded_filter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e88  08007a80  08007a80  00017a80  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008908  08008908  0002080c  2**0
                  CONTENTS
  4 .ARM          00000008  08008908  08008908  00018908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008910  08008910  0002080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008910  08008910  00018910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008914  08008914  00018914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000080c  20000000  08008918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000820  08009124  00020820  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20000b70  08009124  00020b70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002080c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126f9  00000000  00000000  0002083c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ff1  00000000  00000000  00032f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00035f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00037060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab95  00000000  00000000  00038000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168c2  00000000  00000000  00052b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1092  00000000  00000000  00069457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a4e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe0  00000000  00000000  0010a53c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000820 	.word	0x20000820
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a5c 	.word	0x08007a5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000824 	.word	0x20000824
 80001dc:	08007a5c 	.word	0x08007a5c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <MX_CRC_Init+0x20>)
 800058a:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <MX_CRC_Init+0x24>)
 800058c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_CRC_Init+0x20>)
 8000590:	f001 f84a 	bl	8001628 <HAL_CRC_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800059a:	f000 f967 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	2000083c 	.word	0x2000083c
 80005a8:	40023000 	.word	0x40023000

080005ac <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <HAL_CRC_MspInit+0x3c>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d10d      	bne.n	80005da <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <HAL_CRC_MspInit+0x40>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a09      	ldr	r2, [pc, #36]	; (80005ec <HAL_CRC_MspInit+0x40>)
 80005c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <HAL_CRC_MspInit+0x40>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40023000 	.word	0x40023000
 80005ec:	40023800 	.word	0x40023800

080005f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <MX_GPIO_Init+0x68>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a16      	ldr	r2, [pc, #88]	; (8000658 <MX_GPIO_Init+0x68>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_GPIO_Init+0x68>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <MX_GPIO_Init+0x68>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <MX_GPIO_Init+0x68>)
 800061c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <MX_GPIO_Init+0x68>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_GPIO_Init+0x68>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a08      	ldr	r2, [pc, #32]	; (8000658 <MX_GPIO_Init+0x68>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_GPIO_Init+0x68>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800

0800065c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <MX_I2C1_Init+0x50>)
 8000662:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <MX_I2C1_Init+0x54>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000666:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_I2C1_Init+0x50>)
 8000668:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <MX_I2C1_Init+0x58>)
 800066a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <MX_I2C1_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_I2C1_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000678:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <MX_I2C1_Init+0x50>)
 800067a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800067e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000680:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000686:	4b09      	ldr	r3, [pc, #36]	; (80006ac <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MX_I2C1_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000692:	4b06      	ldr	r3, [pc, #24]	; (80006ac <MX_I2C1_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_I2C1_Init+0x50>)
 800069a:	f001 f965 	bl	8001968 <HAL_I2C_Init>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006a4:	f000 f8e2 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000844 	.word	0x20000844
 80006b0:	40005400 	.word	0x40005400
 80006b4:	00061a80 	.word	0x00061a80

080006b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	; 0x28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a19      	ldr	r2, [pc, #100]	; (800073c <HAL_I2C_MspInit+0x84>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d12b      	bne.n	8000732 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	4b18      	ldr	r3, [pc, #96]	; (8000740 <HAL_I2C_MspInit+0x88>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a17      	ldr	r2, [pc, #92]	; (8000740 <HAL_I2C_MspInit+0x88>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <HAL_I2C_MspInit+0x88>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006f6:	23c0      	movs	r3, #192	; 0xc0
 80006f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006fa:	2312      	movs	r3, #18
 80006fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000702:	2303      	movs	r3, #3
 8000704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000706:	2304      	movs	r3, #4
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	480c      	ldr	r0, [pc, #48]	; (8000744 <HAL_I2C_MspInit+0x8c>)
 8000712:	f000 ffa5 	bl	8001660 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <HAL_I2C_MspInit+0x88>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	4a08      	ldr	r2, [pc, #32]	; (8000740 <HAL_I2C_MspInit+0x88>)
 8000720:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000724:	6413      	str	r3, [r2, #64]	; 0x40
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_I2C_MspInit+0x88>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000732:	bf00      	nop
 8000734:	3728      	adds	r7, #40	; 0x28
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40005400 	.word	0x40005400
 8000740:	40023800 	.word	0x40023800
 8000744:	40020400 	.word	0x40020400

08000748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074c:	f000 fe48 	bl	80013e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000750:	f000 f80e 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000754:	f7ff ff4c 	bl	80005f0 <MX_GPIO_Init>
  MX_CRC_Init();
 8000758:	f7ff ff14 	bl	8000584 <MX_CRC_Init>
  MX_RTC_Init();
 800075c:	f000 f88c 	bl	8000878 <MX_RTC_Init>
  MX_I2C1_Init();
 8000760:	f7ff ff7c 	bl	800065c <MX_I2C1_Init>
  MX_X_CUBE_AI_Init();
 8000764:	f000 fb60 	bl	8000e28 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 8000768:	f000 fb6c 	bl	8000e44 <MX_X_CUBE_AI_Process>
 800076c:	e7fc      	b.n	8000768 <main+0x20>
	...

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	; 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0320 	add.w	r3, r7, #32
 800077a:	2230      	movs	r2, #48	; 0x30
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f005 feb6 	bl	80064f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	4b29      	ldr	r3, [pc, #164]	; (8000840 <SystemClock_Config+0xd0>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	4a28      	ldr	r2, [pc, #160]	; (8000840 <SystemClock_Config+0xd0>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	; 0x40
 80007a4:	4b26      	ldr	r3, [pc, #152]	; (8000840 <SystemClock_Config+0xd0>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b23      	ldr	r3, [pc, #140]	; (8000844 <SystemClock_Config+0xd4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007bc:	4a21      	ldr	r2, [pc, #132]	; (8000844 <SystemClock_Config+0xd4>)
 80007be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <SystemClock_Config+0xd4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007d0:	2309      	movs	r3, #9
 80007d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007da:	2301      	movs	r3, #1
 80007dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007e8:	2319      	movs	r3, #25
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007ec:	23a8      	movs	r3, #168	; 0xa8
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007f4:	2307      	movs	r3, #7
 80007f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 0320 	add.w	r3, r7, #32
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 f9f7 	bl	8001bf0 <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000808:	f000 f830 	bl	800086c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080c:	230f      	movs	r3, #15
 800080e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000810:	2302      	movs	r3, #2
 8000812:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	2102      	movs	r1, #2
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fc59 	bl	80020e0 <HAL_RCC_ClockConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000834:	f000 f81a 	bl	800086c <Error_Handler>
  }
}
 8000838:	bf00      	nop
 800083a:	3750      	adds	r7, #80	; 0x50
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40007000 	.word	0x40007000

08000848 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d101      	bne.n	800085e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800085a:	f000 fde3 	bl	8001424 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40010000 	.word	0x40010000

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000874:	e7fe      	b.n	8000874 <Error_Handler+0x8>
	...

08000878 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800088c:	2300      	movs	r3, #0
 800088e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_RTC_Init+0xc0>)
 8000892:	4a2a      	ldr	r2, [pc, #168]	; (800093c <MX_RTC_Init+0xc4>)
 8000894:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <MX_RTC_Init+0xc0>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800089c:	4b26      	ldr	r3, [pc, #152]	; (8000938 <MX_RTC_Init+0xc0>)
 800089e:	227f      	movs	r2, #127	; 0x7f
 80008a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008a2:	4b25      	ldr	r3, [pc, #148]	; (8000938 <MX_RTC_Init+0xc0>)
 80008a4:	22ff      	movs	r2, #255	; 0xff
 80008a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <MX_RTC_Init+0xc0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <MX_RTC_Init+0xc0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008b4:	4b20      	ldr	r3, [pc, #128]	; (8000938 <MX_RTC_Init+0xc0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008ba:	481f      	ldr	r0, [pc, #124]	; (8000938 <MX_RTC_Init+0xc0>)
 80008bc:	f001 ff10 	bl	80026e0 <HAL_RTC_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80008c6:	f7ff ffd1 	bl	800086c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2201      	movs	r2, #1
 80008e2:	4619      	mov	r1, r3
 80008e4:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_RTC_Init+0xc0>)
 80008e6:	f001 ff71 	bl	80027cc <HAL_RTC_SetTime>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80008f0:	f7ff ffbc 	bl	800086c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008f4:	2301      	movs	r3, #1
 80008f6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80008f8:	2301      	movs	r3, #1
 80008fa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80008fc:	2301      	movs	r3, #1
 80008fe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000900:	2300      	movs	r3, #0
 8000902:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	2201      	movs	r2, #1
 8000908:	4619      	mov	r1, r3
 800090a:	480b      	ldr	r0, [pc, #44]	; (8000938 <MX_RTC_Init+0xc0>)
 800090c:	f001 fff8 	bl	8002900 <HAL_RTC_SetDate>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000916:	f7ff ffa9 	bl	800086c <Error_Handler>
  }

  /** Enable Calibrartion
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 800091a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_RTC_Init+0xc0>)
 8000920:	f002 f913 	bl	8002b4a <HAL_RTCEx_SetCalibrationOutPut>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 800092a:	f7ff ff9f 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000898 	.word	0x20000898
 800093c:	40002800 	.word	0x40002800

08000940 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(rtcHandle->Instance==RTC)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <HAL_RTC_MspInit+0x50>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d111      	bne.n	8000986 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000962:	2302      	movs	r3, #2
 8000964:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000966:	f44f 7300 	mov.w	r3, #512	; 0x200
 800096a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fdc7 	bl	8002504 <HAL_RCCEx_PeriphCLKConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800097c:	f7ff ff76 	bl	800086c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <HAL_RTC_MspInit+0x54>)
 8000982:	2201      	movs	r2, #1
 8000984:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000986:	bf00      	nop
 8000988:	3720      	adds	r7, #32
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40002800 	.word	0x40002800
 8000994:	42470e3c 	.word	0x42470e3c

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	4a0f      	ldr	r2, [pc, #60]	; (80009e4 <HAL_MspInit+0x4c>)
 80009a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ac:	6453      	str	r3, [r2, #68]	; 0x44
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <HAL_MspInit+0x4c>)
 80009b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x4c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x4c>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	; 0x30
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	2019      	movs	r0, #25
 80009fe:	f000 fde9 	bl	80015d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a02:	2019      	movs	r0, #25
 8000a04:	f000 fe02 	bl	800160c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <HAL_InitTick+0xa0>)
 8000a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a10:	4a1d      	ldr	r2, [pc, #116]	; (8000a88 <HAL_InitTick+0xa0>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6453      	str	r3, [r2, #68]	; 0x44
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <HAL_InitTick+0xa0>)
 8000a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a24:	f107 0210 	add.w	r2, r7, #16
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 fd36 	bl	80024a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a34:	f001 fd20 	bl	8002478 <HAL_RCC_GetPCLK2Freq>
 8000a38:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a3c:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <HAL_InitTick+0xa4>)
 8000a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000a42:	0c9b      	lsrs	r3, r3, #18
 8000a44:	3b01      	subs	r3, #1
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_InitTick+0xa8>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <HAL_InitTick+0xac>)
 8000a4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <HAL_InitTick+0xa8>)
 8000a50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a54:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_InitTick+0xa8>)
 8000a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a5a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_InitTick+0xa8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_InitTick+0xa8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a68:	4809      	ldr	r0, [pc, #36]	; (8000a90 <HAL_InitTick+0xa8>)
 8000a6a:	f002 f8b0 	bl	8002bce <HAL_TIM_Base_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d104      	bne.n	8000a7e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a74:	4806      	ldr	r0, [pc, #24]	; (8000a90 <HAL_InitTick+0xa8>)
 8000a76:	f002 f903 	bl	8002c80 <HAL_TIM_Base_Start_IT>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	e000      	b.n	8000a80 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3730      	adds	r7, #48	; 0x30
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	431bde83 	.word	0x431bde83
 8000a90:	200008b8 	.word	0x200008b8
 8000a94:	40010000 	.word	0x40010000

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <NMI_Handler+0x4>

08000a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
	...

08000af0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000af6:	f002 f925 	bl	8002d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200008b8 	.word	0x200008b8

08000b04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	e00a      	b.n	8000b2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b16:	f3af 8000 	nop.w
 8000b1a:	4601      	mov	r1, r0
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	b2ca      	uxtb	r2, r1
 8000b24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	dbf0      	blt.n	8000b16 <_read+0x12>
	}

return len;
 8000b34:	687b      	ldr	r3, [r7, #4]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	60f8      	str	r0, [r7, #12]
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	e009      	b.n	8000b64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	60ba      	str	r2, [r7, #8]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	3301      	adds	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697a      	ldr	r2, [r7, #20]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	dbf1      	blt.n	8000b50 <_write+0x12>
	}
	return len;
 8000b6c:	687b      	ldr	r3, [r7, #4]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <_close>:

int _close(int file)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_isatty>:

int _isatty(int file)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
	return 0;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <_sbrk+0x5c>)
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <_sbrk+0x60>)
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <_sbrk+0x64>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <_sbrk+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d207      	bcs.n	8000c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c10:	f005 fc36 	bl	8006480 <__errno>
 8000c14:	4603      	mov	r3, r0
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	e009      	b.n	8000c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <_sbrk+0x64>)
 8000c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20010000 	.word	0x20010000
 8000c40:	00000800 	.word	0x00000800
 8000c44:	20000900 	.word	0x20000900
 8000c48:	20000b70 	.word	0x20000b70

08000c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c52:	490e      	ldr	r1, [pc, #56]	; (8000c8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c54:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c68:	4c0b      	ldr	r4, [pc, #44]	; (8000c98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c76:	f000 fba1 	bl	80013bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f005 fc07 	bl	800648c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7e:	f7ff fd63 	bl	8000748 <main>
  bx  lr    
 8000c82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c84:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	2000080c 	.word	0x2000080c
  ldr r2, =_sidata
 8000c90:	08008918 	.word	0x08008918
  ldr r2, =_sbss
 8000c94:	20000820 	.word	0x20000820
  ldr r4, =_ebss
 8000c98:	20000b70 	.word	0x20000b70

08000c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC_IRQHandler>
	...

08000ca0 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d009      	beq.n	8000cc4 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8000cb0:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8000cb2:	461a      	mov	r2, r3
        err.type, err.code);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8000cba:	6839      	ldr	r1, [r7, #0]
 8000cbc:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <ai_log_err+0x38>)
 8000cbe:	f005 fcff 	bl	80066c0 <iprintf>
 8000cc2:	e008      	b.n	8000cd6 <ai_log_err+0x36>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8000cc4:	793b      	ldrb	r3, [r7, #4]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <ai_log_err+0x3c>)
 8000cd2:	f005 fcf5 	bl	80066c0 <iprintf>

  do {} while (1);
 8000cd6:	e7fe      	b.n	8000cd6 <ai_log_err+0x36>
 8000cd8:	08007a80 	.word	0x08007a80
 8000cdc:	08007ab4 	.word	0x08007ab4

08000ce0 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	4828      	ldr	r0, [pc, #160]	; (8000d90 <ai_boostrap+0xb0>)
 8000cee:	f000 fa49 	bl	8001184 <ai_network_create_and_init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8000cf6:	7b3b      	ldrb	r3, [r7, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d006      	beq.n	8000d0a <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_create_and_init");
 8000cfc:	4925      	ldr	r1, [pc, #148]	; (8000d94 <ai_boostrap+0xb4>)
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	f7ff ffce 	bl	8000ca0 <ai_log_err>
    return -1;
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295
 8000d08:	e03e      	b.n	8000d88 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_inputs_get(network, NULL);
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <ai_boostrap+0xb0>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 faab 	bl	800126c <ai_network_inputs_get>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4a1f      	ldr	r2, [pc, #124]	; (8000d98 <ai_boostrap+0xb8>)
 8000d1a:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <ai_boostrap+0xb0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fabc 	bl	80012a0 <ai_network_outputs_get>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4a1c      	ldr	r2, [pc, #112]	; (8000d9c <ai_boostrap+0xbc>)
 8000d2c:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e00f      	b.n	8000d54 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8000d34:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <ai_boostrap+0xb8>)
 8000d36:	6819      	ldr	r1, [r3, #0]
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	1a9b      	subs	r3, r3, r2
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	440b      	add	r3, r1
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	4916      	ldr	r1, [pc, #88]	; (8000da0 <ai_boostrap+0xc0>)
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_IN_NUM; idx++) {
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	3301      	adds	r3, #1
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	ddec      	ble.n	8000d34 <ai_boostrap+0x54>

#if defined(AI_NETWORK_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	e00f      	b.n	8000d80 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8000d60:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <ai_boostrap+0xbc>)
 8000d62:	6819      	ldr	r1, [r3, #0]
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4613      	mov	r3, r2
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	1a9b      	subs	r3, r3, r2
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	440b      	add	r3, r1
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	490c      	ldr	r1, [pc, #48]	; (8000da4 <ai_boostrap+0xc4>)
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	ddec      	ble.n	8000d60 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000adc 	.word	0x20000adc
 8000d94:	08007ae4 	.word	0x08007ae4
 8000d98:	20000ae0 	.word	0x20000ae0
 8000d9c:	20000ae4 	.word	0x20000ae4
 8000da0:	20000904 	.word	0x20000904
 8000da4:	20000908 	.word	0x20000908

08000da8 <ai_run>:

static int ai_run(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_run(network, ai_input, ai_output);
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <ai_run+0x44>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <ai_run+0x48>)
 8000db4:	6811      	ldr	r1, [r2, #0]
 8000db6:	4a0f      	ldr	r2, [pc, #60]	; (8000df4 <ai_run+0x4c>)
 8000db8:	6812      	ldr	r2, [r2, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fac6 	bl	800134c <ai_network_run>
 8000dc0:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d00c      	beq.n	8000de2 <ai_run+0x3a>
    ai_log_err(ai_network_get_error(network),
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <ai_run+0x44>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 f9b7 	bl	8001140 <ai_network_get_error>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4908      	ldr	r1, [pc, #32]	; (8000df8 <ai_run+0x50>)
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff62 	bl	8000ca0 <ai_log_err>
        "ai_network_run");
    return -1;
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8000de0:	e000      	b.n	8000de4 <ai_run+0x3c>
  }

  return 0;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000adc 	.word	0x20000adc
 8000df0:	20000ae0 	.word	0x20000ae0
 8000df4:	20000ae4 	.word	0x20000ae4
 8000df8:	08007b00 	.word	0x08007b00

08000dfc <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <post_process>:

int post_process(ai_i8* data[])
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
  return 0;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8000e2c:	4803      	ldr	r0, [pc, #12]	; (8000e3c <MX_X_CUBE_AI_Init+0x14>)
 8000e2e:	f005 fccd 	bl	80067cc <puts>

  ai_boostrap(data_activations0);
 8000e32:	4803      	ldr	r0, [pc, #12]	; (8000e40 <MX_X_CUBE_AI_Init+0x18>)
 8000e34:	f7ff ff54 	bl	8000ce0 <ai_boostrap>
    /* USER CODE END 5 */
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	08007b10 	.word	0x08007b10
 8000e40:	20000000 	.word	0x20000000

08000e44 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4e:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 8000e50:	4816      	ldr	r0, [pc, #88]	; (8000eac <MX_X_CUBE_AI_Process+0x68>)
 8000e52:	f005 fcbb 	bl	80067cc <puts>

  if (network) {
 8000e56:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_X_CUBE_AI_Process+0x6c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d013      	beq.n	8000e86 <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 8000e5e:	4815      	ldr	r0, [pc, #84]	; (8000eb4 <MX_X_CUBE_AI_Process+0x70>)
 8000e60:	f7ff ffcc 	bl	8000dfc <acquire_and_process_data>
 8000e64:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 8000e6c:	f7ff ff9c 	bl	8000da8 <ai_run>
 8000e70:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d103      	bne.n	8000e80 <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 8000e78:	480f      	ldr	r0, [pc, #60]	; (8000eb8 <MX_X_CUBE_AI_Process+0x74>)
 8000e7a:	f7ff ffca 	bl	8000e12 <post_process>
 8000e7e:	6078      	str	r0, [r7, #4]
    } while (res==0);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0eb      	beq.n	8000e5e <MX_X_CUBE_AI_Process+0x1a>
  }

  if (res) {
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00a      	beq.n	8000ea2 <MX_X_CUBE_AI_Process+0x5e>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8000e8c:	2311      	movs	r3, #17
 8000e8e:	703b      	strb	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2210      	movs	r2, #16
 8000e94:	f362 231f 	bfi	r3, r2, #8, #24
 8000e98:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <MX_X_CUBE_AI_Process+0x78>)
 8000e9c:	6838      	ldr	r0, [r7, #0]
 8000e9e:	f7ff feff 	bl	8000ca0 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	08007b30 	.word	0x08007b30
 8000eb0:	20000adc 	.word	0x20000adc
 8000eb4:	20000904 	.word	0x20000904
 8000eb8:	20000908 	.word	0x20000908
 8000ebc:	08007b4c 	.word	0x08007b4c

08000ec0 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4825      	ldr	r0, [pc, #148]	; (8000f64 <network_configure_activations+0xa4>)
 8000ed0:	f002 f9a2 	bl	8003218 <ai_platform_get_activations_map>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d039      	beq.n	8000f4e <network_configure_activations+0x8e>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8000eda:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <network_configure_activations+0xa4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <network_configure_activations+0xa8>)
 8000ee0:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <network_configure_activations+0xa4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a20      	ldr	r2, [pc, #128]	; (8000f68 <network_configure_activations+0xa8>)
 8000ee8:	60d3      	str	r3, [r2, #12]
    
    rnn_2_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 60);
 8000eea:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <network_configure_activations+0xa4>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	333c      	adds	r3, #60	; 0x3c
 8000ef0:	4a1e      	ldr	r2, [pc, #120]	; (8000f6c <network_configure_activations+0xac>)
 8000ef2:	6093      	str	r3, [r2, #8]
    rnn_2_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 60);
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <network_configure_activations+0xa4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	333c      	adds	r3, #60	; 0x3c
 8000efa:	4a1c      	ldr	r2, [pc, #112]	; (8000f6c <network_configure_activations+0xac>)
 8000efc:	60d3      	str	r3, [r2, #12]
    
    rnn_2_output0_array.data = AI_PTR(g_network_activations_map[0] + 284);
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <network_configure_activations+0xa4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8000f06:	4a1a      	ldr	r2, [pc, #104]	; (8000f70 <network_configure_activations+0xb0>)
 8000f08:	6093      	str	r3, [r2, #8]
    rnn_2_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 284);
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <network_configure_activations+0xa4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8000f12:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <network_configure_activations+0xb0>)
 8000f14:	60d3      	str	r3, [r2, #12]
    
    rnn_3_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <network_configure_activations+0xa4>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a16      	ldr	r2, [pc, #88]	; (8000f74 <network_configure_activations+0xb4>)
 8000f1c:	6093      	str	r3, [r2, #8]
    rnn_3_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <network_configure_activations+0xa4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <network_configure_activations+0xb4>)
 8000f24:	60d3      	str	r3, [r2, #12]
    
    rnn_3_output0_array.data = AI_PTR(g_network_activations_map[0] + 168);
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <network_configure_activations+0xa4>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	33a8      	adds	r3, #168	; 0xa8
 8000f2c:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <network_configure_activations+0xb8>)
 8000f2e:	6093      	str	r3, [r2, #8]
    rnn_3_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 168);
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <network_configure_activations+0xa4>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	33a8      	adds	r3, #168	; 0xa8
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <network_configure_activations+0xb8>)
 8000f38:	60d3      	str	r3, [r2, #12]
    
    dense_4_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <network_configure_activations+0xa4>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a0f      	ldr	r2, [pc, #60]	; (8000f7c <network_configure_activations+0xbc>)
 8000f40:	6093      	str	r3, [r2, #8]
    dense_4_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <network_configure_activations+0xa4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <network_configure_activations+0xbc>)
 8000f48:	60d3      	str	r3, [r2, #12]
    
    return true;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e005      	b.n	8000f5a <network_configure_activations+0x9a>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8000f4e:	2213      	movs	r2, #19
 8000f50:	2130      	movs	r1, #48	; 0x30
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f002 fa44 	bl	80033e0 <ai_platform_network_set_error>
  return false;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000ae8 	.word	0x20000ae8
 8000f68:	20000014 	.word	0x20000014
 8000f6c:	200000d4 	.word	0x200000d4
 8000f70:	20000034 	.word	0x20000034
 8000f74:	200000f4 	.word	0x200000f4
 8000f78:	20000044 	.word	0x20000044
 8000f7c:	20000064 	.word	0x20000064

08000f80 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	4861      	ldr	r0, [pc, #388]	; (8001114 <network_configure_weights+0x194>)
 8000f90:	f002 f8ee 	bl	8003170 <ai_platform_get_weights_map>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 80b2 	beq.w	8001100 <network_configure_weights+0x180>
    /* Updating weights (byte) offsets */
    
    rnn_3_kernel_array.format |= AI_FMT_FLAG_CONST;
 8000f9c:	4b5e      	ldr	r3, [pc, #376]	; (8001118 <network_configure_weights+0x198>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000fa4:	4a5c      	ldr	r2, [pc, #368]	; (8001118 <network_configure_weights+0x198>)
 8000fa6:	6013      	str	r3, [r2, #0]
    rnn_3_kernel_array.data = AI_PTR(g_network_weights_map[0] + 0);
 8000fa8:	4b5a      	ldr	r3, [pc, #360]	; (8001114 <network_configure_weights+0x194>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a5a      	ldr	r2, [pc, #360]	; (8001118 <network_configure_weights+0x198>)
 8000fae:	6093      	str	r3, [r2, #8]
    rnn_3_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8000fb0:	4b58      	ldr	r3, [pc, #352]	; (8001114 <network_configure_weights+0x194>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a58      	ldr	r2, [pc, #352]	; (8001118 <network_configure_weights+0x198>)
 8000fb6:	60d3      	str	r3, [r2, #12]
    
    rnn_3_recurrent_array.format |= AI_FMT_FLAG_CONST;
 8000fb8:	4b58      	ldr	r3, [pc, #352]	; (800111c <network_configure_weights+0x19c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000fc0:	4a56      	ldr	r2, [pc, #344]	; (800111c <network_configure_weights+0x19c>)
 8000fc2:	6013      	str	r3, [r2, #0]
    rnn_3_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 768);
 8000fc4:	4b53      	ldr	r3, [pc, #332]	; (8001114 <network_configure_weights+0x194>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000fcc:	4a53      	ldr	r2, [pc, #332]	; (800111c <network_configure_weights+0x19c>)
 8000fce:	6093      	str	r3, [r2, #8]
    rnn_3_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 768);
 8000fd0:	4b50      	ldr	r3, [pc, #320]	; (8001114 <network_configure_weights+0x194>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000fd8:	4a50      	ldr	r2, [pc, #320]	; (800111c <network_configure_weights+0x19c>)
 8000fda:	60d3      	str	r3, [r2, #12]
    
    rnn_3_peephole_array.format |= AI_FMT_FLAG_CONST;
 8000fdc:	4b50      	ldr	r3, [pc, #320]	; (8001120 <network_configure_weights+0x1a0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000fe4:	4a4e      	ldr	r2, [pc, #312]	; (8001120 <network_configure_weights+0x1a0>)
 8000fe6:	6013      	str	r3, [r2, #0]
    rnn_3_peephole_array.data = AI_PTR(g_network_weights_map[0] + 1344);
 8000fe8:	4b4a      	ldr	r3, [pc, #296]	; (8001114 <network_configure_weights+0x194>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 8000ff0:	4a4b      	ldr	r2, [pc, #300]	; (8001120 <network_configure_weights+0x1a0>)
 8000ff2:	6093      	str	r3, [r2, #8]
    rnn_3_peephole_array.data_start = AI_PTR(g_network_weights_map[0] + 1344);
 8000ff4:	4b47      	ldr	r3, [pc, #284]	; (8001114 <network_configure_weights+0x194>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f503 63a8 	add.w	r3, r3, #1344	; 0x540
 8000ffc:	4a48      	ldr	r2, [pc, #288]	; (8001120 <network_configure_weights+0x1a0>)
 8000ffe:	60d3      	str	r3, [r2, #12]
    
    rnn_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8001000:	4b48      	ldr	r3, [pc, #288]	; (8001124 <network_configure_weights+0x1a4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001008:	4a46      	ldr	r2, [pc, #280]	; (8001124 <network_configure_weights+0x1a4>)
 800100a:	6013      	str	r3, [r2, #0]
    rnn_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 1416);
 800100c:	4b41      	ldr	r3, [pc, #260]	; (8001114 <network_configure_weights+0x194>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8001014:	4a43      	ldr	r2, [pc, #268]	; (8001124 <network_configure_weights+0x1a4>)
 8001016:	6093      	str	r3, [r2, #8]
    rnn_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 1416);
 8001018:	4b3e      	ldr	r3, [pc, #248]	; (8001114 <network_configure_weights+0x194>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8001020:	4a40      	ldr	r2, [pc, #256]	; (8001124 <network_configure_weights+0x1a4>)
 8001022:	60d3      	str	r3, [r2, #12]
    
    rnn_2_kernel_array.format |= AI_FMT_FLAG_CONST;
 8001024:	4b40      	ldr	r3, [pc, #256]	; (8001128 <network_configure_weights+0x1a8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800102c:	4a3e      	ldr	r2, [pc, #248]	; (8001128 <network_configure_weights+0x1a8>)
 800102e:	6013      	str	r3, [r2, #0]
    rnn_2_kernel_array.data = AI_PTR(g_network_weights_map[0] + 1512);
 8001030:	4b38      	ldr	r3, [pc, #224]	; (8001114 <network_configure_weights+0x194>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 8001038:	4a3b      	ldr	r2, [pc, #236]	; (8001128 <network_configure_weights+0x1a8>)
 800103a:	6093      	str	r3, [r2, #8]
    rnn_2_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 1512);
 800103c:	4b35      	ldr	r3, [pc, #212]	; (8001114 <network_configure_weights+0x194>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f503 63bd 	add.w	r3, r3, #1512	; 0x5e8
 8001044:	4a38      	ldr	r2, [pc, #224]	; (8001128 <network_configure_weights+0x1a8>)
 8001046:	60d3      	str	r3, [r2, #12]
    
    dense_4_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8001048:	4b38      	ldr	r3, [pc, #224]	; (800112c <network_configure_weights+0x1ac>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001050:	4a36      	ldr	r2, [pc, #216]	; (800112c <network_configure_weights+0x1ac>)
 8001052:	6013      	str	r3, [r2, #0]
    dense_4_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 1896);
 8001054:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <network_configure_weights+0x194>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f503 63ed 	add.w	r3, r3, #1896	; 0x768
 800105c:	4a33      	ldr	r2, [pc, #204]	; (800112c <network_configure_weights+0x1ac>)
 800105e:	6093      	str	r3, [r2, #8]
    dense_4_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 1896);
 8001060:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <network_configure_weights+0x194>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f503 63ed 	add.w	r3, r3, #1896	; 0x768
 8001068:	4a30      	ldr	r2, [pc, #192]	; (800112c <network_configure_weights+0x1ac>)
 800106a:	60d3      	str	r3, [r2, #12]
    
    rnn_2_recurrent_array.format |= AI_FMT_FLAG_CONST;
 800106c:	4b30      	ldr	r3, [pc, #192]	; (8001130 <network_configure_weights+0x1b0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001074:	4a2e      	ldr	r2, [pc, #184]	; (8001130 <network_configure_weights+0x1b0>)
 8001076:	6013      	str	r3, [r2, #0]
    rnn_2_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 1944);
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <network_configure_weights+0x194>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 8001080:	4a2b      	ldr	r2, [pc, #172]	; (8001130 <network_configure_weights+0x1b0>)
 8001082:	6093      	str	r3, [r2, #8]
    rnn_2_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 1944);
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <network_configure_weights+0x194>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f503 63f3 	add.w	r3, r3, #1944	; 0x798
 800108c:	4a28      	ldr	r2, [pc, #160]	; (8001130 <network_configure_weights+0x1b0>)
 800108e:	60d3      	str	r3, [r2, #12]
    
    dense_4_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8001090:	4b28      	ldr	r3, [pc, #160]	; (8001134 <network_configure_weights+0x1b4>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001098:	4a26      	ldr	r2, [pc, #152]	; (8001134 <network_configure_weights+0x1b4>)
 800109a:	6013      	str	r3, [r2, #0]
    dense_4_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 2968);
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <network_configure_weights+0x194>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 80010a4:	4a23      	ldr	r2, [pc, #140]	; (8001134 <network_configure_weights+0x1b4>)
 80010a6:	6093      	str	r3, [r2, #8]
    dense_4_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 2968);
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <network_configure_weights+0x194>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f603 3398 	addw	r3, r3, #2968	; 0xb98
 80010b0:	4a20      	ldr	r2, [pc, #128]	; (8001134 <network_configure_weights+0x1b4>)
 80010b2:	60d3      	str	r3, [r2, #12]
    
    rnn_2_peephole_array.format |= AI_FMT_FLAG_CONST;
 80010b4:	4b20      	ldr	r3, [pc, #128]	; (8001138 <network_configure_weights+0x1b8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80010bc:	4a1e      	ldr	r2, [pc, #120]	; (8001138 <network_configure_weights+0x1b8>)
 80010be:	6013      	str	r3, [r2, #0]
    rnn_2_peephole_array.data = AI_PTR(g_network_weights_map[0] + 2976);
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <network_configure_weights+0x194>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <network_configure_weights+0x1b8>)
 80010ca:	6093      	str	r3, [r2, #8]
    rnn_2_peephole_array.data_start = AI_PTR(g_network_weights_map[0] + 2976);
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <network_configure_weights+0x194>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f503 633a 	add.w	r3, r3, #2976	; 0xba0
 80010d4:	4a18      	ldr	r2, [pc, #96]	; (8001138 <network_configure_weights+0x1b8>)
 80010d6:	60d3      	str	r3, [r2, #12]
    
    rnn_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <network_configure_weights+0x1bc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80010e0:	4a16      	ldr	r2, [pc, #88]	; (800113c <network_configure_weights+0x1bc>)
 80010e2:	6013      	str	r3, [r2, #0]
    rnn_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 3072);
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <network_configure_weights+0x194>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80010ec:	4a13      	ldr	r2, [pc, #76]	; (800113c <network_configure_weights+0x1bc>)
 80010ee:	6093      	str	r3, [r2, #8]
    rnn_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 3072);
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <network_configure_weights+0x194>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80010f8:	4a10      	ldr	r2, [pc, #64]	; (800113c <network_configure_weights+0x1bc>)
 80010fa:	60d3      	str	r3, [r2, #12]
    
    return true;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e005      	b.n	800110c <network_configure_weights+0x18c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8001100:	2212      	movs	r2, #18
 8001102:	2130      	movs	r1, #48	; 0x30
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f002 f96b 	bl	80033e0 <ai_platform_network_set_error>
  return false;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000aec 	.word	0x20000aec
 8001118:	20000004 	.word	0x20000004
 800111c:	20000024 	.word	0x20000024
 8001120:	20000054 	.word	0x20000054
 8001124:	20000074 	.word	0x20000074
 8001128:	20000084 	.word	0x20000084
 800112c:	20000094 	.word	0x20000094
 8001130:	200000a4 	.word	0x200000a4
 8001134:	200000b4 	.word	0x200000b4
 8001138:	200000c4 	.word	0x200000c4
 800113c:	200000e4 	.word	0x200000e4

08001140 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f002 f8db 	bl	8003304 <ai_platform_network_get_error>
 800114e:	4603      	mov	r3, r0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af02      	add	r7, sp, #8
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8001162:	2300      	movs	r3, #0
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	2305      	movs	r3, #5
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <ai_network_create+0x28>)
 800116e:	6839      	ldr	r1, [r7, #0]
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f002 fae1 	bl	8003738 <ai_platform_network_create>
 8001176:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200006f8 	.word	0x200006f8

08001184 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b096      	sub	sp, #88	; 0x58
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8001190:	2100      	movs	r1, #0
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff ffe0 	bl	8001158 <ai_network_create>
 8001198:	4603      	mov	r3, r0
 800119a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 800119c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <ai_network_create_and_init+0x24>
        return err;
 80011a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011a6:	e05d      	b.n	8001264 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 f8dd 	bl	800136c <ai_network_data_params_get>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f083 0301 	eor.w	r3, r3, #1
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d008      	beq.n	80011d0 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ffbc 	bl	8001140 <ai_network_get_error>
 80011c8:	4603      	mov	r3, r0
 80011ca:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 80011cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80011ce:	e049      	b.n	8001264 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d016      	beq.n	8001204 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	657b      	str	r3, [r7, #84]	; 0x54
 80011da:	e00e      	b.n	80011fa <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 80011dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80011de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	4413      	add	r3, r2
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	330c      	adds	r3, #12
 80011ee:	4618      	mov	r0, r3
 80011f0:	f001 ffaa 	bl	8003148 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 80011f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011f6:	3301      	adds	r3, #1
 80011f8:	657b      	str	r3, [r7, #84]	; 0x54
 80011fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80011fc:	461a      	mov	r2, r3
 80011fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001200:	4293      	cmp	r3, r2
 8001202:	dbeb      	blt.n	80011dc <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d016      	beq.n	8001238 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 800120a:	2300      	movs	r3, #0
 800120c:	653b      	str	r3, [r7, #80]	; 0x50
 800120e:	e00e      	b.n	800122e <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8001210:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	4413      	add	r3, r2
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	3304      	adds	r3, #4
 8001222:	4618      	mov	r0, r3
 8001224:	f001 ff90 	bl	8003148 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8001228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800122a:	3301      	adds	r3, #1
 800122c:	653b      	str	r3, [r7, #80]	; 0x50
 800122e:	8b7b      	ldrh	r3, [r7, #26]
 8001230:	461a      	mov	r2, r3
 8001232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001234:	4293      	cmp	r3, r2
 8001236:	dbeb      	blt.n	8001210 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f107 0214 	add.w	r2, r7, #20
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f846 	bl	80012d4 <ai_network_init>
 8001248:	4603      	mov	r3, r0
 800124a:	f083 0301 	eor.w	r3, r3, #1
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d006      	beq.n	8001262 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff71 	bl	8001140 <ai_network_get_error>
 800125e:	4603      	mov	r3, r0
 8001260:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8001262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8001264:	4618      	mov	r0, r3
 8001266:	3758      	adds	r7, #88	; 0x58
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d104      	bne.n	8001286 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <ai_network_inputs_get+0x2c>)
 800127e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a06      	ldr	r2, [pc, #24]	; (800129c <ai_network_inputs_get+0x30>)
 8001284:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8001286:	6839      	ldr	r1, [r7, #0]
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f002 f8af 	bl	80033ec <ai_platform_inputs_get>
 800128e:	4603      	mov	r3, r0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200006f8 	.word	0x200006f8
 800129c:	a1c00100 	.word	0xa1c00100

080012a0 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d104      	bne.n	80012ba <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <ai_network_outputs_get+0x2c>)
 80012b2:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a06      	ldr	r2, [pc, #24]	; (80012d0 <ai_network_outputs_get+0x30>)
 80012b8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80012ba:	6839      	ldr	r1, [r7, #0]
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f002 f96b 	bl	8003598 <ai_platform_outputs_get>
 80012c2:	4603      	mov	r3, r0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200006f8 	.word	0x200006f8
 80012d0:	a1c00100 	.word	0xa1c00100

080012d4 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80012de:	6839      	ldr	r1, [r7, #0]
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f002 faff 	bl	80038e4 <ai_platform_network_init>
 80012e6:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <ai_network_init+0x1e>
 80012ee:	2300      	movs	r3, #0
 80012f0:	e028      	b.n	8001344 <ai_network_init+0x70>

  ai_bool ok = true;
 80012f2:	2301      	movs	r3, #1
 80012f4:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 80012f6:	6839      	ldr	r1, [r7, #0]
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f7ff fe41 	bl	8000f80 <network_configure_weights>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	7afb      	ldrb	r3, [r7, #11]
 8001304:	4013      	ands	r3, r2
 8001306:	2b00      	cmp	r3, #0
 8001308:	bf14      	ite	ne
 800130a:	2301      	movne	r3, #1
 800130c:	2300      	moveq	r3, #0
 800130e:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8001310:	6839      	ldr	r1, [r7, #0]
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f7ff fdd4 	bl	8000ec0 <network_configure_activations>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	7afb      	ldrb	r3, [r7, #11]
 800131e:	4013      	ands	r3, r2
 8001320:	2b00      	cmp	r3, #0
 8001322:	bf14      	ite	ne
 8001324:	2301      	movne	r3, #1
 8001326:	2300      	moveq	r3, #0
 8001328:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f002 fbc8 	bl	8003ac0 <ai_platform_network_post_init>
 8001330:	4603      	mov	r3, r0
 8001332:	461a      	mov	r2, r3
 8001334:	7afb      	ldrb	r3, [r7, #11]
 8001336:	4013      	ands	r3, r2
 8001338:	2b00      	cmp	r3, #0
 800133a:	bf14      	ite	ne
 800133c:	2301      	movne	r3, #1
 800133e:	2300      	moveq	r3, #0
 8001340:	72fb      	strb	r3, [r7, #11]

  return ok;
 8001342:	7afb      	ldrb	r3, [r7, #11]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	68b9      	ldr	r1, [r7, #8]
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f002 fc37 	bl	8003bd0 <ai_platform_network_process>
 8001362:	4603      	mov	r3, r0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <ai_network_data_params_get+0x12>
 800137a:	2300      	movs	r3, #0
 800137c:	e016      	b.n	80013ac <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800137e:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <ai_network_data_params_get+0x48>)
 8001380:	f107 0310 	add.w	r3, r7, #16
 8001384:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001388:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 800138c:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <ai_network_data_params_get+0x4c>)
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001396:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 800139a:	f107 0210 	add.w	r2, r7, #16
 800139e:	f107 0308 	add.w	r3, r7, #8
 80013a2:	4619      	mov	r1, r3
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f001 ff8b 	bl	80032c0 <ai_platform_bind_network_params>
 80013aa:	4603      	mov	r3, r0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	08007b80 	.word	0x08007b80
 80013b8:	08007b88 	.word	0x08007b88

080013bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <SystemInit+0x20>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <SystemInit+0x20>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_Init+0x40>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <HAL_Init+0x40>)
 80013ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_Init+0x40>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <HAL_Init+0x40>)
 80013f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <HAL_Init+0x40>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <HAL_Init+0x40>)
 8001402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001406:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001408:	2003      	movs	r0, #3
 800140a:	f000 f8d8 	bl	80015be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140e:	200f      	movs	r0, #15
 8001410:	f7ff faea 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001414:	f7ff fac0 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023c00 	.word	0x40023c00

08001424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_IncTick+0x20>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x24>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a04      	ldr	r2, [pc, #16]	; (8001448 <HAL_IncTick+0x24>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	200007a4 	.word	0x200007a4
 8001448:	20000b5c 	.word	0x20000b5c

0800144c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return uwTick;
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <HAL_GetTick+0x14>)
 8001452:	681b      	ldr	r3, [r3, #0]
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000b5c 	.word	0x20000b5c

08001464 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800148c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001496:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	60d3      	str	r3, [r2, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <__NVIC_GetPriorityGrouping+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	f003 0307 	and.w	r3, r3, #7
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db0b      	blt.n	80014f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	4907      	ldr	r1, [pc, #28]	; (8001500 <__NVIC_EnableIRQ+0x38>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	2001      	movs	r0, #1
 80014ea:	fa00 f202 	lsl.w	r2, r0, r2
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000e100 	.word	0xe000e100

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	; (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ff4c 	bl	8001464 <__NVIC_SetPriorityGrouping>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e6:	f7ff ff61 	bl	80014ac <__NVIC_GetPriorityGrouping>
 80015ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	68b9      	ldr	r1, [r7, #8]
 80015f0:	6978      	ldr	r0, [r7, #20]
 80015f2:	f7ff ffb1 	bl	8001558 <NVIC_EncodePriority>
 80015f6:	4602      	mov	r2, r0
 80015f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff80 	bl	8001504 <__NVIC_SetPriority>
}
 8001604:	bf00      	nop
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff54 	bl	80014c8 <__NVIC_EnableIRQ>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e00e      	b.n	8001658 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	795b      	ldrb	r3, [r3, #5]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d105      	bne.n	8001650 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7fe ffae 	bl	80005ac <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	; 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	e159      	b.n	8001930 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800167c:	2201      	movs	r2, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	429a      	cmp	r2, r3
 8001696:	f040 8148 	bne.w	800192a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d005      	beq.n	80016b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d130      	bne.n	8001714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	2203      	movs	r2, #3
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016e8:	2201      	movs	r2, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	f003 0201 	and.w	r2, r3, #1
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b03      	cmp	r3, #3
 800171e:	d017      	beq.n	8001750 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	2203      	movs	r2, #3
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d123      	bne.n	80017a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	08da      	lsrs	r2, r3, #3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3208      	adds	r2, #8
 8001764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	220f      	movs	r2, #15
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	08da      	lsrs	r2, r3, #3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	3208      	adds	r2, #8
 800179e:	69b9      	ldr	r1, [r7, #24]
 80017a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	2203      	movs	r2, #3
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0203 	and.w	r2, r3, #3
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 80a2 	beq.w	800192a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	4b57      	ldr	r3, [pc, #348]	; (8001948 <HAL_GPIO_Init+0x2e8>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ee:	4a56      	ldr	r2, [pc, #344]	; (8001948 <HAL_GPIO_Init+0x2e8>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f4:	6453      	str	r3, [r2, #68]	; 0x44
 80017f6:	4b54      	ldr	r3, [pc, #336]	; (8001948 <HAL_GPIO_Init+0x2e8>)
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001802:	4a52      	ldr	r2, [pc, #328]	; (800194c <HAL_GPIO_Init+0x2ec>)
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	220f      	movs	r2, #15
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4013      	ands	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a49      	ldr	r2, [pc, #292]	; (8001950 <HAL_GPIO_Init+0x2f0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d019      	beq.n	8001862 <HAL_GPIO_Init+0x202>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a48      	ldr	r2, [pc, #288]	; (8001954 <HAL_GPIO_Init+0x2f4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d013      	beq.n	800185e <HAL_GPIO_Init+0x1fe>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a47      	ldr	r2, [pc, #284]	; (8001958 <HAL_GPIO_Init+0x2f8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d00d      	beq.n	800185a <HAL_GPIO_Init+0x1fa>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a46      	ldr	r2, [pc, #280]	; (800195c <HAL_GPIO_Init+0x2fc>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d007      	beq.n	8001856 <HAL_GPIO_Init+0x1f6>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a45      	ldr	r2, [pc, #276]	; (8001960 <HAL_GPIO_Init+0x300>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d101      	bne.n	8001852 <HAL_GPIO_Init+0x1f2>
 800184e:	2304      	movs	r3, #4
 8001850:	e008      	b.n	8001864 <HAL_GPIO_Init+0x204>
 8001852:	2307      	movs	r3, #7
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x204>
 8001856:	2303      	movs	r3, #3
 8001858:	e004      	b.n	8001864 <HAL_GPIO_Init+0x204>
 800185a:	2302      	movs	r3, #2
 800185c:	e002      	b.n	8001864 <HAL_GPIO_Init+0x204>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_GPIO_Init+0x204>
 8001862:	2300      	movs	r3, #0
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	f002 0203 	and.w	r2, r2, #3
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	4093      	lsls	r3, r2
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001874:	4935      	ldr	r1, [pc, #212]	; (800194c <HAL_GPIO_Init+0x2ec>)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001882:	4b38      	ldr	r3, [pc, #224]	; (8001964 <HAL_GPIO_Init+0x304>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a6:	4a2f      	ldr	r2, [pc, #188]	; (8001964 <HAL_GPIO_Init+0x304>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ac:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <HAL_GPIO_Init+0x304>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d0:	4a24      	ldr	r2, [pc, #144]	; (8001964 <HAL_GPIO_Init+0x304>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018d6:	4b23      	ldr	r3, [pc, #140]	; (8001964 <HAL_GPIO_Init+0x304>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018fa:	4a1a      	ldr	r2, [pc, #104]	; (8001964 <HAL_GPIO_Init+0x304>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <HAL_GPIO_Init+0x304>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001924:	4a0f      	ldr	r2, [pc, #60]	; (8001964 <HAL_GPIO_Init+0x304>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3301      	adds	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b0f      	cmp	r3, #15
 8001934:	f67f aea2 	bls.w	800167c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40013800 	.word	0x40013800
 8001950:	40020000 	.word	0x40020000
 8001954:	40020400 	.word	0x40020400
 8001958:	40020800 	.word	0x40020800
 800195c:	40020c00 	.word	0x40020c00
 8001960:	40021000 	.word	0x40021000
 8001964:	40013c00 	.word	0x40013c00

08001968 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e12b      	b.n	8001bd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d106      	bne.n	8001994 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7fe fe92 	bl	80006b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2224      	movs	r2, #36	; 0x24
 8001998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f022 0201 	bic.w	r2, r2, #1
 80019aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019cc:	f000 fd40 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 80019d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4a81      	ldr	r2, [pc, #516]	; (8001bdc <HAL_I2C_Init+0x274>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d807      	bhi.n	80019ec <HAL_I2C_Init+0x84>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4a80      	ldr	r2, [pc, #512]	; (8001be0 <HAL_I2C_Init+0x278>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	bf94      	ite	ls
 80019e4:	2301      	movls	r3, #1
 80019e6:	2300      	movhi	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	e006      	b.n	80019fa <HAL_I2C_Init+0x92>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a7d      	ldr	r2, [pc, #500]	; (8001be4 <HAL_I2C_Init+0x27c>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	bf94      	ite	ls
 80019f4:	2301      	movls	r3, #1
 80019f6:	2300      	movhi	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e0e7      	b.n	8001bd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	4a78      	ldr	r2, [pc, #480]	; (8001be8 <HAL_I2C_Init+0x280>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0c9b      	lsrs	r3, r3, #18
 8001a0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	68ba      	ldr	r2, [r7, #8]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	4a6a      	ldr	r2, [pc, #424]	; (8001bdc <HAL_I2C_Init+0x274>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d802      	bhi.n	8001a3c <HAL_I2C_Init+0xd4>
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	e009      	b.n	8001a50 <HAL_I2C_Init+0xe8>
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a42:	fb02 f303 	mul.w	r3, r2, r3
 8001a46:	4a69      	ldr	r2, [pc, #420]	; (8001bec <HAL_I2C_Init+0x284>)
 8001a48:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4c:	099b      	lsrs	r3, r3, #6
 8001a4e:	3301      	adds	r3, #1
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	6812      	ldr	r2, [r2, #0]
 8001a54:	430b      	orrs	r3, r1
 8001a56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	495c      	ldr	r1, [pc, #368]	; (8001bdc <HAL_I2C_Init+0x274>)
 8001a6c:	428b      	cmp	r3, r1
 8001a6e:	d819      	bhi.n	8001aa4 <HAL_I2C_Init+0x13c>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1e59      	subs	r1, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a7e:	1c59      	adds	r1, r3, #1
 8001a80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a84:	400b      	ands	r3, r1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00a      	beq.n	8001aa0 <HAL_I2C_Init+0x138>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1e59      	subs	r1, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a98:	3301      	adds	r3, #1
 8001a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a9e:	e051      	b.n	8001b44 <HAL_I2C_Init+0x1dc>
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	e04f      	b.n	8001b44 <HAL_I2C_Init+0x1dc>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d111      	bne.n	8001ad0 <HAL_I2C_Init+0x168>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1e58      	subs	r0, r3, #1
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	440b      	add	r3, r1
 8001aba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bf0c      	ite	eq
 8001ac8:	2301      	moveq	r3, #1
 8001aca:	2300      	movne	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	e012      	b.n	8001af6 <HAL_I2C_Init+0x18e>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1e58      	subs	r0, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6859      	ldr	r1, [r3, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	440b      	add	r3, r1
 8001ade:	0099      	lsls	r1, r3, #2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	bf0c      	ite	eq
 8001af0:	2301      	moveq	r3, #1
 8001af2:	2300      	movne	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_I2C_Init+0x196>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e022      	b.n	8001b44 <HAL_I2C_Init+0x1dc>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10e      	bne.n	8001b24 <HAL_I2C_Init+0x1bc>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1e58      	subs	r0, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6859      	ldr	r1, [r3, #4]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	440b      	add	r3, r1
 8001b14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b18:	3301      	adds	r3, #1
 8001b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b22:	e00f      	b.n	8001b44 <HAL_I2C_Init+0x1dc>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1e58      	subs	r0, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	0099      	lsls	r1, r3, #2
 8001b34:	440b      	add	r3, r1
 8001b36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	6809      	ldr	r1, [r1, #0]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69da      	ldr	r2, [r3, #28]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6911      	ldr	r1, [r2, #16]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	68d2      	ldr	r2, [r2, #12]
 8001b7e:	4311      	orrs	r1, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	430b      	orrs	r3, r1
 8001b86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	000186a0 	.word	0x000186a0
 8001be0:	001e847f 	.word	0x001e847f
 8001be4:	003d08ff 	.word	0x003d08ff
 8001be8:	431bde83 	.word	0x431bde83
 8001bec:	10624dd3 	.word	0x10624dd3

08001bf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e267      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d075      	beq.n	8001cfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c0e:	4b88      	ldr	r3, [pc, #544]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d00c      	beq.n	8001c34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c1a:	4b85      	ldr	r3, [pc, #532]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d112      	bne.n	8001c4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c26:	4b82      	ldr	r3, [pc, #520]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c32:	d10b      	bne.n	8001c4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	4b7e      	ldr	r3, [pc, #504]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d05b      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x108>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d157      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e242      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c54:	d106      	bne.n	8001c64 <HAL_RCC_OscConfig+0x74>
 8001c56:	4b76      	ldr	r3, [pc, #472]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a75      	ldr	r2, [pc, #468]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e01d      	b.n	8001ca0 <HAL_RCC_OscConfig+0xb0>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x98>
 8001c6e:	4b70      	ldr	r3, [pc, #448]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a6f      	ldr	r2, [pc, #444]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b6d      	ldr	r3, [pc, #436]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a6c      	ldr	r2, [pc, #432]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0xb0>
 8001c88:	4b69      	ldr	r3, [pc, #420]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a68      	ldr	r2, [pc, #416]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b66      	ldr	r3, [pc, #408]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a65      	ldr	r2, [pc, #404]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d013      	beq.n	8001cd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fbd0 	bl	800144c <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fbcc 	bl	800144c <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e207      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc2:	4b5b      	ldr	r3, [pc, #364]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xc0>
 8001cce:	e014      	b.n	8001cfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fbbc 	bl	800144c <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff fbb8 	bl	800144c <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e1f3      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cea:	4b51      	ldr	r3, [pc, #324]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xe8>
 8001cf6:	e000      	b.n	8001cfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d063      	beq.n	8001dce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d06:	4b4a      	ldr	r3, [pc, #296]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00b      	beq.n	8001d2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d12:	4b47      	ldr	r3, [pc, #284]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d11c      	bne.n	8001d58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d1e:	4b44      	ldr	r3, [pc, #272]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d116      	bne.n	8001d58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2a:	4b41      	ldr	r3, [pc, #260]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_RCC_OscConfig+0x152>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e1c7      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d42:	4b3b      	ldr	r3, [pc, #236]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4937      	ldr	r1, [pc, #220]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d56:	e03a      	b.n	8001dce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d020      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d60:	4b34      	ldr	r3, [pc, #208]	; (8001e34 <HAL_RCC_OscConfig+0x244>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d66:	f7ff fb71 	bl	800144c <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d6e:	f7ff fb6d 	bl	800144c <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e1a8      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d80:	4b2b      	ldr	r3, [pc, #172]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8c:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4925      	ldr	r1, [pc, #148]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]
 8001da0:	e015      	b.n	8001dce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da2:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_RCC_OscConfig+0x244>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff fb50 	bl	800144c <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db0:	f7ff fb4c 	bl	800144c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e187      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d036      	beq.n	8001e48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d016      	beq.n	8001e10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <HAL_RCC_OscConfig+0x248>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de8:	f7ff fb30 	bl	800144c <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df0:	f7ff fb2c 	bl	800144c <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e167      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <HAL_RCC_OscConfig+0x240>)
 8001e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x200>
 8001e0e:	e01b      	b.n	8001e48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <HAL_RCC_OscConfig+0x248>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e16:	f7ff fb19 	bl	800144c <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1c:	e00e      	b.n	8001e3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e1e:	f7ff fb15 	bl	800144c <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d907      	bls.n	8001e3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e150      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
 8001e30:	40023800 	.word	0x40023800
 8001e34:	42470000 	.word	0x42470000
 8001e38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3c:	4b88      	ldr	r3, [pc, #544]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1ea      	bne.n	8001e1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 8097 	beq.w	8001f84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e56:	2300      	movs	r3, #0
 8001e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5a:	4b81      	ldr	r3, [pc, #516]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10f      	bne.n	8001e86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	4b7d      	ldr	r3, [pc, #500]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a7c      	ldr	r2, [pc, #496]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b7a      	ldr	r3, [pc, #488]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e82:	2301      	movs	r3, #1
 8001e84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e86:	4b77      	ldr	r3, [pc, #476]	; (8002064 <HAL_RCC_OscConfig+0x474>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d118      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e92:	4b74      	ldr	r3, [pc, #464]	; (8002064 <HAL_RCC_OscConfig+0x474>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a73      	ldr	r2, [pc, #460]	; (8002064 <HAL_RCC_OscConfig+0x474>)
 8001e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9e:	f7ff fad5 	bl	800144c <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea6:	f7ff fad1 	bl	800144c <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e10c      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	4b6a      	ldr	r3, [pc, #424]	; (8002064 <HAL_RCC_OscConfig+0x474>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d106      	bne.n	8001eda <HAL_RCC_OscConfig+0x2ea>
 8001ecc:	4b64      	ldr	r3, [pc, #400]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed0:	4a63      	ldr	r2, [pc, #396]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed8:	e01c      	b.n	8001f14 <HAL_RCC_OscConfig+0x324>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b05      	cmp	r3, #5
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0x30c>
 8001ee2:	4b5f      	ldr	r3, [pc, #380]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee6:	4a5e      	ldr	r2, [pc, #376]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	6713      	str	r3, [r2, #112]	; 0x70
 8001eee:	4b5c      	ldr	r3, [pc, #368]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef2:	4a5b      	ldr	r2, [pc, #364]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8001efa:	e00b      	b.n	8001f14 <HAL_RCC_OscConfig+0x324>
 8001efc:	4b58      	ldr	r3, [pc, #352]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f00:	4a57      	ldr	r2, [pc, #348]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	6713      	str	r3, [r2, #112]	; 0x70
 8001f08:	4b55      	ldr	r3, [pc, #340]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0c:	4a54      	ldr	r2, [pc, #336]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f0e:	f023 0304 	bic.w	r3, r3, #4
 8001f12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d015      	beq.n	8001f48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1c:	f7ff fa96 	bl	800144c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f22:	e00a      	b.n	8001f3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f24:	f7ff fa92 	bl	800144c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e0cb      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3a:	4b49      	ldr	r3, [pc, #292]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0ee      	beq.n	8001f24 <HAL_RCC_OscConfig+0x334>
 8001f46:	e014      	b.n	8001f72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f48:	f7ff fa80 	bl	800144c <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f50:	f7ff fa7c 	bl	800144c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e0b5      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f66:	4b3e      	ldr	r3, [pc, #248]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1ee      	bne.n	8001f50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d105      	bne.n	8001f84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f78:	4b39      	ldr	r3, [pc, #228]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	4a38      	ldr	r2, [pc, #224]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f000 80a1 	beq.w	80020d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f8e:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d05c      	beq.n	8002054 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d141      	bne.n	8002026 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa2:	4b31      	ldr	r3, [pc, #196]	; (8002068 <HAL_RCC_OscConfig+0x478>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7ff fa50 	bl	800144c <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7ff fa4c 	bl	800144c <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e087      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc2:	4b27      	ldr	r3, [pc, #156]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f0      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69da      	ldr	r2, [r3, #28]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	019b      	lsls	r3, r3, #6
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	085b      	lsrs	r3, r3, #1
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	041b      	lsls	r3, r3, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	061b      	lsls	r3, r3, #24
 8001ff2:	491b      	ldr	r1, [pc, #108]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_RCC_OscConfig+0x478>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7ff fa25 	bl	800144c <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002006:	f7ff fa21 	bl	800144c <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e05c      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x416>
 8002024:	e054      	b.n	80020d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <HAL_RCC_OscConfig+0x478>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff fa0e 	bl	800144c <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002034:	f7ff fa0a 	bl	800144c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e045      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_RCC_OscConfig+0x470>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x444>
 8002052:	e03d      	b.n	80020d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d107      	bne.n	800206c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e038      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
 8002060:	40023800 	.word	0x40023800
 8002064:	40007000 	.word	0x40007000
 8002068:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800206c:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <HAL_RCC_OscConfig+0x4ec>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d028      	beq.n	80020cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002084:	429a      	cmp	r2, r3
 8002086:	d121      	bne.n	80020cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	429a      	cmp	r2, r3
 8002094:	d11a      	bne.n	80020cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800209c:	4013      	ands	r3, r2
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d111      	bne.n	80020cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b2:	085b      	lsrs	r3, r3, #1
 80020b4:	3b01      	subs	r3, #1
 80020b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d107      	bne.n	80020cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800

080020e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0cc      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f4:	4b68      	ldr	r3, [pc, #416]	; (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d90c      	bls.n	800211c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b65      	ldr	r3, [pc, #404]	; (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b63      	ldr	r3, [pc, #396]	; (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0b8      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d020      	beq.n	800216a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002134:	4b59      	ldr	r3, [pc, #356]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4a58      	ldr	r2, [pc, #352]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800213e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800214c:	4b53      	ldr	r3, [pc, #332]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	4a52      	ldr	r2, [pc, #328]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002156:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002158:	4b50      	ldr	r3, [pc, #320]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	494d      	ldr	r1, [pc, #308]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d044      	beq.n	8002200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d107      	bne.n	800218e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217e:	4b47      	ldr	r3, [pc, #284]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d119      	bne.n	80021be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e07f      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d003      	beq.n	800219e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800219a:	2b03      	cmp	r3, #3
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219e:	4b3f      	ldr	r3, [pc, #252]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d109      	bne.n	80021be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e06f      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ae:	4b3b      	ldr	r3, [pc, #236]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e067      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021be:	4b37      	ldr	r3, [pc, #220]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f023 0203 	bic.w	r2, r3, #3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4934      	ldr	r1, [pc, #208]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d0:	f7ff f93c 	bl	800144c <HAL_GetTick>
 80021d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	e00a      	b.n	80021ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d8:	f7ff f938 	bl	800144c <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e04f      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ee:	4b2b      	ldr	r3, [pc, #172]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 020c 	and.w	r2, r3, #12
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d1eb      	bne.n	80021d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002200:	4b25      	ldr	r3, [pc, #148]	; (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d20c      	bcs.n	8002228 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b22      	ldr	r3, [pc, #136]	; (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b20      	ldr	r3, [pc, #128]	; (8002298 <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e032      	b.n	800228e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4916      	ldr	r1, [pc, #88]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	490e      	ldr	r1, [pc, #56]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002266:	f000 f821 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 800226a:	4602      	mov	r2, r0
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	490a      	ldr	r1, [pc, #40]	; (80022a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002278:	5ccb      	ldrb	r3, [r1, r3]
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	4a09      	ldr	r2, [pc, #36]	; (80022a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002282:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fbae 	bl	80009e8 <HAL_InitTick>

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40023c00 	.word	0x40023c00
 800229c:	40023800 	.word	0x40023800
 80022a0:	08008840 	.word	0x08008840
 80022a4:	2000079c 	.word	0x2000079c
 80022a8:	200007a0 	.word	0x200007a0

080022ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b0:	b090      	sub	sp, #64	; 0x40
 80022b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	637b      	str	r3, [r7, #52]	; 0x34
 80022b8:	2300      	movs	r3, #0
 80022ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022bc:	2300      	movs	r3, #0
 80022be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022c4:	4b59      	ldr	r3, [pc, #356]	; (800242c <HAL_RCC_GetSysClockFreq+0x180>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 030c 	and.w	r3, r3, #12
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d00d      	beq.n	80022ec <HAL_RCC_GetSysClockFreq+0x40>
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	f200 80a1 	bhi.w	8002418 <HAL_RCC_GetSysClockFreq+0x16c>
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0x34>
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d003      	beq.n	80022e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022de:	e09b      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022e0:	4b53      	ldr	r3, [pc, #332]	; (8002430 <HAL_RCC_GetSysClockFreq+0x184>)
 80022e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80022e4:	e09b      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022e6:	4b53      	ldr	r3, [pc, #332]	; (8002434 <HAL_RCC_GetSysClockFreq+0x188>)
 80022e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80022ea:	e098      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022ec:	4b4f      	ldr	r3, [pc, #316]	; (800242c <HAL_RCC_GetSysClockFreq+0x180>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022f6:	4b4d      	ldr	r3, [pc, #308]	; (800242c <HAL_RCC_GetSysClockFreq+0x180>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d028      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002302:	4b4a      	ldr	r3, [pc, #296]	; (800242c <HAL_RCC_GetSysClockFreq+0x180>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	099b      	lsrs	r3, r3, #6
 8002308:	2200      	movs	r2, #0
 800230a:	623b      	str	r3, [r7, #32]
 800230c:	627a      	str	r2, [r7, #36]	; 0x24
 800230e:	6a3b      	ldr	r3, [r7, #32]
 8002310:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002314:	2100      	movs	r1, #0
 8002316:	4b47      	ldr	r3, [pc, #284]	; (8002434 <HAL_RCC_GetSysClockFreq+0x188>)
 8002318:	fb03 f201 	mul.w	r2, r3, r1
 800231c:	2300      	movs	r3, #0
 800231e:	fb00 f303 	mul.w	r3, r0, r3
 8002322:	4413      	add	r3, r2
 8002324:	4a43      	ldr	r2, [pc, #268]	; (8002434 <HAL_RCC_GetSysClockFreq+0x188>)
 8002326:	fba0 1202 	umull	r1, r2, r0, r2
 800232a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800232c:	460a      	mov	r2, r1
 800232e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002332:	4413      	add	r3, r2
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002338:	2200      	movs	r2, #0
 800233a:	61bb      	str	r3, [r7, #24]
 800233c:	61fa      	str	r2, [r7, #28]
 800233e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002342:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002346:	f7fd ff9b 	bl	8000280 <__aeabi_uldivmod>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	4613      	mov	r3, r2
 8002350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002352:	e053      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002354:	4b35      	ldr	r3, [pc, #212]	; (800242c <HAL_RCC_GetSysClockFreq+0x180>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	099b      	lsrs	r3, r3, #6
 800235a:	2200      	movs	r2, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	617a      	str	r2, [r7, #20]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002366:	f04f 0b00 	mov.w	fp, #0
 800236a:	4652      	mov	r2, sl
 800236c:	465b      	mov	r3, fp
 800236e:	f04f 0000 	mov.w	r0, #0
 8002372:	f04f 0100 	mov.w	r1, #0
 8002376:	0159      	lsls	r1, r3, #5
 8002378:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800237c:	0150      	lsls	r0, r2, #5
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	ebb2 080a 	subs.w	r8, r2, sl
 8002386:	eb63 090b 	sbc.w	r9, r3, fp
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002396:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800239a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800239e:	ebb2 0408 	subs.w	r4, r2, r8
 80023a2:	eb63 0509 	sbc.w	r5, r3, r9
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	00eb      	lsls	r3, r5, #3
 80023b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023b4:	00e2      	lsls	r2, r4, #3
 80023b6:	4614      	mov	r4, r2
 80023b8:	461d      	mov	r5, r3
 80023ba:	eb14 030a 	adds.w	r3, r4, sl
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	eb45 030b 	adc.w	r3, r5, fp
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023d2:	4629      	mov	r1, r5
 80023d4:	028b      	lsls	r3, r1, #10
 80023d6:	4621      	mov	r1, r4
 80023d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023dc:	4621      	mov	r1, r4
 80023de:	028a      	lsls	r2, r1, #10
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023e6:	2200      	movs	r2, #0
 80023e8:	60bb      	str	r3, [r7, #8]
 80023ea:	60fa      	str	r2, [r7, #12]
 80023ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023f0:	f7fd ff46 	bl	8000280 <__aeabi_uldivmod>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4613      	mov	r3, r2
 80023fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_RCC_GetSysClockFreq+0x180>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	0c1b      	lsrs	r3, r3, #16
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	3301      	adds	r3, #1
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800240c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002410:	fbb2 f3f3 	udiv	r3, r2, r3
 8002414:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002416:	e002      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_RCC_GetSysClockFreq+0x184>)
 800241a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800241c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800241e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002420:	4618      	mov	r0, r3
 8002422:	3740      	adds	r7, #64	; 0x40
 8002424:	46bd      	mov	sp, r7
 8002426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	00f42400 	.word	0x00f42400
 8002434:	017d7840 	.word	0x017d7840

08002438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800243c:	4b03      	ldr	r3, [pc, #12]	; (800244c <HAL_RCC_GetHCLKFreq+0x14>)
 800243e:	681b      	ldr	r3, [r3, #0]
}
 8002440:	4618      	mov	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	2000079c 	.word	0x2000079c

08002450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002454:	f7ff fff0 	bl	8002438 <HAL_RCC_GetHCLKFreq>
 8002458:	4602      	mov	r2, r0
 800245a:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	0a9b      	lsrs	r3, r3, #10
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	4903      	ldr	r1, [pc, #12]	; (8002474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002466:	5ccb      	ldrb	r3, [r1, r3]
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800246c:	4618      	mov	r0, r3
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40023800 	.word	0x40023800
 8002474:	08008850 	.word	0x08008850

08002478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800247c:	f7ff ffdc 	bl	8002438 <HAL_RCC_GetHCLKFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b05      	ldr	r3, [pc, #20]	; (8002498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	0b5b      	lsrs	r3, r3, #13
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	4903      	ldr	r1, [pc, #12]	; (800249c <HAL_RCC_GetPCLK2Freq+0x24>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40023800 	.word	0x40023800
 800249c:	08008850 	.word	0x08008850

080024a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	220f      	movs	r2, #15
 80024ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024b0:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_GetClockConfig+0x5c>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0203 	and.w	r2, r3, #3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <HAL_RCC_GetClockConfig+0x5c>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <HAL_RCC_GetClockConfig+0x5c>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <HAL_RCC_GetClockConfig+0x5c>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	08db      	lsrs	r3, r3, #3
 80024da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_RCC_GetClockConfig+0x60>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0207 	and.w	r2, r3, #7
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	601a      	str	r2, [r3, #0]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40023800 	.word	0x40023800
 8002500:	40023c00 	.word	0x40023c00

08002504 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d105      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002528:	2b00      	cmp	r3, #0
 800252a:	d035      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800252c:	4b67      	ldr	r3, [pc, #412]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002532:	f7fe ff8b 	bl	800144c <HAL_GetTick>
 8002536:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002538:	e008      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800253a:	f7fe ff87 	bl	800144c <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e0ba      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800254c:	4b60      	ldr	r3, [pc, #384]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1f0      	bne.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	019a      	lsls	r2, r3, #6
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	071b      	lsls	r3, r3, #28
 8002564:	495a      	ldr	r1, [pc, #360]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800256c:	4b57      	ldr	r3, [pc, #348]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800256e:	2201      	movs	r2, #1
 8002570:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002572:	f7fe ff6b 	bl	800144c <HAL_GetTick>
 8002576:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002578:	e008      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800257a:	f7fe ff67 	bl	800144c <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e09a      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800258c:	4b50      	ldr	r3, [pc, #320]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 8083 	beq.w	80026ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	4b49      	ldr	r3, [pc, #292]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	4a48      	ldr	r2, [pc, #288]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	6413      	str	r3, [r2, #64]	; 0x40
 80025b6:	4b46      	ldr	r3, [pc, #280]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	60fb      	str	r3, [r7, #12]
 80025c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80025c2:	4b44      	ldr	r3, [pc, #272]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a43      	ldr	r2, [pc, #268]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025cc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025ce:	f7fe ff3d 	bl	800144c <HAL_GetTick>
 80025d2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80025d6:	f7fe ff39 	bl	800144c <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e06c      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025e8:	4b3a      	ldr	r3, [pc, #232]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025f4:	4b36      	ldr	r3, [pc, #216]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d02f      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	429a      	cmp	r2, r3
 8002610:	d028      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002612:	4b2f      	ldr	r3, [pc, #188]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800261a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800261c:	4b2e      	ldr	r3, [pc, #184]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800261e:	2201      	movs	r2, #1
 8002620:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002622:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002628:	4a29      	ldr	r2, [pc, #164]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800262e:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b01      	cmp	r3, #1
 8002638:	d114      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800263a:	f7fe ff07 	bl	800144c <HAL_GetTick>
 800263e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002640:	e00a      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002642:	f7fe ff03 	bl	800144c <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002650:	4293      	cmp	r3, r2
 8002652:	d901      	bls.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e034      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002658:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0ee      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002670:	d10d      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002686:	4912      	ldr	r1, [pc, #72]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002688:	4313      	orrs	r3, r2
 800268a:	608b      	str	r3, [r1, #8]
 800268c:	e005      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800268e:	4b10      	ldr	r3, [pc, #64]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	4a0f      	ldr	r2, [pc, #60]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002694:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002698:	6093      	str	r3, [r2, #8]
 800269a:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800269c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a6:	490a      	ldr	r1, [pc, #40]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	7c1a      	ldrb	r2, [r3, #16]
 80026bc:	4b07      	ldr	r3, [pc, #28]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026be:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	42470068 	.word	0x42470068
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40007000 	.word	0x40007000
 80026d8:	42470e40 	.word	0x42470e40
 80026dc:	424711e0 	.word	0x424711e0

080026e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e066      	b.n	80027c4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	7f5b      	ldrb	r3, [r3, #29]
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d105      	bne.n	800270c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe f91a 	bl	8000940 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	22ca      	movs	r2, #202	; 0xca
 8002718:	625a      	str	r2, [r3, #36]	; 0x24
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2253      	movs	r2, #83	; 0x53
 8002720:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f998 	bl	8002a58 <RTC_EnterInitMode>
 8002728:	4603      	mov	r3, r0
 800272a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d12c      	bne.n	800278c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002744:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6899      	ldr	r1, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	431a      	orrs	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	68d2      	ldr	r2, [r2, #12]
 800276c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6919      	ldr	r1, [r3, #16]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	041a      	lsls	r2, r3, #16
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f99f 	bl	8002ac6 <RTC_ExitInitMode>
 8002788:	4603      	mov	r3, r0
 800278a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d113      	bne.n	80027ba <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027a0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	22ff      	movs	r2, #255	; 0xff
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80027cc:	b590      	push	{r4, r7, lr}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	7f1b      	ldrb	r3, [r3, #28]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_RTC_SetTime+0x1c>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e087      	b.n	80028f8 <HAL_RTC_SetTime+0x12c>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2202      	movs	r2, #2
 80027f2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d126      	bne.n	8002848 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2200      	movs	r2, #0
 800280c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f000 f97c 	bl	8002b10 <RTC_ByteToBcd2>
 8002818:	4603      	mov	r3, r0
 800281a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	785b      	ldrb	r3, [r3, #1]
 8002820:	4618      	mov	r0, r3
 8002822:	f000 f975 	bl	8002b10 <RTC_ByteToBcd2>
 8002826:	4603      	mov	r3, r0
 8002828:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800282a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	789b      	ldrb	r3, [r3, #2]
 8002830:	4618      	mov	r0, r3
 8002832:	f000 f96d 	bl	8002b10 <RTC_ByteToBcd2>
 8002836:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002838:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	78db      	ldrb	r3, [r3, #3]
 8002840:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	e018      	b.n	800287a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2200      	movs	r2, #0
 800285a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	785b      	ldrb	r3, [r3, #1]
 8002866:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002868:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800286e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	78db      	ldrb	r3, [r3, #3]
 8002874:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002876:	4313      	orrs	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	22ca      	movs	r2, #202	; 0xca
 8002880:	625a      	str	r2, [r3, #36]	; 0x24
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2253      	movs	r2, #83	; 0x53
 8002888:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f8e4 	bl	8002a58 <RTC_EnterInitMode>
 8002890:	4603      	mov	r3, r0
 8002892:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002894:	7cfb      	ldrb	r3, [r7, #19]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d120      	bne.n	80028dc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80028a4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80028a8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028b8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6899      	ldr	r1, [r3, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	430a      	orrs	r2, r1
 80028d0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f8f7 	bl	8002ac6 <RTC_ExitInitMode>
 80028d8:	4603      	mov	r3, r0
 80028da:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80028dc:	7cfb      	ldrb	r3, [r7, #19]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d102      	bne.n	80028e8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2201      	movs	r2, #1
 80028e6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	22ff      	movs	r2, #255	; 0xff
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	771a      	strb	r2, [r3, #28]

  return status;
 80028f6:	7cfb      	ldrb	r3, [r7, #19]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	371c      	adds	r7, #28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd90      	pop	{r4, r7, pc}

08002900 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002900:	b590      	push	{r4, r7, lr}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	7f1b      	ldrb	r3, [r3, #28]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_RTC_SetDate+0x1c>
 8002918:	2302      	movs	r3, #2
 800291a:	e071      	b.n	8002a00 <HAL_RTC_SetDate+0x100>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2202      	movs	r2, #2
 8002926:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10e      	bne.n	800294c <HAL_RTC_SetDate+0x4c>
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	785b      	ldrb	r3, [r3, #1]
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	785b      	ldrb	r3, [r3, #1]
 800293e:	f023 0310 	bic.w	r3, r3, #16
 8002942:	b2db      	uxtb	r3, r3
 8002944:	330a      	adds	r3, #10
 8002946:	b2da      	uxtb	r2, r3
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d11c      	bne.n	800298c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	78db      	ldrb	r3, [r3, #3]
 8002956:	4618      	mov	r0, r3
 8002958:	f000 f8da 	bl	8002b10 <RTC_ByteToBcd2>
 800295c:	4603      	mov	r3, r0
 800295e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	785b      	ldrb	r3, [r3, #1]
 8002964:	4618      	mov	r0, r3
 8002966:	f000 f8d3 	bl	8002b10 <RTC_ByteToBcd2>
 800296a:	4603      	mov	r3, r0
 800296c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800296e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	789b      	ldrb	r3, [r3, #2]
 8002974:	4618      	mov	r0, r3
 8002976:	f000 f8cb 	bl	8002b10 <RTC_ByteToBcd2>
 800297a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800297c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002986:	4313      	orrs	r3, r2
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	e00e      	b.n	80029aa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	78db      	ldrb	r3, [r3, #3]
 8002990:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	785b      	ldrb	r3, [r3, #1]
 8002996:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002998:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800299e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	22ca      	movs	r2, #202	; 0xca
 80029b0:	625a      	str	r2, [r3, #36]	; 0x24
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2253      	movs	r2, #83	; 0x53
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f84c 	bl	8002a58 <RTC_EnterInitMode>
 80029c0:	4603      	mov	r3, r0
 80029c2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80029c4:	7cfb      	ldrb	r3, [r7, #19]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10c      	bne.n	80029e4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80029d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80029d8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f873 	bl	8002ac6 <RTC_ExitInitMode>
 80029e0:	4603      	mov	r3, r0
 80029e2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80029e4:	7cfb      	ldrb	r3, [r7, #19]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d102      	bne.n	80029f0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2201      	movs	r2, #1
 80029ee:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	22ff      	movs	r2, #255	; 0xff
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	771a      	strb	r2, [r3, #28]

  return status;
 80029fe:	7cfb      	ldrb	r3, [r7, #19]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd90      	pop	{r4, r7, pc}

08002a08 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a22:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a24:	f7fe fd12 	bl	800144c <HAL_GetTick>
 8002a28:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002a2a:	e009      	b.n	8002a40 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a2c:	f7fe fd0e 	bl	800144c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a3a:	d901      	bls.n	8002a40 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e007      	b.n	8002a50 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0ee      	beq.n	8002a2c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d122      	bne.n	8002abc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a84:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a86:	f7fe fce1 	bl	800144c <HAL_GetTick>
 8002a8a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002a8c:	e00c      	b.n	8002aa8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a8e:	f7fe fcdd 	bl	800144c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a9c:	d904      	bls.n	8002aa8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d102      	bne.n	8002abc <RTC_EnterInitMode+0x64>
 8002ab6:	7bfb      	ldrb	r3, [r7, #15]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d1e8      	bne.n	8002a8e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ae0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff ff89 	bl	8002a08 <HAL_RTC_WaitForSynchro>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d004      	beq.n	8002b06 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2204      	movs	r2, #4
 8002b00:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002b1e:	e005      	b.n	8002b2c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	3301      	adds	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	3b0a      	subs	r3, #10
 8002b2a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	2b09      	cmp	r3, #9
 8002b30:	d8f6      	bhi.n	8002b20 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	b2db      	uxtb	r3, r3
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	7f1b      	ldrb	r3, [r3, #28]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_RTCEx_SetCalibrationOutPut+0x16>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e030      	b.n	8002bc2 <HAL_RTCEx_SetCalibrationOutPut+0x78>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	22ca      	movs	r2, #202	; 0xca
 8002b72:	625a      	str	r2, [r3, #36]	; 0x24
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2253      	movs	r2, #83	; 0x53
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8002b8a:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6899      	ldr	r1, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002baa:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	22ff      	movs	r2, #255	; 0xff
 8002bb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e041      	b.n	8002c64 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d106      	bne.n	8002bfa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f839 	bl	8002c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	f000 f9c9 	bl	8002fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d001      	beq.n	8002c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e044      	b.n	8002d22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0201 	orr.w	r2, r2, #1
 8002cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1e      	ldr	r2, [pc, #120]	; (8002d30 <HAL_TIM_Base_Start_IT+0xb0>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d018      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x6c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc2:	d013      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x6c>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1a      	ldr	r2, [pc, #104]	; (8002d34 <HAL_TIM_Base_Start_IT+0xb4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00e      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x6c>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a19      	ldr	r2, [pc, #100]	; (8002d38 <HAL_TIM_Base_Start_IT+0xb8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d009      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x6c>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a17      	ldr	r2, [pc, #92]	; (8002d3c <HAL_TIM_Base_Start_IT+0xbc>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d004      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x6c>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a16      	ldr	r2, [pc, #88]	; (8002d40 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d111      	bne.n	8002d10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2b06      	cmp	r3, #6
 8002cfc:	d010      	beq.n	8002d20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0201 	orr.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0e:	e007      	b.n	8002d20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40010000 	.word	0x40010000
 8002d34:	40000400 	.word	0x40000400
 8002d38:	40000800 	.word	0x40000800
 8002d3c:	40000c00 	.word	0x40000c00
 8002d40:	40014000 	.word	0x40014000

08002d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d122      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d11b      	bne.n	8002da0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f06f 0202 	mvn.w	r2, #2
 8002d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f8ee 	bl	8002f68 <HAL_TIM_IC_CaptureCallback>
 8002d8c:	e005      	b.n	8002d9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 f8e0 	bl	8002f54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f8f1 	bl	8002f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	f003 0304 	and.w	r3, r3, #4
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d122      	bne.n	8002df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d11b      	bne.n	8002df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f06f 0204 	mvn.w	r2, #4
 8002dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f8c4 	bl	8002f68 <HAL_TIM_IC_CaptureCallback>
 8002de0:	e005      	b.n	8002dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f8b6 	bl	8002f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f8c7 	bl	8002f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d122      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d11b      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0208 	mvn.w	r2, #8
 8002e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f89a 	bl	8002f68 <HAL_TIM_IC_CaptureCallback>
 8002e34:	e005      	b.n	8002e42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f88c 	bl	8002f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f89d 	bl	8002f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0310 	and.w	r3, r3, #16
 8002e52:	2b10      	cmp	r3, #16
 8002e54:	d122      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b10      	cmp	r3, #16
 8002e62:	d11b      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0210 	mvn.w	r2, #16
 8002e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2208      	movs	r2, #8
 8002e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f870 	bl	8002f68 <HAL_TIM_IC_CaptureCallback>
 8002e88:	e005      	b.n	8002e96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f862 	bl	8002f54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f873 	bl	8002f7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d10e      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d107      	bne.n	8002ec8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0201 	mvn.w	r2, #1
 8002ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fd fcc0 	bl	8000848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed2:	2b80      	cmp	r3, #128	; 0x80
 8002ed4:	d10e      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee0:	2b80      	cmp	r3, #128	; 0x80
 8002ee2:	d107      	bne.n	8002ef4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f8e2 	bl	80030b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efe:	2b40      	cmp	r3, #64	; 0x40
 8002f00:	d10e      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0c:	2b40      	cmp	r3, #64	; 0x40
 8002f0e:	d107      	bne.n	8002f20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f838 	bl	8002f90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	f003 0320 	and.w	r3, r3, #32
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	d10e      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d107      	bne.n	8002f4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0220 	mvn.w	r2, #32
 8002f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f8ac 	bl	80030a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a34      	ldr	r2, [pc, #208]	; (8003088 <TIM_Base_SetConfig+0xe4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d00f      	beq.n	8002fdc <TIM_Base_SetConfig+0x38>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fc2:	d00b      	beq.n	8002fdc <TIM_Base_SetConfig+0x38>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a31      	ldr	r2, [pc, #196]	; (800308c <TIM_Base_SetConfig+0xe8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d007      	beq.n	8002fdc <TIM_Base_SetConfig+0x38>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a30      	ldr	r2, [pc, #192]	; (8003090 <TIM_Base_SetConfig+0xec>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d003      	beq.n	8002fdc <TIM_Base_SetConfig+0x38>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a2f      	ldr	r2, [pc, #188]	; (8003094 <TIM_Base_SetConfig+0xf0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d108      	bne.n	8002fee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a25      	ldr	r2, [pc, #148]	; (8003088 <TIM_Base_SetConfig+0xe4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d01b      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffc:	d017      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a22      	ldr	r2, [pc, #136]	; (800308c <TIM_Base_SetConfig+0xe8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a21      	ldr	r2, [pc, #132]	; (8003090 <TIM_Base_SetConfig+0xec>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00f      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a20      	ldr	r2, [pc, #128]	; (8003094 <TIM_Base_SetConfig+0xf0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00b      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a1f      	ldr	r2, [pc, #124]	; (8003098 <TIM_Base_SetConfig+0xf4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d007      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a1e      	ldr	r2, [pc, #120]	; (800309c <TIM_Base_SetConfig+0xf8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d003      	beq.n	800302e <TIM_Base_SetConfig+0x8a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <TIM_Base_SetConfig+0xfc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d108      	bne.n	8003040 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a08      	ldr	r2, [pc, #32]	; (8003088 <TIM_Base_SetConfig+0xe4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d103      	bne.n	8003074 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	615a      	str	r2, [r3, #20]
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40010000 	.word	0x40010000
 800308c:	40000400 	.word	0x40000400
 8003090:	40000800 	.word	0x40000800
 8003094:	40000c00 	.word	0x40000c00
 8003098:	40014000 	.word	0x40014000
 800309c:	40014400 	.word	0x40014400
 80030a0:	40014800 	.word	0x40014800

080030a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <ai_buffer_get_size>:
 80030cc:	b378      	cbz	r0, 800312e <ai_buffer_get_size+0x62>
 80030ce:	b410      	push	{r4}
 80030d0:	6803      	ldr	r3, [r0, #0]
 80030d2:	4a17      	ldr	r2, [pc, #92]	; (8003130 <ai_buffer_get_size+0x64>)
 80030d4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80030d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030dc:	4293      	cmp	r3, r2
 80030de:	d01e      	beq.n	800311e <ai_buffer_get_size+0x52>
 80030e0:	6984      	ldr	r4, [r0, #24]
 80030e2:	6862      	ldr	r2, [r4, #4]
 80030e4:	7d03      	ldrb	r3, [r0, #20]
 80030e6:	6941      	ldr	r1, [r0, #20]
 80030e8:	f1a3 0301 	sub.w	r3, r3, #1
 80030ec:	fab3 f383 	clz	r3, r3
 80030f0:	095b      	lsrs	r3, r3, #5
 80030f2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80030f6:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80030fa:	da0b      	bge.n	8003114 <ai_buffer_get_size+0x48>
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d102      	bne.n	8003106 <ai_buffer_get_size+0x3a>
 8003100:	2802      	cmp	r0, #2
 8003102:	d007      	beq.n	8003114 <ai_buffer_get_size+0x48>
 8003104:	2302      	movs	r3, #2
 8003106:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800310a:	3301      	adds	r3, #1
 800310c:	4298      	cmp	r0, r3
 800310e:	fb01 f202 	mul.w	r2, r1, r2
 8003112:	d1f3      	bne.n	80030fc <ai_buffer_get_size+0x30>
 8003114:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8003118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	2900      	cmp	r1, #0
 8003120:	d0de      	beq.n	80030e0 <ai_buffer_get_size+0x14>
 8003122:	6984      	ldr	r4, [r0, #24]
 8003124:	6863      	ldr	r3, [r4, #4]
 8003126:	331f      	adds	r3, #31
 8003128:	f023 021f 	bic.w	r2, r3, #31
 800312c:	e7da      	b.n	80030e4 <ai_buffer_get_size+0x18>
 800312e:	4770      	bx	lr
 8003130:	000400c0 	.word	0x000400c0

08003134 <ai_buffer_array_sane>:
 8003134:	b138      	cbz	r0, 8003146 <ai_buffer_array_sane+0x12>
 8003136:	6843      	ldr	r3, [r0, #4]
 8003138:	b123      	cbz	r3, 8003144 <ai_buffer_array_sane+0x10>
 800313a:	8840      	ldrh	r0, [r0, #2]
 800313c:	3800      	subs	r0, #0
 800313e:	bf18      	it	ne
 8003140:	2001      	movne	r0, #1
 8003142:	4770      	bx	lr
 8003144:	4618      	mov	r0, r3
 8003146:	4770      	bx	lr

08003148 <ai_buffer_array_item_set_address>:
 8003148:	b150      	cbz	r0, 8003160 <ai_buffer_array_item_set_address+0x18>
 800314a:	6843      	ldr	r3, [r0, #4]
 800314c:	b14b      	cbz	r3, 8003162 <ai_buffer_array_item_set_address+0x1a>
 800314e:	8840      	ldrh	r0, [r0, #2]
 8003150:	b900      	cbnz	r0, 8003154 <ai_buffer_array_item_set_address+0xc>
 8003152:	4770      	bx	lr
 8003154:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8003158:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800315c:	2001      	movs	r0, #1
 800315e:	604a      	str	r2, [r1, #4]
 8003160:	4770      	bx	lr
 8003162:	4618      	mov	r0, r3
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop

08003168 <_ai_platform_acquire_crc>:
 8003168:	2001      	movs	r0, #1
 800316a:	4770      	bx	lr

0800316c <_ai_platform_release_crc>:
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop

08003170 <ai_platform_get_weights_map>:
 8003170:	2a00      	cmp	r2, #0
 8003172:	d037      	beq.n	80031e4 <ai_platform_get_weights_map+0x74>
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	4604      	mov	r4, r0
 8003178:	b1a0      	cbz	r0, 80031a4 <ai_platform_get_weights_map+0x34>
 800317a:	460f      	mov	r7, r1
 800317c:	b191      	cbz	r1, 80031a4 <ai_platform_get_weights_map+0x34>
 800317e:	4b25      	ldr	r3, [pc, #148]	; (8003214 <ai_platform_get_weights_map+0xa4>)
 8003180:	6810      	ldr	r0, [r2, #0]
 8003182:	4298      	cmp	r0, r3
 8003184:	4615      	mov	r5, r2
 8003186:	d00f      	beq.n	80031a8 <ai_platform_get_weights_map+0x38>
 8003188:	6855      	ldr	r5, [r2, #4]
 800318a:	b15d      	cbz	r5, 80031a4 <ai_platform_get_weights_map+0x34>
 800318c:	682e      	ldr	r6, [r5, #0]
 800318e:	429e      	cmp	r6, r3
 8003190:	d02a      	beq.n	80031e8 <ai_platform_get_weights_map+0x78>
 8003192:	f1a1 0001 	sub.w	r0, r1, #1
 8003196:	6025      	str	r5, [r4, #0]
 8003198:	fab0 f080 	clz	r0, r0
 800319c:	0940      	lsrs	r0, r0, #5
 800319e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031a0:	42a7      	cmp	r7, r4
 80031a2:	d034      	beq.n	800320e <ai_platform_get_weights_map+0x9e>
 80031a4:	2000      	movs	r0, #0
 80031a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031a8:	1d10      	adds	r0, r2, #4
 80031aa:	f7ff ffc3 	bl	8003134 <ai_buffer_array_sane>
 80031ae:	2800      	cmp	r0, #0
 80031b0:	d0f8      	beq.n	80031a4 <ai_platform_get_weights_map+0x34>
 80031b2:	88eb      	ldrh	r3, [r5, #6]
 80031b4:	429f      	cmp	r7, r3
 80031b6:	d1f5      	bne.n	80031a4 <ai_platform_get_weights_map+0x34>
 80031b8:	f04f 0e00 	mov.w	lr, #0
 80031bc:	1f23      	subs	r3, r4, #4
 80031be:	4670      	mov	r0, lr
 80031c0:	68aa      	ldr	r2, [r5, #8]
 80031c2:	eb02 0c0e 	add.w	ip, r2, lr
 80031c6:	f10e 0e1c 	add.w	lr, lr, #28
 80031ca:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80031ce:	b124      	cbz	r4, 80031da <ai_platform_get_weights_map+0x6a>
 80031d0:	3001      	adds	r0, #1
 80031d2:	4287      	cmp	r7, r0
 80031d4:	f843 4f04 	str.w	r4, [r3, #4]!
 80031d8:	d1f2      	bne.n	80031c0 <ai_platform_get_weights_map+0x50>
 80031da:	1a38      	subs	r0, r7, r0
 80031dc:	fab0 f080 	clz	r0, r0
 80031e0:	0940      	lsrs	r0, r0, #5
 80031e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031e4:	2000      	movs	r0, #0
 80031e6:	4770      	bx	lr
 80031e8:	1f23      	subs	r3, r4, #4
 80031ea:	4628      	mov	r0, r5
 80031ec:	2400      	movs	r4, #0
 80031ee:	e000      	b.n	80031f2 <ai_platform_get_weights_map+0x82>
 80031f0:	4614      	mov	r4, r2
 80031f2:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80031f6:	42b2      	cmp	r2, r6
 80031f8:	d0d2      	beq.n	80031a0 <ai_platform_get_weights_map+0x30>
 80031fa:	f843 2f04 	str.w	r2, [r3, #4]!
 80031fe:	1c62      	adds	r2, r4, #1
 8003200:	4297      	cmp	r7, r2
 8003202:	d1f5      	bne.n	80031f0 <ai_platform_get_weights_map+0x80>
 8003204:	3402      	adds	r4, #2
 8003206:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800320a:	42b3      	cmp	r3, r6
 800320c:	d1ca      	bne.n	80031a4 <ai_platform_get_weights_map+0x34>
 800320e:	2001      	movs	r0, #1
 8003210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003212:	bf00      	nop
 8003214:	a1facade 	.word	0xa1facade

08003218 <ai_platform_get_activations_map>:
 8003218:	2a00      	cmp	r2, #0
 800321a:	d038      	beq.n	800328e <ai_platform_get_activations_map+0x76>
 800321c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321e:	4604      	mov	r4, r0
 8003220:	b1a0      	cbz	r0, 800324c <ai_platform_get_activations_map+0x34>
 8003222:	460f      	mov	r7, r1
 8003224:	b191      	cbz	r1, 800324c <ai_platform_get_activations_map+0x34>
 8003226:	4b25      	ldr	r3, [pc, #148]	; (80032bc <ai_platform_get_activations_map+0xa4>)
 8003228:	6810      	ldr	r0, [r2, #0]
 800322a:	4298      	cmp	r0, r3
 800322c:	4615      	mov	r5, r2
 800322e:	d00f      	beq.n	8003250 <ai_platform_get_activations_map+0x38>
 8003230:	6a15      	ldr	r5, [r2, #32]
 8003232:	b15d      	cbz	r5, 800324c <ai_platform_get_activations_map+0x34>
 8003234:	682e      	ldr	r6, [r5, #0]
 8003236:	429e      	cmp	r6, r3
 8003238:	d02b      	beq.n	8003292 <ai_platform_get_activations_map+0x7a>
 800323a:	f1a1 0001 	sub.w	r0, r1, #1
 800323e:	6025      	str	r5, [r4, #0]
 8003240:	fab0 f080 	clz	r0, r0
 8003244:	0940      	lsrs	r0, r0, #5
 8003246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003248:	42a7      	cmp	r7, r4
 800324a:	d035      	beq.n	80032b8 <ai_platform_get_activations_map+0xa0>
 800324c:	2000      	movs	r0, #0
 800324e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003250:	f102 000c 	add.w	r0, r2, #12
 8003254:	f7ff ff6e 	bl	8003134 <ai_buffer_array_sane>
 8003258:	2800      	cmp	r0, #0
 800325a:	d0f7      	beq.n	800324c <ai_platform_get_activations_map+0x34>
 800325c:	89eb      	ldrh	r3, [r5, #14]
 800325e:	429f      	cmp	r7, r3
 8003260:	d1f4      	bne.n	800324c <ai_platform_get_activations_map+0x34>
 8003262:	f04f 0e00 	mov.w	lr, #0
 8003266:	1f23      	subs	r3, r4, #4
 8003268:	4670      	mov	r0, lr
 800326a:	692a      	ldr	r2, [r5, #16]
 800326c:	eb02 0c0e 	add.w	ip, r2, lr
 8003270:	f10e 0e1c 	add.w	lr, lr, #28
 8003274:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003278:	b124      	cbz	r4, 8003284 <ai_platform_get_activations_map+0x6c>
 800327a:	3001      	adds	r0, #1
 800327c:	4287      	cmp	r7, r0
 800327e:	f843 4f04 	str.w	r4, [r3, #4]!
 8003282:	d1f2      	bne.n	800326a <ai_platform_get_activations_map+0x52>
 8003284:	1a38      	subs	r0, r7, r0
 8003286:	fab0 f080 	clz	r0, r0
 800328a:	0940      	lsrs	r0, r0, #5
 800328c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800328e:	2000      	movs	r0, #0
 8003290:	4770      	bx	lr
 8003292:	1f23      	subs	r3, r4, #4
 8003294:	4628      	mov	r0, r5
 8003296:	2400      	movs	r4, #0
 8003298:	e000      	b.n	800329c <ai_platform_get_activations_map+0x84>
 800329a:	4614      	mov	r4, r2
 800329c:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80032a0:	42b2      	cmp	r2, r6
 80032a2:	d0d1      	beq.n	8003248 <ai_platform_get_activations_map+0x30>
 80032a4:	f843 2f04 	str.w	r2, [r3, #4]!
 80032a8:	1c62      	adds	r2, r4, #1
 80032aa:	4297      	cmp	r7, r2
 80032ac:	d1f5      	bne.n	800329a <ai_platform_get_activations_map+0x82>
 80032ae:	3402      	adds	r4, #2
 80032b0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80032b4:	42b3      	cmp	r3, r6
 80032b6:	d1c9      	bne.n	800324c <ai_platform_get_activations_map+0x34>
 80032b8:	2001      	movs	r0, #1
 80032ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032bc:	a1facade 	.word	0xa1facade

080032c0 <ai_platform_bind_network_params>:
 80032c0:	b1a0      	cbz	r0, 80032ec <ai_platform_bind_network_params+0x2c>
 80032c2:	b1b1      	cbz	r1, 80032f2 <ai_platform_bind_network_params+0x32>
 80032c4:	b1c2      	cbz	r2, 80032f8 <ai_platform_bind_network_params+0x38>
 80032c6:	b410      	push	{r4}
 80032c8:	4603      	mov	r3, r0
 80032ca:	4c0d      	ldr	r4, [pc, #52]	; (8003300 <ai_platform_bind_network_params+0x40>)
 80032cc:	f843 4b04 	str.w	r4, [r3], #4
 80032d0:	f100 0c0c 	add.w	ip, r0, #12
 80032d4:	c903      	ldmia	r1, {r0, r1}
 80032d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80032da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032de:	e88c 0003 	stmia.w	ip, {r0, r1}
 80032e2:	2301      	movs	r3, #1
 80032e4:	4618      	mov	r0, r3
 80032e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	4603      	mov	r3, r0
 80032ee:	4618      	mov	r0, r3
 80032f0:	4770      	bx	lr
 80032f2:	460b      	mov	r3, r1
 80032f4:	4618      	mov	r0, r3
 80032f6:	4770      	bx	lr
 80032f8:	4613      	mov	r3, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	a1facade 	.word	0xa1facade

08003304 <ai_platform_network_get_error>:
 8003304:	b510      	push	{r4, lr}
 8003306:	b1f0      	cbz	r0, 8003346 <ai_platform_network_get_error+0x42>
 8003308:	4b2f      	ldr	r3, [pc, #188]	; (80033c8 <ai_platform_network_get_error+0xc4>)
 800330a:	6802      	ldr	r2, [r0, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	4604      	mov	r4, r0
 8003310:	d119      	bne.n	8003346 <ai_platform_network_get_error+0x42>
 8003312:	f7ff ff29 	bl	8003168 <_ai_platform_acquire_crc>
 8003316:	4b2d      	ldr	r3, [pc, #180]	; (80033cc <ai_platform_network_get_error+0xc8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800331e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003322:	d03c      	beq.n	800339e <ai_platform_network_get_error+0x9a>
 8003324:	4a2a      	ldr	r2, [pc, #168]	; (80033d0 <ai_platform_network_get_error+0xcc>)
 8003326:	2301      	movs	r3, #1
 8003328:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800332c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1fb      	bne.n	800332c <ai_platform_network_get_error+0x28>
 8003334:	4b27      	ldr	r3, [pc, #156]	; (80033d4 <ai_platform_network_get_error+0xd0>)
 8003336:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800333a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800333e:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <ai_platform_network_get_error+0xd4>)
 8003340:	429a      	cmp	r2, r3
 8003342:	d038      	beq.n	80033b6 <ai_platform_network_get_error+0xb2>
 8003344:	e7fe      	b.n	8003344 <ai_platform_network_get_error+0x40>
 8003346:	f7ff ff0f 	bl	8003168 <_ai_platform_acquire_crc>
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <ai_platform_network_get_error+0xc8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003356:	d010      	beq.n	800337a <ai_platform_network_get_error+0x76>
 8003358:	4a1d      	ldr	r2, [pc, #116]	; (80033d0 <ai_platform_network_get_error+0xcc>)
 800335a:	2301      	movs	r3, #1
 800335c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003360:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1fb      	bne.n	8003360 <ai_platform_network_get_error+0x5c>
 8003368:	4b1a      	ldr	r3, [pc, #104]	; (80033d4 <ai_platform_network_get_error+0xd0>)
 800336a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800336e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003372:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <ai_platform_network_get_error+0xd4>)
 8003374:	429a      	cmp	r2, r3
 8003376:	d00d      	beq.n	8003394 <ai_platform_network_get_error+0x90>
 8003378:	e7fe      	b.n	8003378 <ai_platform_network_get_error+0x74>
 800337a:	4a18      	ldr	r2, [pc, #96]	; (80033dc <ai_platform_network_get_error+0xd8>)
 800337c:	2301      	movs	r3, #1
 800337e:	6093      	str	r3, [r2, #8]
 8003380:	6893      	ldr	r3, [r2, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1fc      	bne.n	8003380 <ai_platform_network_get_error+0x7c>
 8003386:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <ai_platform_network_get_error+0xd0>)
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	6812      	ldr	r2, [r2, #0]
 800338c:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <ai_platform_network_get_error+0xd4>)
 800338e:	429a      	cmp	r2, r3
 8003390:	d000      	beq.n	8003394 <ai_platform_network_get_error+0x90>
 8003392:	e7fe      	b.n	8003392 <ai_platform_network_get_error+0x8e>
 8003394:	f7ff feea 	bl	800316c <_ai_platform_release_crc>
 8003398:	f241 0010 	movw	r0, #4112	; 0x1010
 800339c:	bd10      	pop	{r4, pc}
 800339e:	4a0f      	ldr	r2, [pc, #60]	; (80033dc <ai_platform_network_get_error+0xd8>)
 80033a0:	2301      	movs	r3, #1
 80033a2:	6093      	str	r3, [r2, #8]
 80033a4:	6893      	ldr	r3, [r2, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1fc      	bne.n	80033a4 <ai_platform_network_get_error+0xa0>
 80033aa:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <ai_platform_network_get_error+0xd0>)
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	6812      	ldr	r2, [r2, #0]
 80033b0:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <ai_platform_network_get_error+0xd4>)
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d107      	bne.n	80033c6 <ai_platform_network_get_error+0xc2>
 80033b6:	f7ff fed9 	bl	800316c <_ai_platform_release_crc>
 80033ba:	f104 0010 	add.w	r0, r4, #16
 80033be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033c2:	f000 be8d 	b.w	80040e0 <core_get_error>
 80033c6:	e7fe      	b.n	80033c6 <ai_platform_network_get_error+0xc2>
 80033c8:	a1c00100 	.word	0xa1c00100
 80033cc:	e0042000 	.word	0xe0042000
 80033d0:	58024000 	.word	0x58024000
 80033d4:	f407a5c2 	.word	0xf407a5c2
 80033d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80033dc:	40023000 	.word	0x40023000

080033e0 <ai_platform_network_set_error>:
 80033e0:	b110      	cbz	r0, 80033e8 <ai_platform_network_set_error+0x8>
 80033e2:	3010      	adds	r0, #16
 80033e4:	f000 be82 	b.w	80040ec <core_set_error>
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop

080033ec <ai_platform_inputs_get>:
 80033ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f0:	b085      	sub	sp, #20
 80033f2:	9102      	str	r1, [sp, #8]
 80033f4:	b1f0      	cbz	r0, 8003434 <ai_platform_inputs_get+0x48>
 80033f6:	4b62      	ldr	r3, [pc, #392]	; (8003580 <ai_platform_inputs_get+0x194>)
 80033f8:	6802      	ldr	r2, [r0, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	4607      	mov	r7, r0
 80033fe:	d119      	bne.n	8003434 <ai_platform_inputs_get+0x48>
 8003400:	f7ff feb2 	bl	8003168 <_ai_platform_acquire_crc>
 8003404:	4b5f      	ldr	r3, [pc, #380]	; (8003584 <ai_platform_inputs_get+0x198>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800340c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003410:	d03d      	beq.n	800348e <ai_platform_inputs_get+0xa2>
 8003412:	4a5d      	ldr	r2, [pc, #372]	; (8003588 <ai_platform_inputs_get+0x19c>)
 8003414:	2301      	movs	r3, #1
 8003416:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800341a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1fb      	bne.n	800341a <ai_platform_inputs_get+0x2e>
 8003422:	4b5a      	ldr	r3, [pc, #360]	; (800358c <ai_platform_inputs_get+0x1a0>)
 8003424:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003428:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800342c:	4b58      	ldr	r3, [pc, #352]	; (8003590 <ai_platform_inputs_get+0x1a4>)
 800342e:	429a      	cmp	r2, r3
 8003430:	d039      	beq.n	80034a6 <ai_platform_inputs_get+0xba>
 8003432:	e7fe      	b.n	8003432 <ai_platform_inputs_get+0x46>
 8003434:	f7ff fe98 	bl	8003168 <_ai_platform_acquire_crc>
 8003438:	4b52      	ldr	r3, [pc, #328]	; (8003584 <ai_platform_inputs_get+0x198>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003444:	d010      	beq.n	8003468 <ai_platform_inputs_get+0x7c>
 8003446:	4a50      	ldr	r2, [pc, #320]	; (8003588 <ai_platform_inputs_get+0x19c>)
 8003448:	2301      	movs	r3, #1
 800344a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800344e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1fb      	bne.n	800344e <ai_platform_inputs_get+0x62>
 8003456:	4b4d      	ldr	r3, [pc, #308]	; (800358c <ai_platform_inputs_get+0x1a0>)
 8003458:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800345c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003460:	4b4b      	ldr	r3, [pc, #300]	; (8003590 <ai_platform_inputs_get+0x1a4>)
 8003462:	429a      	cmp	r2, r3
 8003464:	d00d      	beq.n	8003482 <ai_platform_inputs_get+0x96>
 8003466:	e7fe      	b.n	8003466 <ai_platform_inputs_get+0x7a>
 8003468:	4a4a      	ldr	r2, [pc, #296]	; (8003594 <ai_platform_inputs_get+0x1a8>)
 800346a:	2301      	movs	r3, #1
 800346c:	6093      	str	r3, [r2, #8]
 800346e:	6893      	ldr	r3, [r2, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1fc      	bne.n	800346e <ai_platform_inputs_get+0x82>
 8003474:	4b45      	ldr	r3, [pc, #276]	; (800358c <ai_platform_inputs_get+0x1a0>)
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	4b45      	ldr	r3, [pc, #276]	; (8003590 <ai_platform_inputs_get+0x1a4>)
 800347c:	429a      	cmp	r2, r3
 800347e:	d000      	beq.n	8003482 <ai_platform_inputs_get+0x96>
 8003480:	e7fe      	b.n	8003480 <ai_platform_inputs_get+0x94>
 8003482:	f7ff fe73 	bl	800316c <_ai_platform_release_crc>
 8003486:	2000      	movs	r0, #0
 8003488:	b005      	add	sp, #20
 800348a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800348e:	4a41      	ldr	r2, [pc, #260]	; (8003594 <ai_platform_inputs_get+0x1a8>)
 8003490:	2301      	movs	r3, #1
 8003492:	6093      	str	r3, [r2, #8]
 8003494:	6893      	ldr	r3, [r2, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1fc      	bne.n	8003494 <ai_platform_inputs_get+0xa8>
 800349a:	4b3c      	ldr	r3, [pc, #240]	; (800358c <ai_platform_inputs_get+0x1a0>)
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <ai_platform_inputs_get+0x1a4>)
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d155      	bne.n	8003552 <ai_platform_inputs_get+0x166>
 80034a6:	f7ff fe61 	bl	800316c <_ai_platform_release_crc>
 80034aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d051      	beq.n	8003554 <ai_platform_inputs_get+0x168>
 80034b0:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80034b4:	f1ba 0f00 	cmp.w	sl, #0
 80034b8:	d04c      	beq.n	8003554 <ai_platform_inputs_get+0x168>
 80034ba:	f04f 0b00 	mov.w	fp, #0
 80034be:	465d      	mov	r5, fp
 80034c0:	9703      	str	r7, [sp, #12]
 80034c2:	e016      	b.n	80034f2 <ai_platform_inputs_get+0x106>
 80034c4:	9901      	ldr	r1, [sp, #4]
 80034c6:	2301      	movs	r3, #1
 80034c8:	507b      	str	r3, [r7, r1]
 80034ca:	69b1      	ldr	r1, [r6, #24]
 80034cc:	6849      	ldr	r1, [r1, #4]
 80034ce:	6121      	str	r1, [r4, #16]
 80034d0:	f04f 0301 	mov.w	r3, #1
 80034d4:	7523      	strb	r3, [r4, #20]
 80034d6:	e9c4 c200 	strd	ip, r2, [r4]
 80034da:	6962      	ldr	r2, [r4, #20]
 80034dc:	60a0      	str	r0, [r4, #8]
 80034de:	2300      	movs	r3, #0
 80034e0:	f369 221f 	bfi	r2, r9, #8, #24
 80034e4:	f8c4 8018 	str.w	r8, [r4, #24]
 80034e8:	60e3      	str	r3, [r4, #12]
 80034ea:	3501      	adds	r5, #1
 80034ec:	f10b 0b1c 	add.w	fp, fp, #28
 80034f0:	6162      	str	r2, [r4, #20]
 80034f2:	f8ba 3000 	ldrh.w	r3, [sl]
 80034f6:	42ab      	cmp	r3, r5
 80034f8:	b2aa      	uxth	r2, r5
 80034fa:	d93a      	bls.n	8003572 <ai_platform_inputs_get+0x186>
 80034fc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003500:	00e9      	lsls	r1, r5, #3
 8003502:	9101      	str	r1, [sp, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d034      	beq.n	8003572 <ai_platform_inputs_get+0x186>
 8003508:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800350c:	2e00      	cmp	r6, #0
 800350e:	d030      	beq.n	8003572 <ai_platform_inputs_get+0x186>
 8003510:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003514:	69b2      	ldr	r2, [r6, #24]
 8003516:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800351a:	6810      	ldr	r0, [r2, #0]
 800351c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8003520:	68b3      	ldr	r3, [r6, #8]
 8003522:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8003526:	f002 ff05 	bl	8006334 <ai_array_to_buffer_fmt>
 800352a:	69b1      	ldr	r1, [r6, #24]
 800352c:	4684      	mov	ip, r0
 800352e:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8003532:	688a      	ldr	r2, [r1, #8]
 8003534:	445c      	add	r4, fp
 8003536:	2800      	cmp	r0, #0
 8003538:	d0c8      	beq.n	80034cc <ai_platform_inputs_get+0xe0>
 800353a:	2100      	movs	r1, #0
 800353c:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8003540:	6831      	ldr	r1, [r6, #0]
 8003542:	6041      	str	r1, [r0, #4]
 8003544:	b111      	cbz	r1, 800354c <ai_platform_inputs_get+0x160>
 8003546:	8849      	ldrh	r1, [r1, #2]
 8003548:	2900      	cmp	r1, #0
 800354a:	d1bb      	bne.n	80034c4 <ai_platform_inputs_get+0xd8>
 800354c:	69b1      	ldr	r1, [r6, #24]
 800354e:	2000      	movs	r0, #0
 8003550:	e7bc      	b.n	80034cc <ai_platform_inputs_get+0xe0>
 8003552:	e7fe      	b.n	8003552 <ai_platform_inputs_get+0x166>
 8003554:	2218      	movs	r2, #24
 8003556:	2111      	movs	r1, #17
 8003558:	f107 0010 	add.w	r0, r7, #16
 800355c:	f000 fdc6 	bl	80040ec <core_set_error>
 8003560:	2200      	movs	r2, #0
 8003562:	4610      	mov	r0, r2
 8003564:	9b02      	ldr	r3, [sp, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d08e      	beq.n	8003488 <ai_platform_inputs_get+0x9c>
 800356a:	801a      	strh	r2, [r3, #0]
 800356c:	b005      	add	sp, #20
 800356e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003572:	9f03      	ldr	r7, [sp, #12]
 8003574:	2a00      	cmp	r2, #0
 8003576:	d0ed      	beq.n	8003554 <ai_platform_inputs_get+0x168>
 8003578:	f8da 3008 	ldr.w	r3, [sl, #8]
 800357c:	6858      	ldr	r0, [r3, #4]
 800357e:	e7f1      	b.n	8003564 <ai_platform_inputs_get+0x178>
 8003580:	a1c00100 	.word	0xa1c00100
 8003584:	e0042000 	.word	0xe0042000
 8003588:	58024000 	.word	0x58024000
 800358c:	f407a5c2 	.word	0xf407a5c2
 8003590:	b5e8b5cd 	.word	0xb5e8b5cd
 8003594:	40023000 	.word	0x40023000

08003598 <ai_platform_outputs_get>:
 8003598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800359c:	b085      	sub	sp, #20
 800359e:	9102      	str	r1, [sp, #8]
 80035a0:	b1f0      	cbz	r0, 80035e0 <ai_platform_outputs_get+0x48>
 80035a2:	4b5f      	ldr	r3, [pc, #380]	; (8003720 <ai_platform_outputs_get+0x188>)
 80035a4:	6802      	ldr	r2, [r0, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	4607      	mov	r7, r0
 80035aa:	d119      	bne.n	80035e0 <ai_platform_outputs_get+0x48>
 80035ac:	f7ff fddc 	bl	8003168 <_ai_platform_acquire_crc>
 80035b0:	4b5c      	ldr	r3, [pc, #368]	; (8003724 <ai_platform_outputs_get+0x18c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035bc:	d03d      	beq.n	800363a <ai_platform_outputs_get+0xa2>
 80035be:	4a5a      	ldr	r2, [pc, #360]	; (8003728 <ai_platform_outputs_get+0x190>)
 80035c0:	2301      	movs	r3, #1
 80035c2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80035c6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1fb      	bne.n	80035c6 <ai_platform_outputs_get+0x2e>
 80035ce:	4b57      	ldr	r3, [pc, #348]	; (800372c <ai_platform_outputs_get+0x194>)
 80035d0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80035d4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80035d8:	4b55      	ldr	r3, [pc, #340]	; (8003730 <ai_platform_outputs_get+0x198>)
 80035da:	429a      	cmp	r2, r3
 80035dc:	d039      	beq.n	8003652 <ai_platform_outputs_get+0xba>
 80035de:	e7fe      	b.n	80035de <ai_platform_outputs_get+0x46>
 80035e0:	f7ff fdc2 	bl	8003168 <_ai_platform_acquire_crc>
 80035e4:	4b4f      	ldr	r3, [pc, #316]	; (8003724 <ai_platform_outputs_get+0x18c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f0:	d010      	beq.n	8003614 <ai_platform_outputs_get+0x7c>
 80035f2:	4a4d      	ldr	r2, [pc, #308]	; (8003728 <ai_platform_outputs_get+0x190>)
 80035f4:	2301      	movs	r3, #1
 80035f6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80035fa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1fb      	bne.n	80035fa <ai_platform_outputs_get+0x62>
 8003602:	4b4a      	ldr	r3, [pc, #296]	; (800372c <ai_platform_outputs_get+0x194>)
 8003604:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003608:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800360c:	4b48      	ldr	r3, [pc, #288]	; (8003730 <ai_platform_outputs_get+0x198>)
 800360e:	429a      	cmp	r2, r3
 8003610:	d00d      	beq.n	800362e <ai_platform_outputs_get+0x96>
 8003612:	e7fe      	b.n	8003612 <ai_platform_outputs_get+0x7a>
 8003614:	4a47      	ldr	r2, [pc, #284]	; (8003734 <ai_platform_outputs_get+0x19c>)
 8003616:	2301      	movs	r3, #1
 8003618:	6093      	str	r3, [r2, #8]
 800361a:	6893      	ldr	r3, [r2, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1fc      	bne.n	800361a <ai_platform_outputs_get+0x82>
 8003620:	4b42      	ldr	r3, [pc, #264]	; (800372c <ai_platform_outputs_get+0x194>)
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	6812      	ldr	r2, [r2, #0]
 8003626:	4b42      	ldr	r3, [pc, #264]	; (8003730 <ai_platform_outputs_get+0x198>)
 8003628:	429a      	cmp	r2, r3
 800362a:	d000      	beq.n	800362e <ai_platform_outputs_get+0x96>
 800362c:	e7fe      	b.n	800362c <ai_platform_outputs_get+0x94>
 800362e:	f7ff fd9d 	bl	800316c <_ai_platform_release_crc>
 8003632:	2000      	movs	r0, #0
 8003634:	b005      	add	sp, #20
 8003636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800363a:	4a3e      	ldr	r2, [pc, #248]	; (8003734 <ai_platform_outputs_get+0x19c>)
 800363c:	2301      	movs	r3, #1
 800363e:	6093      	str	r3, [r2, #8]
 8003640:	6893      	ldr	r3, [r2, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1fc      	bne.n	8003640 <ai_platform_outputs_get+0xa8>
 8003646:	4b39      	ldr	r3, [pc, #228]	; (800372c <ai_platform_outputs_get+0x194>)
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	4b38      	ldr	r3, [pc, #224]	; (8003730 <ai_platform_outputs_get+0x198>)
 800364e:	429a      	cmp	r2, r3
 8003650:	d150      	bne.n	80036f4 <ai_platform_outputs_get+0x15c>
 8003652:	f7ff fd8b 	bl	800316c <_ai_platform_release_crc>
 8003656:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003658:	2b01      	cmp	r3, #1
 800365a:	d958      	bls.n	800370e <ai_platform_outputs_get+0x176>
 800365c:	f04f 0b00 	mov.w	fp, #0
 8003660:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8003664:	9703      	str	r7, [sp, #12]
 8003666:	465d      	mov	r5, fp
 8003668:	e016      	b.n	8003698 <ai_platform_outputs_get+0x100>
 800366a:	9901      	ldr	r1, [sp, #4]
 800366c:	2301      	movs	r3, #1
 800366e:	507b      	str	r3, [r7, r1]
 8003670:	69b1      	ldr	r1, [r6, #24]
 8003672:	6849      	ldr	r1, [r1, #4]
 8003674:	6121      	str	r1, [r4, #16]
 8003676:	f04f 0301 	mov.w	r3, #1
 800367a:	7523      	strb	r3, [r4, #20]
 800367c:	e9c4 c200 	strd	ip, r2, [r4]
 8003680:	6962      	ldr	r2, [r4, #20]
 8003682:	60a0      	str	r0, [r4, #8]
 8003684:	2300      	movs	r3, #0
 8003686:	f369 221f 	bfi	r2, r9, #8, #24
 800368a:	f8c4 8018 	str.w	r8, [r4, #24]
 800368e:	60e3      	str	r3, [r4, #12]
 8003690:	3501      	adds	r5, #1
 8003692:	f10b 0b1c 	add.w	fp, fp, #28
 8003696:	6162      	str	r2, [r4, #20]
 8003698:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800369c:	42ab      	cmp	r3, r5
 800369e:	b2aa      	uxth	r2, r5
 80036a0:	d929      	bls.n	80036f6 <ai_platform_outputs_get+0x15e>
 80036a2:	f8da 3010 	ldr.w	r3, [sl, #16]
 80036a6:	00e9      	lsls	r1, r5, #3
 80036a8:	9101      	str	r1, [sp, #4]
 80036aa:	b323      	cbz	r3, 80036f6 <ai_platform_outputs_get+0x15e>
 80036ac:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80036b0:	b30e      	cbz	r6, 80036f6 <ai_platform_outputs_get+0x15e>
 80036b2:	f8da 3014 	ldr.w	r3, [sl, #20]
 80036b6:	69b2      	ldr	r2, [r6, #24]
 80036b8:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80036bc:	6810      	ldr	r0, [r2, #0]
 80036be:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80036c2:	68b3      	ldr	r3, [r6, #8]
 80036c4:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80036c8:	f002 fe34 	bl	8006334 <ai_array_to_buffer_fmt>
 80036cc:	69b1      	ldr	r1, [r6, #24]
 80036ce:	4684      	mov	ip, r0
 80036d0:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80036d4:	688a      	ldr	r2, [r1, #8]
 80036d6:	445c      	add	r4, fp
 80036d8:	2800      	cmp	r0, #0
 80036da:	d0ca      	beq.n	8003672 <ai_platform_outputs_get+0xda>
 80036dc:	2100      	movs	r1, #0
 80036de:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80036e2:	6831      	ldr	r1, [r6, #0]
 80036e4:	6041      	str	r1, [r0, #4]
 80036e6:	b111      	cbz	r1, 80036ee <ai_platform_outputs_get+0x156>
 80036e8:	8849      	ldrh	r1, [r1, #2]
 80036ea:	2900      	cmp	r1, #0
 80036ec:	d1bd      	bne.n	800366a <ai_platform_outputs_get+0xd2>
 80036ee:	69b1      	ldr	r1, [r6, #24]
 80036f0:	2000      	movs	r0, #0
 80036f2:	e7be      	b.n	8003672 <ai_platform_outputs_get+0xda>
 80036f4:	e7fe      	b.n	80036f4 <ai_platform_outputs_get+0x15c>
 80036f6:	9f03      	ldr	r7, [sp, #12]
 80036f8:	b14a      	cbz	r2, 800370e <ai_platform_outputs_get+0x176>
 80036fa:	f8da 3014 	ldr.w	r3, [sl, #20]
 80036fe:	6858      	ldr	r0, [r3, #4]
 8003700:	9b02      	ldr	r3, [sp, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d096      	beq.n	8003634 <ai_platform_outputs_get+0x9c>
 8003706:	801a      	strh	r2, [r3, #0]
 8003708:	b005      	add	sp, #20
 800370a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800370e:	2218      	movs	r2, #24
 8003710:	2111      	movs	r1, #17
 8003712:	f107 0010 	add.w	r0, r7, #16
 8003716:	f000 fce9 	bl	80040ec <core_set_error>
 800371a:	2200      	movs	r2, #0
 800371c:	4610      	mov	r0, r2
 800371e:	e7ef      	b.n	8003700 <ai_platform_outputs_get+0x168>
 8003720:	a1c00100 	.word	0xa1c00100
 8003724:	e0042000 	.word	0xe0042000
 8003728:	58024000 	.word	0x58024000
 800372c:	f407a5c2 	.word	0xf407a5c2
 8003730:	b5e8b5cd 	.word	0xb5e8b5cd
 8003734:	40023000 	.word	0x40023000

08003738 <ai_platform_network_create>:
 8003738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800373c:	b083      	sub	sp, #12
 800373e:	4606      	mov	r6, r0
 8003740:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8003744:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8003748:	4615      	mov	r5, r2
 800374a:	461f      	mov	r7, r3
 800374c:	f7ff fd0c 	bl	8003168 <_ai_platform_acquire_crc>
 8003750:	b188      	cbz	r0, 8003776 <ai_platform_network_create+0x3e>
 8003752:	4a5d      	ldr	r2, [pc, #372]	; (80038c8 <ai_platform_network_create+0x190>)
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800375a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800375e:	4603      	mov	r3, r0
 8003760:	d00e      	beq.n	8003780 <ai_platform_network_create+0x48>
 8003762:	4a5a      	ldr	r2, [pc, #360]	; (80038cc <ai_platform_network_create+0x194>)
 8003764:	2118      	movs	r1, #24
 8003766:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800376a:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 800376e:	2918      	cmp	r1, #24
 8003770:	d018      	beq.n	80037a4 <ai_platform_network_create+0x6c>
 8003772:	f7ff fcfb 	bl	800316c <_ai_platform_release_crc>
 8003776:	f244 1033 	movw	r0, #16691	; 0x4133
 800377a:	b003      	add	sp, #12
 800377c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003780:	4a53      	ldr	r2, [pc, #332]	; (80038d0 <ai_platform_network_create+0x198>)
 8003782:	2101      	movs	r1, #1
 8003784:	6091      	str	r1, [r2, #8]
 8003786:	2114      	movs	r1, #20
 8003788:	e001      	b.n	800378e <ai_platform_network_create+0x56>
 800378a:	3901      	subs	r1, #1
 800378c:	d002      	beq.n	8003794 <ai_platform_network_create+0x5c>
 800378e:	6894      	ldr	r4, [r2, #8]
 8003790:	2c00      	cmp	r4, #0
 8003792:	d1fa      	bne.n	800378a <ai_platform_network_create+0x52>
 8003794:	4a4e      	ldr	r2, [pc, #312]	; (80038d0 <ai_platform_network_create+0x198>)
 8003796:	6891      	ldr	r1, [r2, #8]
 8003798:	b911      	cbnz	r1, 80037a0 <ai_platform_network_create+0x68>
 800379a:	6812      	ldr	r2, [r2, #0]
 800379c:	3201      	adds	r2, #1
 800379e:	d008      	beq.n	80037b2 <ai_platform_network_create+0x7a>
 80037a0:	4618      	mov	r0, r3
 80037a2:	e7e6      	b.n	8003772 <ai_platform_network_create+0x3a>
 80037a4:	2101      	movs	r1, #1
 80037a6:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80037aa:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80037ae:	2900      	cmp	r1, #0
 80037b0:	d1fb      	bne.n	80037aa <ai_platform_network_create+0x72>
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fcda 	bl	800316c <_ai_platform_release_crc>
 80037b8:	f7ff fcd6 	bl	8003168 <_ai_platform_acquire_crc>
 80037bc:	4b42      	ldr	r3, [pc, #264]	; (80038c8 <ai_platform_network_create+0x190>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c8:	d010      	beq.n	80037ec <ai_platform_network_create+0xb4>
 80037ca:	4b40      	ldr	r3, [pc, #256]	; (80038cc <ai_platform_network_create+0x194>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80037d2:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 80037d6:	2900      	cmp	r1, #0
 80037d8:	d1fb      	bne.n	80037d2 <ai_platform_network_create+0x9a>
 80037da:	4a3e      	ldr	r2, [pc, #248]	; (80038d4 <ai_platform_network_create+0x19c>)
 80037dc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80037e0:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80037e4:	4b3c      	ldr	r3, [pc, #240]	; (80038d8 <ai_platform_network_create+0x1a0>)
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d00c      	beq.n	8003804 <ai_platform_network_create+0xcc>
 80037ea:	e7fe      	b.n	80037ea <ai_platform_network_create+0xb2>
 80037ec:	4a38      	ldr	r2, [pc, #224]	; (80038d0 <ai_platform_network_create+0x198>)
 80037ee:	2301      	movs	r3, #1
 80037f0:	6093      	str	r3, [r2, #8]
 80037f2:	6893      	ldr	r3, [r2, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1fc      	bne.n	80037f2 <ai_platform_network_create+0xba>
 80037f8:	4b36      	ldr	r3, [pc, #216]	; (80038d4 <ai_platform_network_create+0x19c>)
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	6812      	ldr	r2, [r2, #0]
 80037fe:	4b36      	ldr	r3, [pc, #216]	; (80038d8 <ai_platform_network_create+0x1a0>)
 8003800:	429a      	cmp	r2, r3
 8003802:	d122      	bne.n	800384a <ai_platform_network_create+0x112>
 8003804:	f7ff fcb2 	bl	800316c <_ai_platform_release_crc>
 8003808:	b38e      	cbz	r6, 800386e <ai_platform_network_create+0x136>
 800380a:	4b34      	ldr	r3, [pc, #208]	; (80038dc <ai_platform_network_create+0x1a4>)
 800380c:	602b      	str	r3, [r5, #0]
 800380e:	6035      	str	r5, [r6, #0]
 8003810:	f000 fc64 	bl	80040dc <core_init>
 8003814:	b1d0      	cbz	r0, 800384c <ai_platform_network_create+0x114>
 8003816:	f7ff fca7 	bl	8003168 <_ai_platform_acquire_crc>
 800381a:	4b2b      	ldr	r3, [pc, #172]	; (80038c8 <ai_platform_network_create+0x190>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003826:	d025      	beq.n	8003874 <ai_platform_network_create+0x13c>
 8003828:	4a28      	ldr	r2, [pc, #160]	; (80038cc <ai_platform_network_create+0x194>)
 800382a:	2301      	movs	r3, #1
 800382c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003830:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1fb      	bne.n	8003830 <ai_platform_network_create+0xf8>
 8003838:	4b26      	ldr	r3, [pc, #152]	; (80038d4 <ai_platform_network_create+0x19c>)
 800383a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800383e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003842:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <ai_platform_network_create+0x1a0>)
 8003844:	429a      	cmp	r2, r3
 8003846:	d022      	beq.n	800388e <ai_platform_network_create+0x156>
 8003848:	e7fe      	b.n	8003848 <ai_platform_network_create+0x110>
 800384a:	e7fe      	b.n	800384a <ai_platform_network_create+0x112>
 800384c:	2430      	movs	r4, #48	; 0x30
 800384e:	2300      	movs	r3, #0
 8003850:	6033      	str	r3, [r6, #0]
 8003852:	2610      	movs	r6, #16
 8003854:	464a      	mov	r2, r9
 8003856:	4641      	mov	r1, r8
 8003858:	4638      	mov	r0, r7
 800385a:	f002 fd4d 	bl	80062f8 <ai_version_get>
 800385e:	4603      	mov	r3, r0
 8003860:	2000      	movs	r0, #0
 8003862:	f364 0007 	bfi	r0, r4, #0, #8
 8003866:	64ab      	str	r3, [r5, #72]	; 0x48
 8003868:	f366 201f 	bfi	r0, r6, #8, #24
 800386c:	e785      	b.n	800377a <ai_platform_network_create+0x42>
 800386e:	f241 0010 	movw	r0, #4112	; 0x1010
 8003872:	e782      	b.n	800377a <ai_platform_network_create+0x42>
 8003874:	4a16      	ldr	r2, [pc, #88]	; (80038d0 <ai_platform_network_create+0x198>)
 8003876:	2301      	movs	r3, #1
 8003878:	6093      	str	r3, [r2, #8]
 800387a:	6893      	ldr	r3, [r2, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1fc      	bne.n	800387a <ai_platform_network_create+0x142>
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <ai_platform_network_create+0x19c>)
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	6812      	ldr	r2, [r2, #0]
 8003886:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <ai_platform_network_create+0x1a0>)
 8003888:	429a      	cmp	r2, r3
 800388a:	d000      	beq.n	800388e <ai_platform_network_create+0x156>
 800388c:	e7fe      	b.n	800388c <ai_platform_network_create+0x154>
 800388e:	f7ff fc6d 	bl	800316c <_ai_platform_release_crc>
 8003892:	2200      	movs	r2, #0
 8003894:	4641      	mov	r1, r8
 8003896:	4638      	mov	r0, r7
 8003898:	f002 fd2e 	bl	80062f8 <ai_version_get>
 800389c:	2200      	movs	r2, #0
 800389e:	4604      	mov	r4, r0
 80038a0:	2105      	movs	r1, #5
 80038a2:	2001      	movs	r0, #1
 80038a4:	f002 fd28 	bl	80062f8 <ai_version_get>
 80038a8:	4284      	cmp	r4, r0
 80038aa:	d001      	beq.n	80038b0 <ai_platform_network_create+0x178>
 80038ac:	2401      	movs	r4, #1
 80038ae:	e7ce      	b.n	800384e <ai_platform_network_create+0x116>
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <ai_platform_network_create+0x1a8>)
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	a801      	add	r0, sp, #4
 80038b6:	f002 fb65 	bl	8005f84 <ai_check_custom_types>
 80038ba:	b110      	cbz	r0, 80038c2 <ai_platform_network_create+0x18a>
 80038bc:	2600      	movs	r6, #0
 80038be:	4634      	mov	r4, r6
 80038c0:	e7c8      	b.n	8003854 <ai_platform_network_create+0x11c>
 80038c2:	2402      	movs	r4, #2
 80038c4:	e7c3      	b.n	800384e <ai_platform_network_create+0x116>
 80038c6:	bf00      	nop
 80038c8:	e0042000 	.word	0xe0042000
 80038cc:	58024000 	.word	0x58024000
 80038d0:	40023000 	.word	0x40023000
 80038d4:	f407a5c2 	.word	0xf407a5c2
 80038d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80038dc:	a1c00100 	.word	0xa1c00100
 80038e0:	84048403 	.word	0x84048403

080038e4 <ai_platform_network_init>:
 80038e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038e8:	b1f8      	cbz	r0, 800392a <ai_platform_network_init+0x46>
 80038ea:	4b6e      	ldr	r3, [pc, #440]	; (8003aa4 <ai_platform_network_init+0x1c0>)
 80038ec:	6802      	ldr	r2, [r0, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	4604      	mov	r4, r0
 80038f2:	d11a      	bne.n	800392a <ai_platform_network_init+0x46>
 80038f4:	460e      	mov	r6, r1
 80038f6:	f7ff fc37 	bl	8003168 <_ai_platform_acquire_crc>
 80038fa:	4b6b      	ldr	r3, [pc, #428]	; (8003aa8 <ai_platform_network_init+0x1c4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003906:	d03d      	beq.n	8003984 <ai_platform_network_init+0xa0>
 8003908:	4a68      	ldr	r2, [pc, #416]	; (8003aac <ai_platform_network_init+0x1c8>)
 800390a:	2301      	movs	r3, #1
 800390c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003910:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1fb      	bne.n	8003910 <ai_platform_network_init+0x2c>
 8003918:	4b65      	ldr	r3, [pc, #404]	; (8003ab0 <ai_platform_network_init+0x1cc>)
 800391a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800391e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003922:	4b64      	ldr	r3, [pc, #400]	; (8003ab4 <ai_platform_network_init+0x1d0>)
 8003924:	429a      	cmp	r2, r3
 8003926:	d039      	beq.n	800399c <ai_platform_network_init+0xb8>
 8003928:	e7fe      	b.n	8003928 <ai_platform_network_init+0x44>
 800392a:	f7ff fc1d 	bl	8003168 <_ai_platform_acquire_crc>
 800392e:	4b5e      	ldr	r3, [pc, #376]	; (8003aa8 <ai_platform_network_init+0x1c4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393a:	d010      	beq.n	800395e <ai_platform_network_init+0x7a>
 800393c:	4a5b      	ldr	r2, [pc, #364]	; (8003aac <ai_platform_network_init+0x1c8>)
 800393e:	2301      	movs	r3, #1
 8003940:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003944:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1fb      	bne.n	8003944 <ai_platform_network_init+0x60>
 800394c:	4b58      	ldr	r3, [pc, #352]	; (8003ab0 <ai_platform_network_init+0x1cc>)
 800394e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003952:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003956:	4b57      	ldr	r3, [pc, #348]	; (8003ab4 <ai_platform_network_init+0x1d0>)
 8003958:	429a      	cmp	r2, r3
 800395a:	d00d      	beq.n	8003978 <ai_platform_network_init+0x94>
 800395c:	e7fe      	b.n	800395c <ai_platform_network_init+0x78>
 800395e:	4a56      	ldr	r2, [pc, #344]	; (8003ab8 <ai_platform_network_init+0x1d4>)
 8003960:	2301      	movs	r3, #1
 8003962:	6093      	str	r3, [r2, #8]
 8003964:	6893      	ldr	r3, [r2, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1fc      	bne.n	8003964 <ai_platform_network_init+0x80>
 800396a:	4b51      	ldr	r3, [pc, #324]	; (8003ab0 <ai_platform_network_init+0x1cc>)
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	4b50      	ldr	r3, [pc, #320]	; (8003ab4 <ai_platform_network_init+0x1d0>)
 8003972:	429a      	cmp	r2, r3
 8003974:	d000      	beq.n	8003978 <ai_platform_network_init+0x94>
 8003976:	e7fe      	b.n	8003976 <ai_platform_network_init+0x92>
 8003978:	f7ff fbf8 	bl	800316c <_ai_platform_release_crc>
 800397c:	2600      	movs	r6, #0
 800397e:	4630      	mov	r0, r6
 8003980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003984:	4a4c      	ldr	r2, [pc, #304]	; (8003ab8 <ai_platform_network_init+0x1d4>)
 8003986:	2301      	movs	r3, #1
 8003988:	6093      	str	r3, [r2, #8]
 800398a:	6893      	ldr	r3, [r2, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1fc      	bne.n	800398a <ai_platform_network_init+0xa6>
 8003990:	4b47      	ldr	r3, [pc, #284]	; (8003ab0 <ai_platform_network_init+0x1cc>)
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	4b47      	ldr	r3, [pc, #284]	; (8003ab4 <ai_platform_network_init+0x1d0>)
 8003998:	429a      	cmp	r2, r3
 800399a:	d11c      	bne.n	80039d6 <ai_platform_network_init+0xf2>
 800399c:	f7ff fbe6 	bl	800316c <_ai_platform_release_crc>
 80039a0:	2e00      	cmp	r6, #0
 80039a2:	d06f      	beq.n	8003a84 <ai_platform_network_init+0x1a0>
 80039a4:	4b45      	ldr	r3, [pc, #276]	; (8003abc <ai_platform_network_init+0x1d8>)
 80039a6:	6832      	ldr	r2, [r6, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d115      	bne.n	80039d8 <ai_platform_network_init+0xf4>
 80039ac:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80039b0:	6933      	ldr	r3, [r6, #16]
 80039b2:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 80039b6:	89f7      	ldrh	r7, [r6, #14]
 80039b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80039ba:	e9c4 2107 	strd	r2, r1, [r4, #28]
 80039be:	2303      	movs	r3, #3
 80039c0:	84e7      	strh	r7, [r4, #38]	; 0x26
 80039c2:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 80039c6:	60e3      	str	r3, [r4, #12]
 80039c8:	4620      	mov	r0, r4
 80039ca:	4626      	mov	r6, r4
 80039cc:	f002 fb04 	bl	8005fd8 <ai_layers_init_all>
 80039d0:	4630      	mov	r0, r6
 80039d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039d6:	e7fe      	b.n	80039d6 <ai_platform_network_init+0xf2>
 80039d8:	2101      	movs	r1, #1
 80039da:	4630      	mov	r0, r6
 80039dc:	4635      	mov	r5, r6
 80039de:	6876      	ldr	r6, [r6, #4]
 80039e0:	f7ff fb74 	bl	80030cc <ai_buffer_get_size>
 80039e4:	f105 081c 	add.w	r8, r5, #28
 80039e8:	4681      	mov	r9, r0
 80039ea:	2101      	movs	r1, #1
 80039ec:	4640      	mov	r0, r8
 80039ee:	6a2f      	ldr	r7, [r5, #32]
 80039f0:	f7ff fb6c 	bl	80030cc <ai_buffer_get_size>
 80039f4:	f1b9 0f00 	cmp.w	r9, #0
 80039f8:	d025      	beq.n	8003a46 <ai_platform_network_init+0x162>
 80039fa:	2201      	movs	r2, #1
 80039fc:	4696      	mov	lr, r2
 80039fe:	bb30      	cbnz	r0, 8003a4e <ai_platform_network_init+0x16a>
 8003a00:	4680      	mov	r8, r0
 8003a02:	4607      	mov	r7, r0
 8003a04:	b376      	cbz	r6, 8003a64 <ai_platform_network_init+0x180>
 8003a06:	8be3      	ldrh	r3, [r4, #30]
 8003a08:	4573      	cmp	r3, lr
 8003a0a:	d323      	bcc.n	8003a54 <ai_platform_network_init+0x170>
 8003a0c:	b142      	cbz	r2, 8003a20 <ai_platform_network_init+0x13c>
 8003a0e:	46ac      	mov	ip, r5
 8003a10:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003a14:	6a25      	ldr	r5, [r4, #32]
 8003a16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a18:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003a1c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003a20:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003a22:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8003a26:	2600      	movs	r6, #0
 8003a28:	42bb      	cmp	r3, r7
 8003a2a:	83a6      	strh	r6, [r4, #28]
 8003a2c:	d323      	bcc.n	8003a76 <ai_platform_network_init+0x192>
 8003a2e:	b37f      	cbz	r7, 8003a90 <ai_platform_network_init+0x1ac>
 8003a30:	46c4      	mov	ip, r8
 8003a32:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003a36:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a3a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8003a3e:	46b6      	mov	lr, r6
 8003a40:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8003a44:	e7bb      	b.n	80039be <ai_platform_network_init+0xda>
 8003a46:	464a      	mov	r2, r9
 8003a48:	46ce      	mov	lr, r9
 8003a4a:	464d      	mov	r5, r9
 8003a4c:	e7d7      	b.n	80039fe <ai_platform_network_init+0x11a>
 8003a4e:	b30f      	cbz	r7, 8003a94 <ai_platform_network_init+0x1b0>
 8003a50:	2701      	movs	r7, #1
 8003a52:	e7d7      	b.n	8003a04 <ai_platform_network_init+0x120>
 8003a54:	2212      	movs	r2, #18
 8003a56:	2116      	movs	r1, #22
 8003a58:	f104 0010 	add.w	r0, r4, #16
 8003a5c:	f000 fb46 	bl	80040ec <core_set_error>
 8003a60:	2600      	movs	r6, #0
 8003a62:	e78c      	b.n	800397e <ai_platform_network_init+0x9a>
 8003a64:	f1b9 0f00 	cmp.w	r9, #0
 8003a68:	d0cd      	beq.n	8003a06 <ai_platform_network_init+0x122>
 8003a6a:	2110      	movs	r1, #16
 8003a6c:	2212      	movs	r2, #18
 8003a6e:	1860      	adds	r0, r4, r1
 8003a70:	f000 fb3c 	bl	80040ec <core_set_error>
 8003a74:	e783      	b.n	800397e <ai_platform_network_init+0x9a>
 8003a76:	2213      	movs	r2, #19
 8003a78:	2116      	movs	r1, #22
 8003a7a:	f104 0010 	add.w	r0, r4, #16
 8003a7e:	f000 fb35 	bl	80040ec <core_set_error>
 8003a82:	e77c      	b.n	800397e <ai_platform_network_init+0x9a>
 8003a84:	2110      	movs	r1, #16
 8003a86:	2211      	movs	r2, #17
 8003a88:	1860      	adds	r0, r4, r1
 8003a8a:	f000 fb2f 	bl	80040ec <core_set_error>
 8003a8e:	e776      	b.n	800397e <ai_platform_network_init+0x9a>
 8003a90:	46be      	mov	lr, r7
 8003a92:	e794      	b.n	80039be <ai_platform_network_init+0xda>
 8003a94:	2110      	movs	r1, #16
 8003a96:	2213      	movs	r2, #19
 8003a98:	1860      	adds	r0, r4, r1
 8003a9a:	f000 fb27 	bl	80040ec <core_set_error>
 8003a9e:	463e      	mov	r6, r7
 8003aa0:	e76d      	b.n	800397e <ai_platform_network_init+0x9a>
 8003aa2:	bf00      	nop
 8003aa4:	a1c00100 	.word	0xa1c00100
 8003aa8:	e0042000 	.word	0xe0042000
 8003aac:	58024000 	.word	0x58024000
 8003ab0:	f407a5c2 	.word	0xf407a5c2
 8003ab4:	b5e8b5cd 	.word	0xb5e8b5cd
 8003ab8:	40023000 	.word	0x40023000
 8003abc:	a1facade 	.word	0xa1facade

08003ac0 <ai_platform_network_post_init>:
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	b1f0      	cbz	r0, 8003b02 <ai_platform_network_post_init+0x42>
 8003ac4:	4b3c      	ldr	r3, [pc, #240]	; (8003bb8 <ai_platform_network_post_init+0xf8>)
 8003ac6:	6802      	ldr	r2, [r0, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	4604      	mov	r4, r0
 8003acc:	d119      	bne.n	8003b02 <ai_platform_network_post_init+0x42>
 8003ace:	f7ff fb4b 	bl	8003168 <_ai_platform_acquire_crc>
 8003ad2:	4b3a      	ldr	r3, [pc, #232]	; (8003bbc <ai_platform_network_post_init+0xfc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ade:	d03b      	beq.n	8003b58 <ai_platform_network_post_init+0x98>
 8003ae0:	4a37      	ldr	r2, [pc, #220]	; (8003bc0 <ai_platform_network_post_init+0x100>)
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003ae8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1fb      	bne.n	8003ae8 <ai_platform_network_post_init+0x28>
 8003af0:	4b34      	ldr	r3, [pc, #208]	; (8003bc4 <ai_platform_network_post_init+0x104>)
 8003af2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003af6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003afa:	4b33      	ldr	r3, [pc, #204]	; (8003bc8 <ai_platform_network_post_init+0x108>)
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d037      	beq.n	8003b70 <ai_platform_network_post_init+0xb0>
 8003b00:	e7fe      	b.n	8003b00 <ai_platform_network_post_init+0x40>
 8003b02:	f7ff fb31 	bl	8003168 <_ai_platform_acquire_crc>
 8003b06:	4b2d      	ldr	r3, [pc, #180]	; (8003bbc <ai_platform_network_post_init+0xfc>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b12:	d010      	beq.n	8003b36 <ai_platform_network_post_init+0x76>
 8003b14:	4a2a      	ldr	r2, [pc, #168]	; (8003bc0 <ai_platform_network_post_init+0x100>)
 8003b16:	2301      	movs	r3, #1
 8003b18:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003b1c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1fb      	bne.n	8003b1c <ai_platform_network_post_init+0x5c>
 8003b24:	4b27      	ldr	r3, [pc, #156]	; (8003bc4 <ai_platform_network_post_init+0x104>)
 8003b26:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003b2a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003b2e:	4b26      	ldr	r3, [pc, #152]	; (8003bc8 <ai_platform_network_post_init+0x108>)
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d00d      	beq.n	8003b50 <ai_platform_network_post_init+0x90>
 8003b34:	e7fe      	b.n	8003b34 <ai_platform_network_post_init+0x74>
 8003b36:	4a25      	ldr	r2, [pc, #148]	; (8003bcc <ai_platform_network_post_init+0x10c>)
 8003b38:	2301      	movs	r3, #1
 8003b3a:	6093      	str	r3, [r2, #8]
 8003b3c:	6893      	ldr	r3, [r2, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1fc      	bne.n	8003b3c <ai_platform_network_post_init+0x7c>
 8003b42:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <ai_platform_network_post_init+0x104>)
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	4b1f      	ldr	r3, [pc, #124]	; (8003bc8 <ai_platform_network_post_init+0x108>)
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d000      	beq.n	8003b50 <ai_platform_network_post_init+0x90>
 8003b4e:	e7fe      	b.n	8003b4e <ai_platform_network_post_init+0x8e>
 8003b50:	f7ff fb0c 	bl	800316c <_ai_platform_release_crc>
 8003b54:	2000      	movs	r0, #0
 8003b56:	bd38      	pop	{r3, r4, r5, pc}
 8003b58:	4a1c      	ldr	r2, [pc, #112]	; (8003bcc <ai_platform_network_post_init+0x10c>)
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	6093      	str	r3, [r2, #8]
 8003b5e:	6893      	ldr	r3, [r2, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1fc      	bne.n	8003b5e <ai_platform_network_post_init+0x9e>
 8003b64:	4b17      	ldr	r3, [pc, #92]	; (8003bc4 <ai_platform_network_post_init+0x104>)
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	4b17      	ldr	r3, [pc, #92]	; (8003bc8 <ai_platform_network_post_init+0x108>)
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d11a      	bne.n	8003ba6 <ai_platform_network_post_init+0xe6>
 8003b70:	f7ff fafc 	bl	800316c <_ai_platform_release_crc>
 8003b74:	68e3      	ldr	r3, [r4, #12]
 8003b76:	f013 0502 	ands.w	r5, r3, #2
 8003b7a:	d015      	beq.n	8003ba8 <ai_platform_network_post_init+0xe8>
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f002 fa39 	bl	8005ff4 <ai_layers_post_init_all>
 8003b82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b84:	b16b      	cbz	r3, 8003ba2 <ai_platform_network_post_init+0xe2>
 8003b86:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8003b88:	e007      	b.n	8003b9a <ai_platform_network_post_init+0xda>
 8003b8a:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8003b8e:	4798      	blx	r3
 8003b90:	692b      	ldr	r3, [r5, #16]
 8003b92:	42ab      	cmp	r3, r5
 8003b94:	d005      	beq.n	8003ba2 <ai_platform_network_post_init+0xe2>
 8003b96:	b123      	cbz	r3, 8003ba2 <ai_platform_network_post_init+0xe2>
 8003b98:	461d      	mov	r5, r3
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	2d00      	cmp	r5, #0
 8003ba0:	d1f3      	bne.n	8003b8a <ai_platform_network_post_init+0xca>
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	bd38      	pop	{r3, r4, r5, pc}
 8003ba6:	e7fe      	b.n	8003ba6 <ai_platform_network_post_init+0xe6>
 8003ba8:	2210      	movs	r2, #16
 8003baa:	2111      	movs	r1, #17
 8003bac:	18a0      	adds	r0, r4, r2
 8003bae:	f000 fa9d 	bl	80040ec <core_set_error>
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	bd38      	pop	{r3, r4, r5, pc}
 8003bb6:	bf00      	nop
 8003bb8:	a1c00100 	.word	0xa1c00100
 8003bbc:	e0042000 	.word	0xe0042000
 8003bc0:	58024000 	.word	0x58024000
 8003bc4:	f407a5c2 	.word	0xf407a5c2
 8003bc8:	b5e8b5cd 	.word	0xb5e8b5cd
 8003bcc:	40023000 	.word	0x40023000

08003bd0 <ai_platform_network_process>:
 8003bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd4:	460e      	mov	r6, r1
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	4693      	mov	fp, r2
 8003bda:	4605      	mov	r5, r0
 8003bdc:	b120      	cbz	r0, 8003be8 <ai_platform_network_process+0x18>
 8003bde:	4bb8      	ldr	r3, [pc, #736]	; (8003ec0 <ai_platform_network_process+0x2f0>)
 8003be0:	6802      	ldr	r2, [r0, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	bf18      	it	ne
 8003be6:	2500      	movne	r5, #0
 8003be8:	f7ff fabe 	bl	8003168 <_ai_platform_acquire_crc>
 8003bec:	4bb5      	ldr	r3, [pc, #724]	; (8003ec4 <ai_platform_network_process+0x2f4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf8:	d010      	beq.n	8003c1c <ai_platform_network_process+0x4c>
 8003bfa:	4ab3      	ldr	r2, [pc, #716]	; (8003ec8 <ai_platform_network_process+0x2f8>)
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003c02:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1fb      	bne.n	8003c02 <ai_platform_network_process+0x32>
 8003c0a:	4bb0      	ldr	r3, [pc, #704]	; (8003ecc <ai_platform_network_process+0x2fc>)
 8003c0c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003c10:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003c14:	4bae      	ldr	r3, [pc, #696]	; (8003ed0 <ai_platform_network_process+0x300>)
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d00d      	beq.n	8003c36 <ai_platform_network_process+0x66>
 8003c1a:	e7fe      	b.n	8003c1a <ai_platform_network_process+0x4a>
 8003c1c:	4aad      	ldr	r2, [pc, #692]	; (8003ed4 <ai_platform_network_process+0x304>)
 8003c1e:	2301      	movs	r3, #1
 8003c20:	6093      	str	r3, [r2, #8]
 8003c22:	6893      	ldr	r3, [r2, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1fc      	bne.n	8003c22 <ai_platform_network_process+0x52>
 8003c28:	4ba8      	ldr	r3, [pc, #672]	; (8003ecc <ai_platform_network_process+0x2fc>)
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	4ba8      	ldr	r3, [pc, #672]	; (8003ed0 <ai_platform_network_process+0x300>)
 8003c30:	429a      	cmp	r2, r3
 8003c32:	f040 812c 	bne.w	8003e8e <ai_platform_network_process+0x2be>
 8003c36:	f7ff fa99 	bl	800316c <_ai_platform_release_crc>
 8003c3a:	2d00      	cmp	r5, #0
 8003c3c:	f000 8154 	beq.w	8003ee8 <ai_platform_network_process+0x318>
 8003c40:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 8124 	beq.w	8003e90 <ai_platform_network_process+0x2c0>
 8003c48:	68eb      	ldr	r3, [r5, #12]
 8003c4a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	2700      	movs	r7, #0
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	616f      	str	r7, [r5, #20]
 8003c58:	f040 813e 	bne.w	8003ed8 <ai_platform_network_process+0x308>
 8003c5c:	2e00      	cmp	r6, #0
 8003c5e:	f000 811d 	beq.w	8003e9c <ai_platform_network_process+0x2cc>
 8003c62:	f1ba 0f00 	cmp.w	sl, #0
 8003c66:	f000 8119 	beq.w	8003e9c <ai_platform_network_process+0x2cc>
 8003c6a:	f8ba 3000 	ldrh.w	r3, [sl]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 8114 	beq.w	8003e9c <ai_platform_network_process+0x2cc>
 8003c74:	69b3      	ldr	r3, [r6, #24]
 8003c76:	f8cd b00c 	str.w	fp, [sp, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8003c80:	f8da 3004 	ldr.w	r3, [sl, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d072      	beq.n	8003d6e <ai_platform_network_process+0x19e>
 8003c88:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8003c8c:	2c00      	cmp	r4, #0
 8003c8e:	d06e      	beq.n	8003d6e <ai_platform_network_process+0x19e>
 8003c90:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003c94:	f8d3 9000 	ldr.w	r9, [r3]
 8003c98:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8003c9c:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8003ca0:	f000 81e0 	beq.w	8004064 <ai_platform_network_process+0x494>
 8003ca4:	69a3      	ldr	r3, [r4, #24]
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	4630      	mov	r0, r6
 8003caa:	685d      	ldr	r5, [r3, #4]
 8003cac:	f7ff fa0e 	bl	80030cc <ai_buffer_get_size>
 8003cb0:	4285      	cmp	r5, r0
 8003cb2:	f0c0 811b 	bcc.w	8003eec <ai_platform_network_process+0x31c>
 8003cb6:	68e0      	ldr	r0, [r4, #12]
 8003cb8:	69b1      	ldr	r1, [r6, #24]
 8003cba:	68c2      	ldr	r2, [r0, #12]
 8003cbc:	68cb      	ldr	r3, [r1, #12]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	f040 8114 	bne.w	8003eec <ai_platform_network_process+0x31c>
 8003cc4:	6882      	ldr	r2, [r0, #8]
 8003cc6:	688b      	ldr	r3, [r1, #8]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	f040 810f 	bne.w	8003eec <ai_platform_network_process+0x31c>
 8003cce:	6842      	ldr	r2, [r0, #4]
 8003cd0:	684b      	ldr	r3, [r1, #4]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	f040 810a 	bne.w	8003eec <ai_platform_network_process+0x31c>
 8003cd8:	69a3      	ldr	r3, [r4, #24]
 8003cda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cde:	f002 fbbd 	bl	800645c <ai_array_get_data_byte_size>
 8003ce2:	4605      	mov	r5, r0
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f002 fb0d 	bl	8006304 <get_tensor_byte_size>
 8003cea:	4285      	cmp	r5, r0
 8003cec:	f0c0 80fe 	bcc.w	8003eec <ai_platform_network_process+0x31c>
 8003cf0:	69a3      	ldr	r3, [r4, #24]
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	f002 fb1e 	bl	8006334 <ai_array_to_buffer_fmt>
 8003cf8:	6833      	ldr	r3, [r6, #0]
 8003cfa:	4058      	eors	r0, r3
 8003cfc:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8003d00:	f040 81bb 	bne.w	800407a <ai_platform_network_process+0x4aa>
 8003d04:	6873      	ldr	r3, [r6, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 81ae 	beq.w	8004068 <ai_platform_network_process+0x498>
 8003d0c:	69b3      	ldr	r3, [r6, #24]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 819e 	beq.w	8004052 <ai_platform_network_process+0x482>
 8003d16:	9a01      	ldr	r2, [sp, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	bf38      	it	cc
 8003d1c:	461a      	movcc	r2, r3
 8003d1e:	4620      	mov	r0, r4
 8003d20:	9201      	str	r2, [sp, #4]
 8003d22:	f002 faef 	bl	8006304 <get_tensor_byte_size>
 8003d26:	f8c8 0008 	str.w	r0, [r8, #8]
 8003d2a:	69b3      	ldr	r3, [r6, #24]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	fb00 f303 	mul.w	r3, r0, r3
 8003d32:	f8c8 300c 	str.w	r3, [r8, #12]
 8003d36:	6871      	ldr	r1, [r6, #4]
 8003d38:	f8c8 1004 	str.w	r1, [r8, #4]
 8003d3c:	440b      	add	r3, r1
 8003d3e:	f849 300b 	str.w	r3, [r9, fp]
 8003d42:	69a0      	ldr	r0, [r4, #24]
 8003d44:	6803      	ldr	r3, [r0, #0]
 8003d46:	009a      	lsls	r2, r3, #2
 8003d48:	f107 0701 	add.w	r7, r7, #1
 8003d4c:	f106 061c 	add.w	r6, r6, #28
 8003d50:	f100 80af 	bmi.w	8003eb2 <ai_platform_network_process+0x2e2>
 8003d54:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	4419      	add	r1, r3
 8003d5c:	6081      	str	r1, [r0, #8]
 8003d5e:	69a3      	ldr	r3, [r4, #24]
 8003d60:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003d64:	60da      	str	r2, [r3, #12]
 8003d66:	f8ba 3000 	ldrh.w	r3, [sl]
 8003d6a:	42bb      	cmp	r3, r7
 8003d6c:	d888      	bhi.n	8003c80 <ai_platform_network_process+0xb0>
 8003d6e:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8003d72:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8003d74:	f1bb 0f00 	cmp.w	fp, #0
 8003d78:	f000 8188 	beq.w	800408c <ai_platform_network_process+0x4bc>
 8003d7c:	2a01      	cmp	r2, #1
 8003d7e:	f240 8160 	bls.w	8004042 <ai_platform_network_process+0x472>
 8003d82:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8003d86:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 8159 	beq.w	8004042 <ai_platform_network_process+0x472>
 8003d90:	465e      	mov	r6, fp
 8003d92:	2700      	movs	r7, #0
 8003d94:	462c      	mov	r4, r5
 8003d96:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 80b4 	beq.w	8003f08 <ai_platform_network_process+0x338>
 8003da0:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8003da4:	2d00      	cmp	r5, #0
 8003da6:	f000 80af 	beq.w	8003f08 <ai_platform_network_process+0x338>
 8003daa:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8003dae:	f8d3 8000 	ldr.w	r8, [r3]
 8003db2:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8003db6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8003dba:	f000 8173 	beq.w	80040a4 <ai_platform_network_process+0x4d4>
 8003dbe:	69ab      	ldr	r3, [r5, #24]
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	9302      	str	r3, [sp, #8]
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	f7ff f980 	bl	80030cc <ai_buffer_get_size>
 8003dcc:	9b02      	ldr	r3, [sp, #8]
 8003dce:	4283      	cmp	r3, r0
 8003dd0:	f0c0 8136 	bcc.w	8004040 <ai_platform_network_process+0x470>
 8003dd4:	68e8      	ldr	r0, [r5, #12]
 8003dd6:	69b1      	ldr	r1, [r6, #24]
 8003dd8:	68c2      	ldr	r2, [r0, #12]
 8003dda:	68cb      	ldr	r3, [r1, #12]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	f040 812f 	bne.w	8004040 <ai_platform_network_process+0x470>
 8003de2:	6882      	ldr	r2, [r0, #8]
 8003de4:	688b      	ldr	r3, [r1, #8]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	f040 812a 	bne.w	8004040 <ai_platform_network_process+0x470>
 8003dec:	6842      	ldr	r2, [r0, #4]
 8003dee:	684b      	ldr	r3, [r1, #4]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	f040 8125 	bne.w	8004040 <ai_platform_network_process+0x470>
 8003df6:	69ab      	ldr	r3, [r5, #24]
 8003df8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dfc:	f002 fb2e 	bl	800645c <ai_array_get_data_byte_size>
 8003e00:	9002      	str	r0, [sp, #8]
 8003e02:	4628      	mov	r0, r5
 8003e04:	f002 fa7e 	bl	8006304 <get_tensor_byte_size>
 8003e08:	9b02      	ldr	r3, [sp, #8]
 8003e0a:	4283      	cmp	r3, r0
 8003e0c:	f0c0 8118 	bcc.w	8004040 <ai_platform_network_process+0x470>
 8003e10:	69ab      	ldr	r3, [r5, #24]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	f002 fa8e 	bl	8006334 <ai_array_to_buffer_fmt>
 8003e18:	6833      	ldr	r3, [r6, #0]
 8003e1a:	4058      	eors	r0, r3
 8003e1c:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8003e20:	f040 8138 	bne.w	8004094 <ai_platform_network_process+0x4c4>
 8003e24:	6873      	ldr	r3, [r6, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f000 814f 	beq.w	80040ca <ai_platform_network_process+0x4fa>
 8003e2c:	69b3      	ldr	r3, [r6, #24]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8141 	beq.w	80040b8 <ai_platform_network_process+0x4e8>
 8003e36:	9a01      	ldr	r2, [sp, #4]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	bf38      	it	cc
 8003e3c:	461a      	movcc	r2, r3
 8003e3e:	4628      	mov	r0, r5
 8003e40:	9201      	str	r2, [sp, #4]
 8003e42:	f002 fa5f 	bl	8006304 <get_tensor_byte_size>
 8003e46:	f8ca 0008 	str.w	r0, [sl, #8]
 8003e4a:	69b3      	ldr	r3, [r6, #24]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	fb00 f303 	mul.w	r3, r0, r3
 8003e52:	f8ca 300c 	str.w	r3, [sl, #12]
 8003e56:	6871      	ldr	r1, [r6, #4]
 8003e58:	f8ca 1004 	str.w	r1, [sl, #4]
 8003e5c:	440b      	add	r3, r1
 8003e5e:	f848 300b 	str.w	r3, [r8, fp]
 8003e62:	69a8      	ldr	r0, [r5, #24]
 8003e64:	6803      	ldr	r3, [r0, #0]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	f107 0701 	add.w	r7, r7, #1
 8003e6c:	f106 061c 	add.w	r6, r6, #28
 8003e70:	d445      	bmi.n	8003efe <ai_platform_network_process+0x32e>
 8003e72:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8003e76:	1a9b      	subs	r3, r3, r2
 8003e78:	4419      	add	r1, r3
 8003e7a:	6081      	str	r1, [r0, #8]
 8003e7c:	69ab      	ldr	r3, [r5, #24]
 8003e7e:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003e82:	60da      	str	r2, [r3, #12]
 8003e84:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003e88:	429f      	cmp	r7, r3
 8003e8a:	d384      	bcc.n	8003d96 <ai_platform_network_process+0x1c6>
 8003e8c:	e03c      	b.n	8003f08 <ai_platform_network_process+0x338>
 8003e8e:	e7fe      	b.n	8003e8e <ai_platform_network_process+0x2be>
 8003e90:	68ea      	ldr	r2, [r5, #12]
 8003e92:	616b      	str	r3, [r5, #20]
 8003e94:	f002 0203 	and.w	r2, r2, #3
 8003e98:	2a03      	cmp	r2, #3
 8003e9a:	d11d      	bne.n	8003ed8 <ai_platform_network_process+0x308>
 8003e9c:	2217      	movs	r2, #23
 8003e9e:	2112      	movs	r1, #18
 8003ea0:	f105 0010 	add.w	r0, r5, #16
 8003ea4:	f000 f922 	bl	80040ec <core_set_error>
 8003ea8:	2400      	movs	r4, #0
 8003eaa:	4620      	mov	r0, r4
 8003eac:	b005      	add	sp, #20
 8003eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb2:	f8ba 3000 	ldrh.w	r3, [sl]
 8003eb6:	429f      	cmp	r7, r3
 8003eb8:	f4ff aee2 	bcc.w	8003c80 <ai_platform_network_process+0xb0>
 8003ebc:	e757      	b.n	8003d6e <ai_platform_network_process+0x19e>
 8003ebe:	bf00      	nop
 8003ec0:	a1c00100 	.word	0xa1c00100
 8003ec4:	e0042000 	.word	0xe0042000
 8003ec8:	58024000 	.word	0x58024000
 8003ecc:	f407a5c2 	.word	0xf407a5c2
 8003ed0:	b5e8b5cd 	.word	0xb5e8b5cd
 8003ed4:	40023000 	.word	0x40023000
 8003ed8:	2230      	movs	r2, #48	; 0x30
 8003eda:	2111      	movs	r1, #17
 8003edc:	f105 0010 	add.w	r0, r5, #16
 8003ee0:	f000 f904 	bl	80040ec <core_set_error>
 8003ee4:	2400      	movs	r4, #0
 8003ee6:	e7e0      	b.n	8003eaa <ai_platform_network_process+0x2da>
 8003ee8:	462c      	mov	r4, r5
 8003eea:	e7de      	b.n	8003eaa <ai_platform_network_process+0x2da>
 8003eec:	9d02      	ldr	r5, [sp, #8]
 8003eee:	2218      	movs	r2, #24
 8003ef0:	2112      	movs	r1, #18
 8003ef2:	f105 0010 	add.w	r0, r5, #16
 8003ef6:	f000 f8f9 	bl	80040ec <core_set_error>
 8003efa:	2400      	movs	r4, #0
 8003efc:	e7d5      	b.n	8003eaa <ai_platform_network_process+0x2da>
 8003efe:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003f02:	429f      	cmp	r7, r3
 8003f04:	f4ff af47 	bcc.w	8003d96 <ai_platform_network_process+0x1c6>
 8003f08:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8003f0c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8003f0e:	82a3      	strh	r3, [r4, #20]
 8003f10:	4625      	mov	r5, r4
 8003f12:	2a00      	cmp	r2, #0
 8003f14:	f040 808e 	bne.w	8004034 <ai_platform_network_process+0x464>
 8003f18:	4616      	mov	r6, r2
 8003f1a:	4617      	mov	r7, r2
 8003f1c:	8aec      	ldrh	r4, [r5, #22]
 8003f1e:	429c      	cmp	r4, r3
 8003f20:	bf38      	it	cc
 8003f22:	46ab      	movcc	fp, r5
 8003f24:	d2c1      	bcs.n	8003eaa <ai_platform_network_process+0x2da>
 8003f26:	2e00      	cmp	r6, #0
 8003f28:	d030      	beq.n	8003f8c <ai_platform_network_process+0x3bc>
 8003f2a:	f04f 0800 	mov.w	r8, #0
 8003f2e:	e014      	b.n	8003f5a <ai_platform_network_process+0x38a>
 8003f30:	6882      	ldr	r2, [r0, #8]
 8003f32:	68c5      	ldr	r5, [r0, #12]
 8003f34:	6863      	ldr	r3, [r4, #4]
 8003f36:	1b52      	subs	r2, r2, r5
 8003f38:	4413      	add	r3, r2
 8003f3a:	6083      	str	r3, [r0, #8]
 8003f3c:	698b      	ldr	r3, [r1, #24]
 8003f3e:	6862      	ldr	r2, [r4, #4]
 8003f40:	60da      	str	r2, [r3, #12]
 8003f42:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8003f46:	f859 200a 	ldr.w	r2, [r9, sl]
 8003f4a:	440b      	add	r3, r1
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	bf24      	itt	cs
 8003f50:	68e3      	ldrcs	r3, [r4, #12]
 8003f52:	1ad3      	subcs	r3, r2, r3
 8003f54:	6063      	str	r3, [r4, #4]
 8003f56:	f108 0801 	add.w	r8, r8, #1
 8003f5a:	8833      	ldrh	r3, [r6, #0]
 8003f5c:	4543      	cmp	r3, r8
 8003f5e:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8003f62:	d913      	bls.n	8003f8c <ai_platform_network_process+0x3bc>
 8003f64:	6873      	ldr	r3, [r6, #4]
 8003f66:	b18b      	cbz	r3, 8003f8c <ai_platform_network_process+0x3bc>
 8003f68:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8003f6c:	b171      	cbz	r1, 8003f8c <ai_platform_network_process+0x3bc>
 8003f6e:	6988      	ldr	r0, [r1, #24]
 8003f70:	68b2      	ldr	r2, [r6, #8]
 8003f72:	6803      	ldr	r3, [r0, #0]
 8003f74:	f8d2 9000 	ldr.w	r9, [r2]
 8003f78:	009d      	lsls	r5, r3, #2
 8003f7a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8003f7e:	d5d7      	bpl.n	8003f30 <ai_platform_network_process+0x360>
 8003f80:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8003f84:	6880      	ldr	r0, [r0, #8]
 8003f86:	f002 faa5 	bl	80064d4 <memcpy>
 8003f8a:	e7da      	b.n	8003f42 <ai_platform_network_process+0x372>
 8003f8c:	4658      	mov	r0, fp
 8003f8e:	f002 f845 	bl	800601c <ai_layers_forward_all>
 8003f92:	2f00      	cmp	r7, #0
 8003f94:	d03f      	beq.n	8004016 <ai_platform_network_process+0x446>
 8003f96:	2400      	movs	r4, #0
 8003f98:	e016      	b.n	8003fc8 <ai_platform_network_process+0x3f8>
 8003f9a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8003f9e:	f859 100a 	ldr.w	r1, [r9, sl]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	428b      	cmp	r3, r1
 8003fa6:	bf24      	itt	cs
 8003fa8:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8003fac:	1acb      	subcs	r3, r1, r3
 8003fae:	f8c8 3004 	str.w	r3, [r8, #4]
 8003fb2:	6981      	ldr	r1, [r0, #24]
 8003fb4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8003fb8:	1b52      	subs	r2, r2, r5
 8003fba:	4413      	add	r3, r2
 8003fbc:	608b      	str	r3, [r1, #8]
 8003fbe:	6983      	ldr	r3, [r0, #24]
 8003fc0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8003fc4:	60da      	str	r2, [r3, #12]
 8003fc6:	3401      	adds	r4, #1
 8003fc8:	883b      	ldrh	r3, [r7, #0]
 8003fca:	42a3      	cmp	r3, r4
 8003fcc:	d923      	bls.n	8004016 <ai_platform_network_process+0x446>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	b30b      	cbz	r3, 8004016 <ai_platform_network_process+0x446>
 8003fd2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003fd6:	b1f0      	cbz	r0, 8004016 <ai_platform_network_process+0x446>
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	6983      	ldr	r3, [r0, #24]
 8003fdc:	f8d2 9000 	ldr.w	r9, [r2]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	0092      	lsls	r2, r2, #2
 8003fe4:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8003fe8:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8003fec:	d5d5      	bpl.n	8003f9a <ai_platform_network_process+0x3ca>
 8003fee:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8003ff2:	6899      	ldr	r1, [r3, #8]
 8003ff4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003ff8:	f002 fa6c 	bl	80064d4 <memcpy>
 8003ffc:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8004000:	f859 200a 	ldr.w	r2, [r9, sl]
 8004004:	440b      	add	r3, r1
 8004006:	4293      	cmp	r3, r2
 8004008:	bf24      	itt	cs
 800400a:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 800400e:	1ad3      	subcs	r3, r2, r3
 8004010:	f8c8 3004 	str.w	r3, [r8, #4]
 8004014:	e7d7      	b.n	8003fc6 <ai_platform_network_process+0x3f6>
 8004016:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800401a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800401e:	3401      	adds	r4, #1
 8004020:	b2a4      	uxth	r4, r4
 8004022:	42a3      	cmp	r3, r4
 8004024:	f8ab 4016 	strh.w	r4, [fp, #22]
 8004028:	f63f af7d 	bhi.w	8003f26 <ai_platform_network_process+0x356>
 800402c:	4620      	mov	r0, r4
 800402e:	b005      	add	sp, #20
 8004030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004034:	2a01      	cmp	r2, #1
 8004036:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8004038:	d03c      	beq.n	80040b4 <ai_platform_network_process+0x4e4>
 800403a:	f106 070c 	add.w	r7, r6, #12
 800403e:	e76d      	b.n	8003f1c <ai_platform_network_process+0x34c>
 8004040:	4625      	mov	r5, r4
 8004042:	2218      	movs	r2, #24
 8004044:	2113      	movs	r1, #19
 8004046:	f105 0010 	add.w	r0, r5, #16
 800404a:	f000 f84f 	bl	80040ec <core_set_error>
 800404e:	2400      	movs	r4, #0
 8004050:	e72b      	b.n	8003eaa <ai_platform_network_process+0x2da>
 8004052:	9d02      	ldr	r5, [sp, #8]
 8004054:	4604      	mov	r4, r0
 8004056:	2221      	movs	r2, #33	; 0x21
 8004058:	2112      	movs	r1, #18
 800405a:	f105 0010 	add.w	r0, r5, #16
 800405e:	f000 f845 	bl	80040ec <core_set_error>
 8004062:	e722      	b.n	8003eaa <ai_platform_network_process+0x2da>
 8004064:	9d02      	ldr	r5, [sp, #8]
 8004066:	e719      	b.n	8003e9c <ai_platform_network_process+0x2cc>
 8004068:	9d02      	ldr	r5, [sp, #8]
 800406a:	4604      	mov	r4, r0
 800406c:	2217      	movs	r2, #23
 800406e:	2112      	movs	r1, #18
 8004070:	f105 0010 	add.w	r0, r5, #16
 8004074:	f000 f83a 	bl	80040ec <core_set_error>
 8004078:	e717      	b.n	8003eaa <ai_platform_network_process+0x2da>
 800407a:	9d02      	ldr	r5, [sp, #8]
 800407c:	2219      	movs	r2, #25
 800407e:	2112      	movs	r1, #18
 8004080:	f105 0010 	add.w	r0, r5, #16
 8004084:	f000 f832 	bl	80040ec <core_set_error>
 8004088:	2400      	movs	r4, #0
 800408a:	e70e      	b.n	8003eaa <ai_platform_network_process+0x2da>
 800408c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8004090:	82ab      	strh	r3, [r5, #20]
 8004092:	e73e      	b.n	8003f12 <ai_platform_network_process+0x342>
 8004094:	f104 0010 	add.w	r0, r4, #16
 8004098:	2219      	movs	r2, #25
 800409a:	2113      	movs	r1, #19
 800409c:	f000 f826 	bl	80040ec <core_set_error>
 80040a0:	2400      	movs	r4, #0
 80040a2:	e702      	b.n	8003eaa <ai_platform_network_process+0x2da>
 80040a4:	f104 0010 	add.w	r0, r4, #16
 80040a8:	2217      	movs	r2, #23
 80040aa:	2113      	movs	r1, #19
 80040ac:	f000 f81e 	bl	80040ec <core_set_error>
 80040b0:	4654      	mov	r4, sl
 80040b2:	e6fa      	b.n	8003eaa <ai_platform_network_process+0x2da>
 80040b4:	2700      	movs	r7, #0
 80040b6:	e731      	b.n	8003f1c <ai_platform_network_process+0x34c>
 80040b8:	4625      	mov	r5, r4
 80040ba:	2221      	movs	r2, #33	; 0x21
 80040bc:	4604      	mov	r4, r0
 80040be:	2113      	movs	r1, #19
 80040c0:	f105 0010 	add.w	r0, r5, #16
 80040c4:	f000 f812 	bl	80040ec <core_set_error>
 80040c8:	e6ef      	b.n	8003eaa <ai_platform_network_process+0x2da>
 80040ca:	4625      	mov	r5, r4
 80040cc:	2217      	movs	r2, #23
 80040ce:	4604      	mov	r4, r0
 80040d0:	2113      	movs	r1, #19
 80040d2:	f105 0010 	add.w	r0, r5, #16
 80040d6:	f000 f809 	bl	80040ec <core_set_error>
 80040da:	e6e6      	b.n	8003eaa <ai_platform_network_process+0x2da>

080040dc <core_init>:
 80040dc:	2001      	movs	r0, #1
 80040de:	4770      	bx	lr

080040e0 <core_get_error>:
 80040e0:	4603      	mov	r3, r0
 80040e2:	2200      	movs	r2, #0
 80040e4:	6800      	ldr	r0, [r0, #0]
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop

080040ec <core_set_error>:
 80040ec:	4603      	mov	r3, r0
 80040ee:	7800      	ldrb	r0, [r0, #0]
 80040f0:	b108      	cbz	r0, 80040f6 <core_set_error+0xa>
 80040f2:	2000      	movs	r0, #0
 80040f4:	4770      	bx	lr
 80040f6:	7019      	strb	r1, [r3, #0]
 80040f8:	6819      	ldr	r1, [r3, #0]
 80040fa:	f362 211f 	bfi	r1, r2, #8, #24
 80040fe:	2001      	movs	r0, #1
 8004100:	6019      	str	r1, [r3, #0]
 8004102:	4770      	bx	lr

08004104 <forward_dense>:
 8004104:	6983      	ldr	r3, [r0, #24]
 8004106:	881a      	ldrh	r2, [r3, #0]
 8004108:	2a00      	cmp	r2, #0
 800410a:	f000 8181 	beq.w	8004410 <forward_dense+0x30c>
 800410e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004112:	ed2d 8b02 	vpush	{d8}
 8004116:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800411a:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800411e:	b095      	sub	sp, #84	; 0x54
 8004120:	b105      	cbz	r5, 8004124 <forward_dense+0x20>
 8004122:	682d      	ldr	r5, [r5, #0]
 8004124:	2a01      	cmp	r2, #1
 8004126:	f000 828f 	beq.w	8004648 <forward_dense+0x544>
 800412a:	f8dc 6010 	ldr.w	r6, [ip, #16]
 800412e:	b106      	cbz	r6, 8004132 <forward_dense+0x2e>
 8004130:	6836      	ldr	r6, [r6, #0]
 8004132:	2a02      	cmp	r2, #2
 8004134:	f000 816e 	beq.w	8004414 <forward_dense+0x310>
 8004138:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800413c:	930b      	str	r3, [sp, #44]	; 0x2c
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 8274 	beq.w	800462c <forward_dense+0x528>
 8004144:	4619      	mov	r1, r3
 8004146:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 800414a:	6809      	ldr	r1, [r1, #0]
 800414c:	910d      	str	r1, [sp, #52]	; 0x34
 800414e:	2b01      	cmp	r3, #1
 8004150:	f240 826e 	bls.w	8004630 <forward_dense+0x52c>
 8004154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	930b      	str	r3, [sp, #44]	; 0x2c
 800415a:	460b      	mov	r3, r1
 800415c:	68e8      	ldr	r0, [r5, #12]
 800415e:	68f7      	ldr	r7, [r6, #12]
 8004160:	6840      	ldr	r0, [r0, #4]
 8004162:	6999      	ldr	r1, [r3, #24]
 8004164:	9013      	str	r0, [sp, #76]	; 0x4c
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	680b      	ldr	r3, [r1, #0]
 800416a:	9012      	str	r0, [sp, #72]	; 0x48
 800416c:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8004170:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8004174:	fb00 f404 	mul.w	r4, r0, r4
 8004178:	f3c3 5041 	ubfx	r0, r3, #21, #2
 800417c:	fa4e f000 	asr.w	r0, lr, r0
 8004180:	2a03      	cmp	r2, #3
 8004182:	9010      	str	r0, [sp, #64]	; 0x40
 8004184:	f000 825d 	beq.w	8004642 <forward_dense+0x53e>
 8004188:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800418c:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8004190:	2a00      	cmp	r2, #0
 8004192:	f000 8246 	beq.w	8004622 <forward_dense+0x51e>
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	2a00      	cmp	r2, #0
 800419a:	f000 8242 	beq.w	8004622 <forward_dense+0x51e>
 800419e:	2b04      	cmp	r3, #4
 80041a0:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80041a4:	f000 822c 	beq.w	8004600 <forward_dense+0x4fc>
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	f000 8229 	beq.w	8004600 <forward_dense+0x4fc>
 80041ae:	f04f 0b00 	mov.w	fp, #0
 80041b2:	69b2      	ldr	r2, [r6, #24]
 80041b4:	69ab      	ldr	r3, [r5, #24]
 80041b6:	6891      	ldr	r1, [r2, #8]
 80041b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	6952      	ldr	r2, [r2, #20]
 80041be:	9106      	str	r1, [sp, #24]
 80041c0:	fb07 f404 	mul.w	r4, r7, r4
 80041c4:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80041c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80041ca:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80041ce:	4281      	cmp	r1, r0
 80041d0:	ea4f 0482 	mov.w	r4, r2, lsl #2
 80041d4:	900e      	str	r0, [sp, #56]	; 0x38
 80041d6:	940c      	str	r4, [sp, #48]	; 0x30
 80041d8:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 80041dc:	f080 8113 	bcs.w	8004406 <forward_dense+0x302>
 80041e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80041e2:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8004430 <forward_dense+0x32c>
 80041e6:	f021 0201 	bic.w	r2, r1, #1
 80041ea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80041ee:	9204      	str	r2, [sp, #16]
 80041f0:	f001 0201 	and.w	r2, r1, #1
 80041f4:	08c8      	lsrs	r0, r1, #3
 80041f6:	9208      	str	r2, [sp, #32]
 80041f8:	008a      	lsls	r2, r1, #2
 80041fa:	f001 0a07 	and.w	sl, r1, #7
 80041fe:	920f      	str	r2, [sp, #60]	; 0x3c
 8004200:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8004204:	3320      	adds	r3, #32
 8004206:	465c      	mov	r4, fp
 8004208:	9007      	str	r0, [sp, #28]
 800420a:	46cb      	mov	fp, r9
 800420c:	9205      	str	r2, [sp, #20]
 800420e:	9302      	str	r3, [sp, #8]
 8004210:	46c1      	mov	r9, r8
 8004212:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8004216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	9b02      	ldr	r3, [sp, #8]
 800421e:	3b20      	subs	r3, #32
 8004220:	930a      	str	r3, [sp, #40]	; 0x28
 8004222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004224:	b10b      	cbz	r3, 800422a <forward_dense+0x126>
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2c00      	cmp	r4, #0
 800422c:	f000 81da 	beq.w	80045e4 <forward_dense+0x4e0>
 8004230:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004232:	2904      	cmp	r1, #4
 8004234:	9906      	ldr	r1, [sp, #24]
 8004236:	f000 80fd 	beq.w	8004434 <forward_dense+0x330>
 800423a:	4549      	cmp	r1, r9
 800423c:	f080 80d2 	bcs.w	80043e4 <forward_dense+0x2e0>
 8004240:	460f      	mov	r7, r1
 8004242:	9907      	ldr	r1, [sp, #28]
 8004244:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004248:	f8dd a014 	ldr.w	sl, [sp, #20]
 800424c:	1c4e      	adds	r6, r1, #1
 800424e:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8004252:	4694      	mov	ip, r2
 8004254:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004256:	468e      	mov	lr, r1
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80de 	beq.w	800441a <forward_dense+0x316>
 800425e:	ecf3 2a01 	vldmia	r3!, {s5}
 8004262:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004430 <forward_dense+0x32c>
 8004266:	f1be 0f00 	cmp.w	lr, #0
 800426a:	f000 80de 	beq.w	800442a <forward_dense+0x326>
 800426e:	f10c 0108 	add.w	r1, ip, #8
 8004272:	4640      	mov	r0, r8
 8004274:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8004278:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800427c:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8004280:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8004284:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8004288:	ed10 5a04 	vldr	s10, [r0, #-16]
 800428c:	ed50 5a03 	vldr	s11, [r0, #-12]
 8004290:	ed10 6a02 	vldr	s12, [r0, #-8]
 8004294:	ed50 6a01 	vldr	s13, [r0, #-4]
 8004298:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800429c:	edd5 7a00 	vldr	s15, [r5]
 80042a0:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 80042a4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80042a8:	ee67 7a83 	vmul.f32	s15, s15, s6
 80042ac:	ed95 3a00 	vldr	s6, [r5]
 80042b0:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 80042b4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80042b8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80042bc:	3108      	adds	r1, #8
 80042be:	edd5 3a00 	vldr	s7, [r5]
 80042c2:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80042c6:	eee3 7a84 	vfma.f32	s15, s7, s8
 80042ca:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80042ce:	3020      	adds	r0, #32
 80042d0:	ed95 4a00 	vldr	s8, [r5]
 80042d4:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80042d8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80042dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80042e0:	edd5 4a00 	vldr	s9, [r5]
 80042e4:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80042e8:	eee4 7a85 	vfma.f32	s15, s9, s10
 80042ec:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80042f0:	ed95 5a00 	vldr	s10, [r5]
 80042f4:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80042f8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80042fc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004300:	edd5 5a00 	vldr	s11, [r5]
 8004304:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8004308:	eee5 7a86 	vfma.f32	s15, s11, s12
 800430c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004310:	428e      	cmp	r6, r1
 8004312:	ed95 6a00 	vldr	s12, [r5]
 8004316:	eee6 7a26 	vfma.f32	s15, s12, s13
 800431a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800431e:	d1a9      	bne.n	8004274 <forward_dense+0x170>
 8004320:	f1a6 0108 	sub.w	r1, r6, #8
 8004324:	4650      	mov	r0, sl
 8004326:	2a00      	cmp	r2, #0
 8004328:	d04a      	beq.n	80043c0 <forward_dense+0x2bc>
 800432a:	780d      	ldrb	r5, [r1, #0]
 800432c:	edd0 6a00 	vldr	s13, [r0]
 8004330:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004334:	edd5 7a00 	vldr	s15, [r5]
 8004338:	2a01      	cmp	r2, #1
 800433a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800433e:	d03f      	beq.n	80043c0 <forward_dense+0x2bc>
 8004340:	784d      	ldrb	r5, [r1, #1]
 8004342:	edd0 6a01 	vldr	s13, [r0, #4]
 8004346:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800434a:	edd5 7a00 	vldr	s15, [r5]
 800434e:	2a02      	cmp	r2, #2
 8004350:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004354:	d034      	beq.n	80043c0 <forward_dense+0x2bc>
 8004356:	788d      	ldrb	r5, [r1, #2]
 8004358:	edd0 6a02 	vldr	s13, [r0, #8]
 800435c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004360:	edd5 7a00 	vldr	s15, [r5]
 8004364:	2a03      	cmp	r2, #3
 8004366:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800436a:	d029      	beq.n	80043c0 <forward_dense+0x2bc>
 800436c:	78cd      	ldrb	r5, [r1, #3]
 800436e:	edd0 6a03 	vldr	s13, [r0, #12]
 8004372:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004376:	edd5 7a00 	vldr	s15, [r5]
 800437a:	2a04      	cmp	r2, #4
 800437c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004380:	d01e      	beq.n	80043c0 <forward_dense+0x2bc>
 8004382:	790d      	ldrb	r5, [r1, #4]
 8004384:	edd0 6a04 	vldr	s13, [r0, #16]
 8004388:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800438c:	edd5 7a00 	vldr	s15, [r5]
 8004390:	2a05      	cmp	r2, #5
 8004392:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004396:	d013      	beq.n	80043c0 <forward_dense+0x2bc>
 8004398:	794d      	ldrb	r5, [r1, #5]
 800439a:	edd0 6a05 	vldr	s13, [r0, #20]
 800439e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80043a2:	edd5 7a00 	vldr	s15, [r5]
 80043a6:	2a06      	cmp	r2, #6
 80043a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80043ac:	d008      	beq.n	80043c0 <forward_dense+0x2bc>
 80043ae:	7989      	ldrb	r1, [r1, #6]
 80043b0:	edd0 7a06 	vldr	s15, [r0, #24]
 80043b4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80043b8:	edd1 6a00 	vldr	s13, [r1]
 80043bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80043c0:	44dc      	add	ip, fp
 80043c2:	445e      	add	r6, fp
 80043c4:	ee32 7a87 	vadd.f32	s14, s5, s14
 80043c8:	eca7 7a01 	vstmia	r7!, {s14}
 80043cc:	454f      	cmp	r7, r9
 80043ce:	f4ff af43 	bcc.w	8004258 <forward_dense+0x154>
 80043d2:	9a06      	ldr	r2, [sp, #24]
 80043d4:	eba9 0302 	sub.w	r3, r9, r2
 80043d8:	3b01      	subs	r3, #1
 80043da:	f023 0303 	bic.w	r3, r3, #3
 80043de:	3304      	adds	r3, #4
 80043e0:	18d3      	adds	r3, r2, r3
 80043e2:	9306      	str	r3, [sp, #24]
 80043e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80043e6:	9a05      	ldr	r2, [sp, #20]
 80043e8:	4499      	add	r9, r3
 80043ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80043ec:	441a      	add	r2, r3
 80043ee:	9205      	str	r2, [sp, #20]
 80043f0:	9a02      	ldr	r2, [sp, #8]
 80043f2:	441a      	add	r2, r3
 80043f4:	9202      	str	r2, [sp, #8]
 80043f6:	9a04      	ldr	r2, [sp, #16]
 80043f8:	441a      	add	r2, r3
 80043fa:	9204      	str	r2, [sp, #16]
 80043fc:	9b06      	ldr	r3, [sp, #24]
 80043fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004400:	4293      	cmp	r3, r2
 8004402:	f4ff af08 	bcc.w	8004216 <forward_dense+0x112>
 8004406:	b015      	add	sp, #84	; 0x54
 8004408:	ecbd 8b02 	vpop	{d8}
 800440c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004410:	6853      	ldr	r3, [r2, #4]
 8004412:	deff      	udf	#255	; 0xff
 8004414:	2300      	movs	r3, #0
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	deff      	udf	#255	; 0xff
 800441a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004430 <forward_dense+0x32c>
 800441e:	eef0 2a48 	vmov.f32	s5, s16
 8004422:	f1be 0f00 	cmp.w	lr, #0
 8004426:	f47f af22 	bne.w	800426e <forward_dense+0x16a>
 800442a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800442c:	4661      	mov	r1, ip
 800442e:	e77a      	b.n	8004326 <forward_dense+0x222>
 8004430:	00000000 	.word	0x00000000
 8004434:	4549      	cmp	r1, r9
 8004436:	d2d5      	bcs.n	80043e4 <forward_dense+0x2e0>
 8004438:	9807      	ldr	r0, [sp, #28]
 800443a:	9103      	str	r1, [sp, #12]
 800443c:	9904      	ldr	r1, [sp, #16]
 800443e:	f100 0c01 	add.w	ip, r0, #1
 8004442:	3901      	subs	r1, #1
 8004444:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8004448:	9109      	str	r1, [sp, #36]	; 0x24
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 80b2 	beq.w	80045b4 <forward_dense+0x4b0>
 8004450:	9907      	ldr	r1, [sp, #28]
 8004452:	ecf3 2a01 	vldmia	r3!, {s5}
 8004456:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8004430 <forward_dense+0x32c>
 800445a:	2900      	cmp	r1, #0
 800445c:	f000 80b2 	beq.w	80045c4 <forward_dense+0x4c0>
 8004460:	9902      	ldr	r1, [sp, #8]
 8004462:	1d10      	adds	r0, r2, #4
 8004464:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8004468:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800446c:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8004470:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8004474:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8004478:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 800447c:	ed11 5a04 	vldr	s10, [r1, #-16]
 8004480:	ed51 5a03 	vldr	s11, [r1, #-12]
 8004484:	ed11 6a02 	vldr	s12, [r1, #-8]
 8004488:	ed51 6a01 	vldr	s13, [r1, #-4]
 800448c:	f006 070f 	and.w	r7, r6, #15
 8004490:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8004494:	edd7 7a00 	vldr	s15, [r7]
 8004498:	0936      	lsrs	r6, r6, #4
 800449a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800449e:	ed96 3a00 	vldr	s6, [r6]
 80044a2:	ee67 7a82 	vmul.f32	s15, s15, s4
 80044a6:	092e      	lsrs	r6, r5, #4
 80044a8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80044ac:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80044b0:	f005 050f 	and.w	r5, r5, #15
 80044b4:	edd6 3a00 	vldr	s7, [r6]
 80044b8:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 80044bc:	eee3 7a84 	vfma.f32	s15, s7, s8
 80044c0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80044c4:	0937      	lsrs	r7, r6, #4
 80044c6:	ed95 4a00 	vldr	s8, [r5]
 80044ca:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 80044ce:	eee4 7a24 	vfma.f32	s15, s8, s9
 80044d2:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80044d6:	f006 060f 	and.w	r6, r6, #15
 80044da:	edd7 4a00 	vldr	s9, [r7]
 80044de:	eee4 7a85 	vfma.f32	s15, s9, s10
 80044e2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80044e6:	3004      	adds	r0, #4
 80044e8:	ed96 5a00 	vldr	s10, [r6]
 80044ec:	092e      	lsrs	r6, r5, #4
 80044ee:	eee5 7a25 	vfma.f32	s15, s10, s11
 80044f2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80044f6:	f005 050f 	and.w	r5, r5, #15
 80044fa:	edd6 5a00 	vldr	s11, [r6]
 80044fe:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004502:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004506:	4584      	cmp	ip, r0
 8004508:	ed95 6a00 	vldr	s12, [r5]
 800450c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004510:	f101 0120 	add.w	r1, r1, #32
 8004514:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004518:	d1a4      	bne.n	8004464 <forward_dense+0x360>
 800451a:	f8dd e014 	ldr.w	lr, [sp, #20]
 800451e:	f1ac 0804 	sub.w	r8, ip, #4
 8004522:	9904      	ldr	r1, [sp, #16]
 8004524:	458e      	cmp	lr, r1
 8004526:	d22a      	bcs.n	800457e <forward_dense+0x47a>
 8004528:	9909      	ldr	r1, [sp, #36]	; 0x24
 800452a:	eba1 070e 	sub.w	r7, r1, lr
 800452e:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8004532:	f10e 0008 	add.w	r0, lr, #8
 8004536:	f108 36ff 	add.w	r6, r8, #4294967295
 800453a:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800453e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004542:	ed50 5a01 	vldr	s11, [r0, #-4]
 8004546:	ed50 6a02 	vldr	s13, [r0, #-8]
 800454a:	f001 050f 	and.w	r5, r1, #15
 800454e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8004552:	edd5 7a00 	vldr	s15, [r5]
 8004556:	0909      	lsrs	r1, r1, #4
 8004558:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800455c:	ed91 6a00 	vldr	s12, [r1]
 8004560:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004564:	42b7      	cmp	r7, r6
 8004566:	eee6 7a26 	vfma.f32	s15, s12, s13
 800456a:	f100 0008 	add.w	r0, r0, #8
 800456e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004572:	d1e4      	bne.n	800453e <forward_dense+0x43a>
 8004574:	f10a 0a01 	add.w	sl, sl, #1
 8004578:	44d0      	add	r8, sl
 800457a:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800457e:	9908      	ldr	r1, [sp, #32]
 8004580:	b321      	cbz	r1, 80045cc <forward_dense+0x4c8>
 8004582:	f898 1000 	ldrb.w	r1, [r8]
 8004586:	edde 7a00 	vldr	s15, [lr]
 800458a:	0909      	lsrs	r1, r1, #4
 800458c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8004590:	edd1 6a00 	vldr	s13, [r1]
 8004594:	9903      	ldr	r1, [sp, #12]
 8004596:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800459a:	445a      	add	r2, fp
 800459c:	44dc      	add	ip, fp
 800459e:	ee72 2a87 	vadd.f32	s5, s5, s14
 80045a2:	ece1 2a01 	vstmia	r1!, {s5}
 80045a6:	4589      	cmp	r9, r1
 80045a8:	9103      	str	r1, [sp, #12]
 80045aa:	f67f af12 	bls.w	80043d2 <forward_dense+0x2ce>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f47f af4e 	bne.w	8004450 <forward_dense+0x34c>
 80045b4:	9907      	ldr	r1, [sp, #28]
 80045b6:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8004430 <forward_dense+0x32c>
 80045ba:	eef0 2a48 	vmov.f32	s5, s16
 80045be:	2900      	cmp	r1, #0
 80045c0:	f47f af4e 	bne.w	8004460 <forward_dense+0x35c>
 80045c4:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80045c8:	4690      	mov	r8, r2
 80045ca:	e7aa      	b.n	8004522 <forward_dense+0x41e>
 80045cc:	9903      	ldr	r1, [sp, #12]
 80045ce:	ee32 7a87 	vadd.f32	s14, s5, s14
 80045d2:	445a      	add	r2, fp
 80045d4:	eca1 7a01 	vstmia	r1!, {s14}
 80045d8:	4549      	cmp	r1, r9
 80045da:	9103      	str	r1, [sp, #12]
 80045dc:	44dc      	add	ip, fp
 80045de:	f4ff af34 	bcc.w	800444a <forward_dense+0x346>
 80045e2:	e6f6      	b.n	80043d2 <forward_dense+0x2ce>
 80045e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80045e6:	9d06      	ldr	r5, [sp, #24]
 80045e8:	9101      	str	r1, [sp, #4]
 80045ea:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80045ec:	9100      	str	r1, [sp, #0]
 80045ee:	4628      	mov	r0, r5
 80045f0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80045f2:	f001 fd5d 	bl	80060b0 <lite_dense_if32of32wf32>
 80045f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045f8:	462b      	mov	r3, r5
 80045fa:	4413      	add	r3, r2
 80045fc:	9306      	str	r3, [sp, #24]
 80045fe:	e6f1      	b.n	80043e4 <forward_dense+0x2e0>
 8004600:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8004604:	f1b9 0f00 	cmp.w	r9, #0
 8004608:	d016      	beq.n	8004638 <forward_dense+0x534>
 800460a:	e9d9 0100 	ldrd	r0, r1, [r9]
 800460e:	f001 fefd 	bl	800640c <ai_array_get_byte_size>
 8004612:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8004616:	4602      	mov	r2, r0
 8004618:	4641      	mov	r1, r8
 800461a:	4658      	mov	r0, fp
 800461c:	f001 ff5a 	bl	80064d4 <memcpy>
 8004620:	e5c7      	b.n	80041b2 <forward_dense+0xae>
 8004622:	2b04      	cmp	r3, #4
 8004624:	d00a      	beq.n	800463c <forward_dense+0x538>
 8004626:	f04f 0900 	mov.w	r9, #0
 800462a:	e5bd      	b.n	80041a8 <forward_dense+0xa4>
 800462c:	930d      	str	r3, [sp, #52]	; 0x34
 800462e:	e595      	b.n	800415c <forward_dense+0x58>
 8004630:	2300      	movs	r3, #0
 8004632:	930b      	str	r3, [sp, #44]	; 0x2c
 8004634:	460b      	mov	r3, r1
 8004636:	e591      	b.n	800415c <forward_dense+0x58>
 8004638:	46c3      	mov	fp, r8
 800463a:	e5ba      	b.n	80041b2 <forward_dense+0xae>
 800463c:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8004640:	e5b7      	b.n	80041b2 <forward_dense+0xae>
 8004642:	2300      	movs	r3, #0
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	deff      	udf	#255	; 0xff
 8004648:	2300      	movs	r3, #0
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	deff      	udf	#255	; 0xff
 800464e:	bf00      	nop

08004650 <array_f32_identity>:
 8004650:	6983      	ldr	r3, [r0, #24]
 8004652:	6989      	ldr	r1, [r1, #24]
 8004654:	428b      	cmp	r3, r1
 8004656:	d004      	beq.n	8004662 <array_f32_identity+0x12>
 8004658:	68c9      	ldr	r1, [r1, #12]
 800465a:	68d8      	ldr	r0, [r3, #12]
 800465c:	0092      	lsls	r2, r2, #2
 800465e:	f001 bf39 	b.w	80064d4 <memcpy>
 8004662:	4770      	bx	lr

08004664 <forward_lstm>:
 8004664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004668:	ed2d 8b06 	vpush	{d8-d10}
 800466c:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8004670:	6983      	ldr	r3, [r0, #24]
 8004672:	af00      	add	r7, sp, #0
 8004674:	881a      	ldrh	r2, [r3, #0]
 8004676:	60b8      	str	r0, [r7, #8]
 8004678:	2a00      	cmp	r2, #0
 800467a:	f001 843c 	beq.w	8005ef6 <forward_lstm+0x1892>
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004684:	2a01      	cmp	r2, #1
 8004686:	f001 8436 	beq.w	8005ef6 <forward_lstm+0x1892>
 800468a:	2a02      	cmp	r2, #2
 800468c:	f001 8433 	beq.w	8005ef6 <forward_lstm+0x1892>
 8004690:	69d9      	ldr	r1, [r3, #28]
 8004692:	2900      	cmp	r1, #0
 8004694:	f001 8426 	beq.w	8005ee4 <forward_lstm+0x1880>
 8004698:	8b1b      	ldrh	r3, [r3, #24]
 800469a:	6808      	ldr	r0, [r1, #0]
 800469c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	688b      	ldr	r3, [r1, #8]
 80046a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80046a8:	bf88      	it	hi
 80046aa:	f8d1 b004 	ldrhi.w	fp, [r1, #4]
 80046ae:	68cb      	ldr	r3, [r1, #12]
 80046b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80046b4:	bf98      	it	ls
 80046b6:	f04f 0b00 	movls.w	fp, #0
 80046ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	657b      	str	r3, [r7, #84]	; 0x54
 80046c2:	b10b      	cbz	r3, 80046c8 <forward_lstm+0x64>
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	657b      	str	r3, [r7, #84]	; 0x54
 80046c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80046ce:	899b      	ldrh	r3, [r3, #12]
 80046d0:	68c5      	ldr	r5, [r0, #12]
 80046d2:	0098      	lsls	r0, r3, #2
 80046d4:	3007      	adds	r0, #7
 80046d6:	08c0      	lsrs	r0, r0, #3
 80046d8:	466c      	mov	r4, sp
 80046da:	eba4 04c0 	sub.w	r4, r4, r0, lsl #3
 80046de:	46a5      	mov	sp, r4
 80046e0:	1ddc      	adds	r4, r3, #7
 80046e2:	466e      	mov	r6, sp
 80046e4:	08e4      	lsrs	r4, r4, #3
 80046e6:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80046ea:	46a5      	mov	sp, r4
 80046ec:	68bc      	ldr	r4, [r7, #8]
 80046ee:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80046f2:	466c      	mov	r4, sp
 80046f4:	eba4 0cc0 	sub.w	ip, r4, r0, lsl #3
 80046f8:	46e5      	mov	sp, ip
 80046fa:	ebac 00c0 	sub.w	r0, ip, r0, lsl #3
 80046fe:	f8c7 d010 	str.w	sp, [r7, #16]
 8004702:	4685      	mov	sp, r0
 8004704:	68e8      	ldr	r0, [r5, #12]
 8004706:	6538      	str	r0, [r7, #80]	; 0x50
 8004708:	6868      	ldr	r0, [r5, #4]
 800470a:	6678      	str	r0, [r7, #100]	; 0x64
 800470c:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8004710:	ee09 0a10 	vmov	s18, r0
 8004714:	46ee      	mov	lr, sp
 8004716:	2900      	cmp	r1, #0
 8004718:	f001 83db 	beq.w	8005ed2 <forward_lstm+0x186e>
 800471c:	694d      	ldr	r5, [r1, #20]
 800471e:	6908      	ldr	r0, [r1, #16]
 8004720:	ee09 5a90 	vmov	s19, r5
 8004724:	698d      	ldr	r5, [r1, #24]
 8004726:	ee0a 0a90 	vmov	s21, r0
 800472a:	e9d1 9107 	ldrd	r9, r1, [r1, #28]
 800472e:	ee0a 5a10 	vmov	s20, r5
 8004732:	b118      	cbz	r0, 800473c <forward_lstm+0xd8>
 8004734:	6980      	ldr	r0, [r0, #24]
 8004736:	6880      	ldr	r0, [r0, #8]
 8004738:	ee0a 0a90 	vmov	s21, r0
 800473c:	ee19 0a90 	vmov	r0, s19
 8004740:	b118      	cbz	r0, 800474a <forward_lstm+0xe6>
 8004742:	6980      	ldr	r0, [r0, #24]
 8004744:	6880      	ldr	r0, [r0, #8]
 8004746:	ee09 0a90 	vmov	s19, r0
 800474a:	ee1a 0a10 	vmov	r0, s20
 800474e:	b118      	cbz	r0, 8004758 <forward_lstm+0xf4>
 8004750:	6980      	ldr	r0, [r0, #24]
 8004752:	6880      	ldr	r0, [r0, #8]
 8004754:	ee0a 0a10 	vmov	s20, r0
 8004758:	f1b9 0f00 	cmp.w	r9, #0
 800475c:	d003      	beq.n	8004766 <forward_lstm+0x102>
 800475e:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8004762:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8004766:	b109      	cbz	r1, 800476c <forward_lstm+0x108>
 8004768:	6989      	ldr	r1, [r1, #24]
 800476a:	6889      	ldr	r1, [r1, #8]
 800476c:	2a03      	cmp	r2, #3
 800476e:	f001 83c2 	beq.w	8005ef6 <forward_lstm+0x1892>
 8004772:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004776:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
 800477a:	f1ba 0f00 	cmp.w	sl, #0
 800477e:	d001      	beq.n	8004784 <forward_lstm+0x120>
 8004780:	f8da a000 	ldr.w	sl, [sl]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	f8c7 90fc 	str.w	r9, [r7, #252]	; 0xfc
 800478a:	4423      	add	r3, r4
 800478c:	4620      	mov	r0, r4
 800478e:	f1ae 0404 	sub.w	r4, lr, #4
 8004792:	f8d7 c08c 	ldr.w	ip, [r7, #140]	; 0x8c
 8004796:	60fc      	str	r4, [r7, #12]
 8004798:	3e04      	subs	r6, #4
 800479a:	f1ce 0e04 	rsb	lr, lr, #4
 800479e:	1f15      	subs	r5, r2, #4
 80047a0:	4699      	mov	r9, r3
 80047a2:	e016      	b.n	80047d2 <forward_lstm+0x16e>
 80047a4:	4423      	add	r3, r4
 80047a6:	f853 200e 	ldr.w	r2, [r3, lr]
 80047aa:	b1c2      	cbz	r2, 80047de <forward_lstm+0x17a>
 80047ac:	68d3      	ldr	r3, [r2, #12]
 80047ae:	f846 2f04 	str.w	r2, [r6, #4]!
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	6992      	ldr	r2, [r2, #24]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	6893      	ldr	r3, [r2, #8]
 80047ba:	f845 3f04 	str.w	r3, [r5, #4]!
 80047be:	bf8c      	ite	hi
 80047c0:	2301      	movhi	r3, #1
 80047c2:	2300      	movls	r3, #0
 80047c4:	f800 3b01 	strb.w	r3, [r0], #1
 80047c8:	bf8c      	ite	hi
 80047ca:	4643      	movhi	r3, r8
 80047cc:	2300      	movls	r3, #0
 80047ce:	f844 3f04 	str.w	r3, [r4, #4]!
 80047d2:	4548      	cmp	r0, r9
 80047d4:	d003      	beq.n	80047de <forward_lstm+0x17a>
 80047d6:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e2      	bne.n	80047a4 <forward_lstm+0x140>
 80047de:	f8da 3018 	ldr.w	r3, [sl, #24]
 80047e2:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 80047e6:	689d      	ldr	r5, [r3, #8]
 80047e8:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 80047ec:	f8db 3018 	ldr.w	r3, [fp, #24]
 80047f0:	6980      	ldr	r0, [r0, #24]
 80047f2:	69a4      	ldr	r4, [r4, #24]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047f8:	6883      	ldr	r3, [r0, #8]
 80047fa:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80047fe:	643b      	str	r3, [r7, #64]	; 0x40
 8004800:	68a3      	ldr	r3, [r4, #8]
 8004802:	65bb      	str	r3, [r7, #88]	; 0x58
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	6992      	ldr	r2, [r2, #24]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	6892      	ldr	r2, [r2, #8]
 800480c:	663a      	str	r2, [r7, #96]	; 0x60
 800480e:	ee19 0a10 	vmov	r0, s18
 8004812:	eb05 0440 	add.w	r4, r5, r0, lsl #1
 8004816:	182a      	adds	r2, r5, r0
 8004818:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 800481c:	4420      	add	r0, r4
 800481e:	f8d7 90fc 	ldr.w	r9, [r7, #252]	; 0xfc
 8004822:	66fd      	str	r5, [r7, #108]	; 0x6c
 8004824:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8004828:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 800482c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004830:	67f8      	str	r0, [r7, #124]	; 0x7c
 8004832:	607b      	str	r3, [r7, #4]
 8004834:	f041 8275 	bne.w	8005d22 <forward_lstm+0x16be>
 8004838:	2900      	cmp	r1, #0
 800483a:	f001 8280 	beq.w	8005d3e <forward_lstm+0x16da>
 800483e:	ee19 2a10 	vmov	r2, s18
 8004842:	4628      	mov	r0, r5
 8004844:	f001 fe46 	bl	80064d4 <memcpy>
 8004848:	ee19 2a10 	vmov	r2, s18
 800484c:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8004850:	4649      	mov	r1, r9
 8004852:	f1b9 0f00 	cmp.w	r9, #0
 8004856:	f001 8281 	beq.w	8005d5c <forward_lstm+0x16f8>
 800485a:	f001 fe3b 	bl	80064d4 <memcpy>
 800485e:	ee19 2a10 	vmov	r2, s18
 8004862:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004866:	2100      	movs	r1, #0
 8004868:	f001 fe42 	bl	80064f0 <memset>
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	4bad      	ldr	r3, [pc, #692]	; (8004b24 <forward_lstm+0x4c0>)
 8004870:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004872:	edd2 8a10 	vldr	s17, [r2, #64]	; 0x40
 8004876:	2900      	cmp	r1, #0
 8004878:	bf08      	it	eq
 800487a:	4619      	moveq	r1, r3
 800487c:	63f9      	str	r1, [r7, #60]	; 0x3c
 800487e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004880:	2900      	cmp	r1, #0
 8004882:	bf08      	it	eq
 8004884:	4619      	moveq	r1, r3
 8004886:	67b9      	str	r1, [r7, #120]	; 0x78
 8004888:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800488a:	2900      	cmp	r1, #0
 800488c:	bf08      	it	eq
 800488e:	4619      	moveq	r1, r3
 8004890:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 8004894:	63b9      	str	r1, [r7, #56]	; 0x38
 8004896:	2b00      	cmp	r3, #0
 8004898:	f001 8314 	beq.w	8005ec4 <forward_lstm+0x1860>
 800489c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800489e:	3b01      	subs	r3, #1
 80048a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048a4:	f04f 33ff 	mov.w	r3, #4294967295
 80048a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80048aa:	4613      	mov	r3, r2
 80048ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048b0:	b1b3      	cbz	r3, 80048e0 <forward_lstm+0x27c>
 80048b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048b6:	899d      	ldrh	r5, [r3, #12]
 80048b8:	b195      	cbz	r5, 80048e0 <forward_lstm+0x27c>
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80048c4:	1e5e      	subs	r6, r3, #1
 80048c6:	f850 3f04 	ldr.w	r3, [r0, #4]!
 80048ca:	6811      	ldr	r1, [r2, #0]
 80048cc:	fb03 f406 	mul.w	r4, r3, r6
 80048d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80048d4:	f842 1b04 	str.w	r1, [r2], #4
 80048d8:	425b      	negs	r3, r3
 80048da:	4295      	cmp	r5, r2
 80048dc:	6003      	str	r3, [r0, #0]
 80048de:	d1f2      	bne.n	80048c6 <forward_lstm+0x262>
 80048e0:	f8d7 e064 	ldr.w	lr, [r7, #100]	; 0x64
 80048e4:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80048e6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80048e8:	ed9f 8a90 	vldr	s16, [pc, #576]	; 8004b2c <forward_lstm+0x4c8>
 80048ec:	fa1f f18e 	uxth.w	r1, lr
 80048f0:	fa1f f288 	uxth.w	r2, r8
 80048f4:	f1a1 0310 	sub.w	r3, r1, #16
 80048f8:	0096      	lsls	r6, r2, #2
 80048fa:	091b      	lsrs	r3, r3, #4
 80048fc:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8004900:	3301      	adds	r3, #1
 8004902:	fb06 f101 	mul.w	r1, r6, r1
 8004906:	eb04 0c41 	add.w	ip, r4, r1, lsl #1
 800490a:	019b      	lsls	r3, r3, #6
 800490c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 800490e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004912:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004916:	f1a2 0310 	sub.w	r3, r2, #16
 800491a:	fb02 f202 	mul.w	r2, r2, r2
 800491e:	f8c7 c04c 	str.w	ip, [r7, #76]	; 0x4c
 8004922:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
 8004926:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004928:	f8c7 c048 	str.w	ip, [r7, #72]	; 0x48
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	eb04 0c46 	add.w	ip, r4, r6, lsl #1
 8004932:	1c5c      	adds	r4, r3, #1
 8004934:	019b      	lsls	r3, r3, #6
 8004936:	61fb      	str	r3, [r7, #28]
 8004938:	01a3      	lsls	r3, r4, #6
 800493a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800493e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004940:	f8c7 60c8 	str.w	r6, [r7, #200]	; 0xc8
 8004944:	440b      	add	r3, r1
 8004946:	637b      	str	r3, [r7, #52]	; 0x34
 8004948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800494a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 800494c:	f8c7 c044 	str.w	ip, [r7, #68]	; 0x44
 8004950:	440b      	add	r3, r1
 8004952:	633b      	str	r3, [r7, #48]	; 0x30
 8004954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004956:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800495a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800495e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004962:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004966:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004968:	62bb      	str	r3, [r7, #40]	; 0x28
 800496a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800496e:	4633      	mov	r3, r6
 8004970:	4432      	add	r2, r6
 8004972:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 8004974:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8004978:	441e      	add	r6, r3
 800497a:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 800497e:	627e      	str	r6, [r7, #36]	; 0x24
 8004980:	18e6      	adds	r6, r4, r3
 8004982:	f8c7 60a0 	str.w	r6, [r7, #160]	; 0xa0
 8004986:	ea0e 0600 	and.w	r6, lr, r0
 800498a:	677a      	str	r2, [r7, #116]	; 0x74
 800498c:	f8c7 60f4 	str.w	r6, [r7, #244]	; 0xf4
 8004990:	008a      	lsls	r2, r1, #2
 8004992:	ea08 0600 	and.w	r6, r8, r0
 8004996:	f8c7 60f8 	str.w	r6, [r7, #248]	; 0xf8
 800499a:	4675      	mov	r5, lr
 800499c:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 80049a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049a2:	00ad      	lsls	r5, r5, #2
 80049a4:	fb05 f202 	mul.w	r2, r5, r2
 80049a8:	61ba      	str	r2, [r7, #24]
 80049aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80049ae:	4661      	mov	r1, ip
 80049b0:	fb05 f502 	mul.w	r5, r5, r2
 80049b4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80049b8:	f8c7 5084 	str.w	r5, [r7, #132]	; 0x84
 80049bc:	4419      	add	r1, r3
 80049be:	6239      	str	r1, [r7, #32]
 80049c0:	18d1      	adds	r1, r2, r3
 80049c2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80049c6:	f008 060f 	and.w	r6, r8, #15
 80049ca:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80049d6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80049da:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80049de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049e0:	4413      	add	r3, r2
 80049e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049e6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80049ea:	4b4f      	ldr	r3, [pc, #316]	; (8004b28 <forward_lstm+0x4c4>)
 80049ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80049f0:	e9c7 3244 	strd	r3, r2, [r7, #272]	; 0x110
 80049f4:	e9c7 3248 	strd	r3, r2, [r7, #288]	; 0x120
 80049f8:	e9c7 324c 	strd	r3, r2, [r7, #304]	; 0x130
 80049fc:	e9c7 3250 	strd	r3, r2, [r7, #320]	; 0x140
 8004a00:	e9c7 3254 	strd	r3, r2, [r7, #336]	; 0x150
 8004a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a06:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8004a12:	4403      	add	r3, r0
 8004a14:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a18:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8004a1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a20:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8004a24:	e9c7 4446 	strd	r4, r4, [r7, #280]	; 0x118
 8004a28:	e9c7 334a 	strd	r3, r3, [r7, #296]	; 0x128
 8004a2c:	e9c7 004e 	strd	r0, r0, [r7, #312]	; 0x138
 8004a30:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004a34:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 8004a36:	e9c7 0052 	strd	r0, r0, [r7, #328]	; 0x148
 8004a3a:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8004a3e:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8004a42:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8004a46:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 8004a4a:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8004a4e:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
 8004a52:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a56:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
 8004a5a:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8004a5e:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
 8004a62:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8004a66:	e9c7 5556 	strd	r5, r5, [r7, #344]	; 0x158
 8004a6a:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
 8004a6e:	2a00      	cmp	r2, #0
 8004a70:	f001 81b9 	beq.w	8005de6 <forward_lstm+0x1782>
 8004a74:	69f8      	ldr	r0, [r7, #28]
 8004a76:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8004a7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a7e:	3080      	adds	r0, #128	; 0x80
 8004a80:	1882      	adds	r2, r0, r2
 8004a82:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a86:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8004a8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004a8c:	eb02 0800 	add.w	r8, r2, r0
 8004a90:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004a92:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 8004a96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a98:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
 8004a9c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004a9e:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
 8004aa2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004aa4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004aa8:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8004aac:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8004ab0:	469a      	mov	sl, r3
 8004ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ab8:	1810      	adds	r0, r2, r0
 8004aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004abc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8004ac0:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
 8004ac4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ac8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8004acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ace:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004ad8:	4402      	add	r2, r0
 8004ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004adc:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004ae0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004ae4:	e9d7 3218 	ldrd	r3, r2, [r7, #96]	; 0x60
 8004ae8:	f002 020f 	and.w	r2, r2, #15
 8004aec:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004af0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8004af4:	673d      	str	r5, [r7, #112]	; 0x70
 8004af6:	46a3      	mov	fp, r4
 8004af8:	46ae      	mov	lr, r5
 8004afa:	468c      	mov	ip, r1
 8004afc:	4699      	mov	r9, r3
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b02:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004b2c <forward_lstm+0x4c8>
 8004b06:	ecac 8a01 	vstmia	ip!, {s16}
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f001 8164 	beq.w	8005dd8 <forward_lstm+0x1774>
 8004b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b14:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004b18:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004b1c:	f109 0340 	add.w	r3, r9, #64	; 0x40
 8004b20:	e006      	b.n	8004b30 <forward_lstm+0x4cc>
 8004b22:	bf00      	nop
 8004b24:	08004651 	.word	0x08004651
 8004b28:	01821040 	.word	0x01821040
 8004b2c:	00000000 	.word	0x00000000
 8004b30:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8004b34:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8004b38:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8004b3c:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8004b40:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8004b44:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8004b48:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8004b4c:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8004b50:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8004b54:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8004b58:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8004b5c:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8004b60:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8004b64:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004b68:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8004b6c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004b70:	3910      	subs	r1, #16
 8004b72:	290f      	cmp	r1, #15
 8004b74:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8004b78:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8004b7c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004b80:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8004b84:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8004b88:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8004b8c:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8004b90:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8004b94:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8004b98:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8004b9c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004ba0:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8004ba4:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8004ba8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004bac:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8004bb0:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8004bb4:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004bb8:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8004bbc:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8004bc0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004bc4:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8004bc8:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8004bcc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004bd0:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8004bd4:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8004bd8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004bdc:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8004be0:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8004be4:	eee1 7a21 	vfma.f32	s15, s2, s3
 8004be8:	eee2 7a22 	vfma.f32	s15, s4, s5
 8004bec:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004bf0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004bf4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004bf8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c00:	d896      	bhi.n	8004b30 <forward_lstm+0x4cc>
 8004c02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c06:	e9d7 5425 	ldrd	r5, r4, [r7, #148]	; 0x94
 8004c0a:	444b      	add	r3, r9
 8004c0c:	2d00      	cmp	r5, #0
 8004c0e:	d076      	beq.n	8004cfe <forward_lstm+0x69a>
 8004c10:	edd4 6a00 	vldr	s13, [r4]
 8004c14:	edd3 7a00 	vldr	s15, [r3]
 8004c18:	2d01      	cmp	r5, #1
 8004c1a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004c1e:	d06e      	beq.n	8004cfe <forward_lstm+0x69a>
 8004c20:	edd4 6a01 	vldr	s13, [r4, #4]
 8004c24:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c28:	2d02      	cmp	r5, #2
 8004c2a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004c2e:	d066      	beq.n	8004cfe <forward_lstm+0x69a>
 8004c30:	edd3 6a02 	vldr	s13, [r3, #8]
 8004c34:	edd4 7a02 	vldr	s15, [r4, #8]
 8004c38:	2d03      	cmp	r5, #3
 8004c3a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004c3e:	d05e      	beq.n	8004cfe <forward_lstm+0x69a>
 8004c40:	edd3 6a03 	vldr	s13, [r3, #12]
 8004c44:	edd4 7a03 	vldr	s15, [r4, #12]
 8004c48:	2d04      	cmp	r5, #4
 8004c4a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004c4e:	d056      	beq.n	8004cfe <forward_lstm+0x69a>
 8004c50:	edd3 6a04 	vldr	s13, [r3, #16]
 8004c54:	edd4 7a04 	vldr	s15, [r4, #16]
 8004c58:	2d05      	cmp	r5, #5
 8004c5a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004c5e:	d04e      	beq.n	8004cfe <forward_lstm+0x69a>
 8004c60:	edd3 6a05 	vldr	s13, [r3, #20]
 8004c64:	edd4 7a05 	vldr	s15, [r4, #20]
 8004c68:	2d06      	cmp	r5, #6
 8004c6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004c6e:	d046      	beq.n	8004cfe <forward_lstm+0x69a>
 8004c70:	edd3 6a06 	vldr	s13, [r3, #24]
 8004c74:	edd4 7a06 	vldr	s15, [r4, #24]
 8004c78:	2d07      	cmp	r5, #7
 8004c7a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004c7e:	d03e      	beq.n	8004cfe <forward_lstm+0x69a>
 8004c80:	edd3 6a07 	vldr	s13, [r3, #28]
 8004c84:	edd4 7a07 	vldr	s15, [r4, #28]
 8004c88:	2d08      	cmp	r5, #8
 8004c8a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004c8e:	d036      	beq.n	8004cfe <forward_lstm+0x69a>
 8004c90:	edd3 6a08 	vldr	s13, [r3, #32]
 8004c94:	edd4 7a08 	vldr	s15, [r4, #32]
 8004c98:	2d09      	cmp	r5, #9
 8004c9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004c9e:	d02e      	beq.n	8004cfe <forward_lstm+0x69a>
 8004ca0:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8004ca4:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8004ca8:	2d0a      	cmp	r5, #10
 8004caa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004cae:	d026      	beq.n	8004cfe <forward_lstm+0x69a>
 8004cb0:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8004cb4:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8004cb8:	2d0b      	cmp	r5, #11
 8004cba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004cbe:	d01e      	beq.n	8004cfe <forward_lstm+0x69a>
 8004cc0:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8004cc4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8004cc8:	2d0c      	cmp	r5, #12
 8004cca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004cce:	d016      	beq.n	8004cfe <forward_lstm+0x69a>
 8004cd0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8004cd4:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8004cd8:	f1b5 020d 	subs.w	r2, r5, #13
 8004cdc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004ce0:	d00d      	beq.n	8004cfe <forward_lstm+0x69a>
 8004ce2:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8004ce6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8004cea:	2a01      	cmp	r2, #1
 8004cec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004cf0:	d005      	beq.n	8004cfe <forward_lstm+0x69a>
 8004cf2:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8004cf6:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8004cfa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004cfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d02:	ed5f 6a76 	vldr	s13, [pc, #-472]	; 8004b2c <forward_lstm+0x4c8>
 8004d06:	ed0c 7a01 	vstr	s14, [ip, #-4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f001 805c 	beq.w	8005dc8 <forward_lstm+0x1764>
 8004d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d14:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8004d18:	3340      	adds	r3, #64	; 0x40
 8004d1a:	3240      	adds	r2, #64	; 0x40
 8004d1c:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8004d20:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 8004d24:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8004d28:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8004d2c:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 8004d30:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8004d34:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 8004d38:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8004d3c:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 8004d40:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 8004d44:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8004d48:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 8004d4c:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8004d50:	ee67 7a85 	vmul.f32	s15, s15, s10
 8004d54:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8004d58:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004d5c:	3340      	adds	r3, #64	; 0x40
 8004d5e:	3240      	adds	r2, #64	; 0x40
 8004d60:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8004d64:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8004d68:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004d6c:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 8004d70:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8004d74:	eee4 7a06 	vfma.f32	s15, s8, s12
 8004d78:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8004d7c:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 8004d80:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004d84:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8004d88:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8004d8c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004d90:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8004d94:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8004d98:	eee2 7a83 	vfma.f32	s15, s5, s6
 8004d9c:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 8004da0:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8004da4:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004da8:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 8004dac:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8004db0:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004db4:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8004db8:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8004dbc:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004dc0:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8004dc4:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8004dc8:	eee0 7a81 	vfma.f32	s15, s1, s2
 8004dcc:	4298      	cmp	r0, r3
 8004dce:	eee1 7a82 	vfma.f32	s15, s3, s4
 8004dd2:	eee2 7a83 	vfma.f32	s15, s5, s6
 8004dd6:	eee3 7a84 	vfma.f32	s15, s7, s8
 8004dda:	eee4 7a85 	vfma.f32	s15, s9, s10
 8004dde:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004de2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004de6:	d199      	bne.n	8004d1c <forward_lstm+0x6b8>
 8004de8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004dec:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004df0:	189a      	adds	r2, r3, r2
 8004df2:	2e00      	cmp	r6, #0
 8004df4:	d078      	beq.n	8004ee8 <forward_lstm+0x884>
 8004df6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8004dfa:	4633      	mov	r3, r6
 8004dfc:	ed91 6a00 	vldr	s12, [r1]
 8004e00:	edd2 7a00 	vldr	s15, [r2]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004e0a:	d06d      	beq.n	8004ee8 <forward_lstm+0x884>
 8004e0c:	ed91 6a01 	vldr	s12, [r1, #4]
 8004e10:	edd2 7a01 	vldr	s15, [r2, #4]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004e1a:	d065      	beq.n	8004ee8 <forward_lstm+0x884>
 8004e1c:	ed91 6a02 	vldr	s12, [r1, #8]
 8004e20:	edd2 7a02 	vldr	s15, [r2, #8]
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004e2a:	d05d      	beq.n	8004ee8 <forward_lstm+0x884>
 8004e2c:	ed91 6a03 	vldr	s12, [r1, #12]
 8004e30:	edd2 7a03 	vldr	s15, [r2, #12]
 8004e34:	2b04      	cmp	r3, #4
 8004e36:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004e3a:	d055      	beq.n	8004ee8 <forward_lstm+0x884>
 8004e3c:	ed91 6a04 	vldr	s12, [r1, #16]
 8004e40:	edd2 7a04 	vldr	s15, [r2, #16]
 8004e44:	2b05      	cmp	r3, #5
 8004e46:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004e4a:	d04d      	beq.n	8004ee8 <forward_lstm+0x884>
 8004e4c:	ed91 6a05 	vldr	s12, [r1, #20]
 8004e50:	edd2 7a05 	vldr	s15, [r2, #20]
 8004e54:	2b06      	cmp	r3, #6
 8004e56:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004e5a:	d045      	beq.n	8004ee8 <forward_lstm+0x884>
 8004e5c:	ed91 6a06 	vldr	s12, [r1, #24]
 8004e60:	edd2 7a06 	vldr	s15, [r2, #24]
 8004e64:	2b07      	cmp	r3, #7
 8004e66:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004e6a:	d03d      	beq.n	8004ee8 <forward_lstm+0x884>
 8004e6c:	ed91 6a07 	vldr	s12, [r1, #28]
 8004e70:	edd2 7a07 	vldr	s15, [r2, #28]
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004e7a:	d035      	beq.n	8004ee8 <forward_lstm+0x884>
 8004e7c:	ed91 6a08 	vldr	s12, [r1, #32]
 8004e80:	edd2 7a08 	vldr	s15, [r2, #32]
 8004e84:	2b09      	cmp	r3, #9
 8004e86:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004e8a:	d02d      	beq.n	8004ee8 <forward_lstm+0x884>
 8004e8c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8004e90:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8004e94:	2b0a      	cmp	r3, #10
 8004e96:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004e9a:	d025      	beq.n	8004ee8 <forward_lstm+0x884>
 8004e9c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8004ea0:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8004ea4:	2b0b      	cmp	r3, #11
 8004ea6:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004eaa:	d01d      	beq.n	8004ee8 <forward_lstm+0x884>
 8004eac:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8004eb0:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8004eb4:	2b0c      	cmp	r3, #12
 8004eb6:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004eba:	d015      	beq.n	8004ee8 <forward_lstm+0x884>
 8004ebc:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8004ec0:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8004ec4:	3b0d      	subs	r3, #13
 8004ec6:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004eca:	d00d      	beq.n	8004ee8 <forward_lstm+0x884>
 8004ecc:	ed92 6a0d 	vldr	s12, [r2, #52]	; 0x34
 8004ed0:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004eda:	d005      	beq.n	8004ee8 <forward_lstm+0x884>
 8004edc:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8004ee0:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8004ee4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004ee8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004eec:	f8c7 e0ac 	str.w	lr, [r7, #172]	; 0xac
 8004ef0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8004ef4:	ed0c 7a01 	vstr	s14, [ip, #-4]
 8004ef8:	ecb3 6a01 	vldmia	r3!, {s12}
 8004efc:	edde 7a00 	vldr	s15, [lr]
 8004f00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004f04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f08:	ecf3 6a01 	vldmia	r3!, {s13}
 8004f0c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004f10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f18:	ee36 7a87 	vadd.f32	s14, s13, s14
 8004f1c:	ed0c 7a01 	vstr	s14, [ip, #-4]
 8004f20:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8005210 <forward_lstm+0xbac>
 8004f24:	ed8b 8a00 	vstr	s16, [fp]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 8749 	beq.w	8005dc0 <forward_lstm+0x175c>
 8004f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f32:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004f36:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8004f3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f3e:	3340      	adds	r3, #64	; 0x40
 8004f40:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8004f44:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8004f48:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8004f4c:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8004f50:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8004f54:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8004f58:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8004f5c:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8004f60:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8004f64:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8004f68:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8004f6c:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8004f70:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8004f74:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004f78:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8004f7c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004f80:	3910      	subs	r1, #16
 8004f82:	290f      	cmp	r1, #15
 8004f84:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8004f88:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8004f8c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8004f90:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8004f94:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8004f98:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8004f9c:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8004fa0:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8004fa4:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8004fa8:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8004fac:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004fb0:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8004fb4:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8004fb8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004fbc:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8004fc0:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8004fc4:	eee3 7a23 	vfma.f32	s15, s6, s7
 8004fc8:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8004fcc:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8004fd0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8004fd4:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8004fd8:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8004fdc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8004fe0:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8004fe4:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8004fe8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8004fec:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8004ff0:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8004ff4:	eee1 7a21 	vfma.f32	s15, s2, s3
 8004ff8:	eee2 7a22 	vfma.f32	s15, s4, s5
 8004ffc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005000:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005004:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005008:	eee6 7a26 	vfma.f32	s15, s12, s13
 800500c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005010:	d896      	bhi.n	8004f40 <forward_lstm+0x8dc>
 8005012:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005016:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800501a:	4413      	add	r3, r2
 800501c:	2d00      	cmp	r5, #0
 800501e:	d076      	beq.n	800510e <forward_lstm+0xaaa>
 8005020:	edd4 6a00 	vldr	s13, [r4]
 8005024:	edd3 7a00 	vldr	s15, [r3]
 8005028:	2d01      	cmp	r5, #1
 800502a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800502e:	d06e      	beq.n	800510e <forward_lstm+0xaaa>
 8005030:	edd4 6a01 	vldr	s13, [r4, #4]
 8005034:	edd3 7a01 	vldr	s15, [r3, #4]
 8005038:	2d02      	cmp	r5, #2
 800503a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800503e:	d066      	beq.n	800510e <forward_lstm+0xaaa>
 8005040:	edd4 6a02 	vldr	s13, [r4, #8]
 8005044:	edd3 7a02 	vldr	s15, [r3, #8]
 8005048:	2d03      	cmp	r5, #3
 800504a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800504e:	d05e      	beq.n	800510e <forward_lstm+0xaaa>
 8005050:	edd4 6a03 	vldr	s13, [r4, #12]
 8005054:	edd3 7a03 	vldr	s15, [r3, #12]
 8005058:	2d04      	cmp	r5, #4
 800505a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800505e:	d056      	beq.n	800510e <forward_lstm+0xaaa>
 8005060:	edd4 6a04 	vldr	s13, [r4, #16]
 8005064:	edd3 7a04 	vldr	s15, [r3, #16]
 8005068:	2d05      	cmp	r5, #5
 800506a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800506e:	d04e      	beq.n	800510e <forward_lstm+0xaaa>
 8005070:	edd4 6a05 	vldr	s13, [r4, #20]
 8005074:	edd3 7a05 	vldr	s15, [r3, #20]
 8005078:	2d06      	cmp	r5, #6
 800507a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800507e:	d046      	beq.n	800510e <forward_lstm+0xaaa>
 8005080:	edd4 6a06 	vldr	s13, [r4, #24]
 8005084:	edd3 7a06 	vldr	s15, [r3, #24]
 8005088:	2d07      	cmp	r5, #7
 800508a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800508e:	d03e      	beq.n	800510e <forward_lstm+0xaaa>
 8005090:	edd4 6a07 	vldr	s13, [r4, #28]
 8005094:	edd3 7a07 	vldr	s15, [r3, #28]
 8005098:	2d08      	cmp	r5, #8
 800509a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800509e:	d036      	beq.n	800510e <forward_lstm+0xaaa>
 80050a0:	edd4 6a08 	vldr	s13, [r4, #32]
 80050a4:	edd3 7a08 	vldr	s15, [r3, #32]
 80050a8:	2d09      	cmp	r5, #9
 80050aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050ae:	d02e      	beq.n	800510e <forward_lstm+0xaaa>
 80050b0:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 80050b4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80050b8:	2d0a      	cmp	r5, #10
 80050ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050be:	d026      	beq.n	800510e <forward_lstm+0xaaa>
 80050c0:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 80050c4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80050c8:	2d0b      	cmp	r5, #11
 80050ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050ce:	d01e      	beq.n	800510e <forward_lstm+0xaaa>
 80050d0:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80050d4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80050d8:	2d0c      	cmp	r5, #12
 80050da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050de:	d016      	beq.n	800510e <forward_lstm+0xaaa>
 80050e0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80050e4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80050e8:	f1b5 020d 	subs.w	r2, r5, #13
 80050ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80050f0:	d00d      	beq.n	800510e <forward_lstm+0xaaa>
 80050f2:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 80050f6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80050fa:	2a01      	cmp	r2, #1
 80050fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005100:	d005      	beq.n	800510e <forward_lstm+0xaaa>
 8005102:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005106:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 800510a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800510e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005112:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8005210 <forward_lstm+0xbac>
 8005116:	ed8b 7a00 	vstr	s14, [fp]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 8648 	beq.w	8005db0 <forward_lstm+0x174c>
 8005120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005124:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005128:	3340      	adds	r3, #64	; 0x40
 800512a:	3240      	adds	r2, #64	; 0x40
 800512c:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8005130:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 8005134:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8005138:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 800513c:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 8005140:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8005144:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 8005148:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 800514c:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 8005150:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 8005154:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8005158:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 800515c:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8005160:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005164:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8005168:	eee5 7a86 	vfma.f32	s15, s11, s12
 800516c:	3340      	adds	r3, #64	; 0x40
 800516e:	3240      	adds	r2, #64	; 0x40
 8005170:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8005174:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8005178:	eee5 7a25 	vfma.f32	s15, s10, s11
 800517c:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 8005180:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8005184:	eee4 7a06 	vfma.f32	s15, s8, s12
 8005188:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 800518c:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 8005190:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005194:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8005198:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 800519c:	eee5 7a86 	vfma.f32	s15, s11, s12
 80051a0:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 80051a4:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 80051a8:	eee2 7a83 	vfma.f32	s15, s5, s6
 80051ac:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 80051b0:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80051b4:	eee3 7a84 	vfma.f32	s15, s7, s8
 80051b8:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 80051bc:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80051c0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80051c4:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 80051c8:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80051cc:	eee5 7a86 	vfma.f32	s15, s11, s12
 80051d0:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 80051d4:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80051d8:	eee0 7a81 	vfma.f32	s15, s1, s2
 80051dc:	4283      	cmp	r3, r0
 80051de:	eee1 7a82 	vfma.f32	s15, s3, s4
 80051e2:	eee2 7a83 	vfma.f32	s15, s5, s6
 80051e6:	eee3 7a84 	vfma.f32	s15, s7, s8
 80051ea:	eee4 7a85 	vfma.f32	s15, s9, s10
 80051ee:	eee5 7a86 	vfma.f32	s15, s11, s12
 80051f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80051f6:	d199      	bne.n	800512c <forward_lstm+0xac8>
 80051f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051fc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005200:	189a      	adds	r2, r3, r2
 8005202:	2e00      	cmp	r6, #0
 8005204:	d07c      	beq.n	8005300 <forward_lstm+0xc9c>
 8005206:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800520a:	4633      	mov	r3, r6
 800520c:	e002      	b.n	8005214 <forward_lstm+0xbb0>
 800520e:	bf00      	nop
 8005210:	00000000 	.word	0x00000000
 8005214:	ed91 6a00 	vldr	s12, [r1]
 8005218:	edd2 7a00 	vldr	s15, [r2]
 800521c:	2b01      	cmp	r3, #1
 800521e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005222:	d06d      	beq.n	8005300 <forward_lstm+0xc9c>
 8005224:	ed91 6a01 	vldr	s12, [r1, #4]
 8005228:	edd2 7a01 	vldr	s15, [r2, #4]
 800522c:	2b02      	cmp	r3, #2
 800522e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005232:	d065      	beq.n	8005300 <forward_lstm+0xc9c>
 8005234:	ed91 6a02 	vldr	s12, [r1, #8]
 8005238:	edd2 7a02 	vldr	s15, [r2, #8]
 800523c:	2b03      	cmp	r3, #3
 800523e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005242:	d05d      	beq.n	8005300 <forward_lstm+0xc9c>
 8005244:	ed91 6a03 	vldr	s12, [r1, #12]
 8005248:	edd2 7a03 	vldr	s15, [r2, #12]
 800524c:	2b04      	cmp	r3, #4
 800524e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005252:	d055      	beq.n	8005300 <forward_lstm+0xc9c>
 8005254:	ed91 6a04 	vldr	s12, [r1, #16]
 8005258:	edd2 7a04 	vldr	s15, [r2, #16]
 800525c:	2b05      	cmp	r3, #5
 800525e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005262:	d04d      	beq.n	8005300 <forward_lstm+0xc9c>
 8005264:	ed91 6a05 	vldr	s12, [r1, #20]
 8005268:	edd2 7a05 	vldr	s15, [r2, #20]
 800526c:	2b06      	cmp	r3, #6
 800526e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005272:	d045      	beq.n	8005300 <forward_lstm+0xc9c>
 8005274:	ed91 6a06 	vldr	s12, [r1, #24]
 8005278:	edd2 7a06 	vldr	s15, [r2, #24]
 800527c:	2b07      	cmp	r3, #7
 800527e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005282:	d03d      	beq.n	8005300 <forward_lstm+0xc9c>
 8005284:	ed91 6a07 	vldr	s12, [r1, #28]
 8005288:	edd2 7a07 	vldr	s15, [r2, #28]
 800528c:	2b08      	cmp	r3, #8
 800528e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005292:	d035      	beq.n	8005300 <forward_lstm+0xc9c>
 8005294:	ed91 6a08 	vldr	s12, [r1, #32]
 8005298:	edd2 7a08 	vldr	s15, [r2, #32]
 800529c:	2b09      	cmp	r3, #9
 800529e:	eee6 6a27 	vfma.f32	s13, s12, s15
 80052a2:	d02d      	beq.n	8005300 <forward_lstm+0xc9c>
 80052a4:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80052a8:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80052ac:	2b0a      	cmp	r3, #10
 80052ae:	eee6 6a27 	vfma.f32	s13, s12, s15
 80052b2:	d025      	beq.n	8005300 <forward_lstm+0xc9c>
 80052b4:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80052b8:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80052bc:	2b0b      	cmp	r3, #11
 80052be:	eee6 6a27 	vfma.f32	s13, s12, s15
 80052c2:	d01d      	beq.n	8005300 <forward_lstm+0xc9c>
 80052c4:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 80052c8:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80052cc:	2b0c      	cmp	r3, #12
 80052ce:	eee6 6a27 	vfma.f32	s13, s12, s15
 80052d2:	d015      	beq.n	8005300 <forward_lstm+0xc9c>
 80052d4:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80052d8:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80052dc:	3b0d      	subs	r3, #13
 80052de:	eee6 6a27 	vfma.f32	s13, s12, s15
 80052e2:	d00d      	beq.n	8005300 <forward_lstm+0xc9c>
 80052e4:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80052e8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	eee6 6a27 	vfma.f32	s13, s12, s15
 80052f2:	d005      	beq.n	8005300 <forward_lstm+0xc9c>
 80052f4:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 80052f8:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80052fc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005300:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005304:	f8c7 80a8 	str.w	r8, [r7, #168]	; 0xa8
 8005308:	ee36 7a87 	vadd.f32	s14, s13, s14
 800530c:	ed8b 7a00 	vstr	s14, [fp]
 8005310:	ecf3 6a01 	vldmia	r3!, {s13}
 8005314:	ed98 6a00 	vldr	s12, [r8]
 8005318:	edde 7a00 	vldr	s15, [lr]
 800531c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005320:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005328:	ee36 7a87 	vadd.f32	s14, s13, s14
 800532c:	ecab 7a01 	vstmia	fp!, {s14}
 8005330:	ed1f 7a49 	vldr	s14, [pc, #-292]	; 8005210 <forward_lstm+0xbac>
 8005334:	ed8a 8a00 	vstr	s16, [sl]
 8005338:	2b00      	cmp	r3, #0
 800533a:	f000 8535 	beq.w	8005da8 <forward_lstm+0x1744>
 800533e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005342:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005346:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800534a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800534e:	3340      	adds	r3, #64	; 0x40
 8005350:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8005354:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8005358:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 800535c:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8005360:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8005364:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8005368:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 800536c:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8005370:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8005374:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8005378:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800537c:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8005380:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8005384:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005388:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800538c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005390:	3910      	subs	r1, #16
 8005392:	290f      	cmp	r1, #15
 8005394:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8005398:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 800539c:	eee5 7a86 	vfma.f32	s15, s11, s12
 80053a0:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80053a4:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80053a8:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 80053ac:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 80053b0:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80053b4:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 80053b8:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 80053bc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80053c0:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 80053c4:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 80053c8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80053cc:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 80053d0:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 80053d4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80053d8:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80053dc:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80053e0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80053e4:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80053e8:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 80053ec:	eee5 7a25 	vfma.f32	s15, s10, s11
 80053f0:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80053f4:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80053f8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80053fc:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8005400:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8005404:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005408:	eee2 7a22 	vfma.f32	s15, s4, s5
 800540c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005410:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005414:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005418:	eee6 7a26 	vfma.f32	s15, s12, s13
 800541c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005420:	d896      	bhi.n	8005350 <forward_lstm+0xcec>
 8005422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005426:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800542a:	4413      	add	r3, r2
 800542c:	2d00      	cmp	r5, #0
 800542e:	d076      	beq.n	800551e <forward_lstm+0xeba>
 8005430:	edd4 6a00 	vldr	s13, [r4]
 8005434:	edd3 7a00 	vldr	s15, [r3]
 8005438:	2d01      	cmp	r5, #1
 800543a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800543e:	d06e      	beq.n	800551e <forward_lstm+0xeba>
 8005440:	edd4 6a01 	vldr	s13, [r4, #4]
 8005444:	edd3 7a01 	vldr	s15, [r3, #4]
 8005448:	2d02      	cmp	r5, #2
 800544a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800544e:	d066      	beq.n	800551e <forward_lstm+0xeba>
 8005450:	edd4 6a02 	vldr	s13, [r4, #8]
 8005454:	edd3 7a02 	vldr	s15, [r3, #8]
 8005458:	2d03      	cmp	r5, #3
 800545a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800545e:	d05e      	beq.n	800551e <forward_lstm+0xeba>
 8005460:	edd4 6a03 	vldr	s13, [r4, #12]
 8005464:	edd3 7a03 	vldr	s15, [r3, #12]
 8005468:	2d04      	cmp	r5, #4
 800546a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800546e:	d056      	beq.n	800551e <forward_lstm+0xeba>
 8005470:	edd4 6a04 	vldr	s13, [r4, #16]
 8005474:	edd3 7a04 	vldr	s15, [r3, #16]
 8005478:	2d05      	cmp	r5, #5
 800547a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800547e:	d04e      	beq.n	800551e <forward_lstm+0xeba>
 8005480:	edd4 6a05 	vldr	s13, [r4, #20]
 8005484:	edd3 7a05 	vldr	s15, [r3, #20]
 8005488:	2d06      	cmp	r5, #6
 800548a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800548e:	d046      	beq.n	800551e <forward_lstm+0xeba>
 8005490:	edd4 6a06 	vldr	s13, [r4, #24]
 8005494:	edd3 7a06 	vldr	s15, [r3, #24]
 8005498:	2d07      	cmp	r5, #7
 800549a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800549e:	d03e      	beq.n	800551e <forward_lstm+0xeba>
 80054a0:	edd4 6a07 	vldr	s13, [r4, #28]
 80054a4:	edd3 7a07 	vldr	s15, [r3, #28]
 80054a8:	2d08      	cmp	r5, #8
 80054aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054ae:	d036      	beq.n	800551e <forward_lstm+0xeba>
 80054b0:	edd4 6a08 	vldr	s13, [r4, #32]
 80054b4:	edd3 7a08 	vldr	s15, [r3, #32]
 80054b8:	2d09      	cmp	r5, #9
 80054ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054be:	d02e      	beq.n	800551e <forward_lstm+0xeba>
 80054c0:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 80054c4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80054c8:	2d0a      	cmp	r5, #10
 80054ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054ce:	d026      	beq.n	800551e <forward_lstm+0xeba>
 80054d0:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 80054d4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80054d8:	2d0b      	cmp	r5, #11
 80054da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054de:	d01e      	beq.n	800551e <forward_lstm+0xeba>
 80054e0:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80054e4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80054e8:	2d0c      	cmp	r5, #12
 80054ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80054ee:	d016      	beq.n	800551e <forward_lstm+0xeba>
 80054f0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80054f4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80054f8:	f1b5 020d 	subs.w	r2, r5, #13
 80054fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005500:	d00d      	beq.n	800551e <forward_lstm+0xeba>
 8005502:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8005506:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800550a:	2a01      	cmp	r2, #1
 800550c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005510:	d005      	beq.n	800551e <forward_lstm+0xeba>
 8005512:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005516:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 800551a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800551e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005522:	ed5f 6ac5 	vldr	s13, [pc, #-788]	; 8005210 <forward_lstm+0xbac>
 8005526:	ed8a 7a00 	vstr	s14, [sl]
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 8435 	beq.w	8005d9a <forward_lstm+0x1736>
 8005530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005534:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005538:	3340      	adds	r3, #64	; 0x40
 800553a:	3240      	adds	r2, #64	; 0x40
 800553c:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8005540:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 8005544:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8005548:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 800554c:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 8005550:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8005554:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 8005558:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 800555c:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 8005560:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 8005564:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8005568:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 800556c:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8005570:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005574:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8005578:	eee5 7a86 	vfma.f32	s15, s11, s12
 800557c:	3340      	adds	r3, #64	; 0x40
 800557e:	3240      	adds	r2, #64	; 0x40
 8005580:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8005584:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8005588:	eee5 7a25 	vfma.f32	s15, s10, s11
 800558c:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 8005590:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8005594:	eee4 7a06 	vfma.f32	s15, s8, s12
 8005598:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 800559c:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 80055a0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80055a4:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 80055a8:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 80055ac:	eee5 7a86 	vfma.f32	s15, s11, s12
 80055b0:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 80055b4:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 80055b8:	eee2 7a83 	vfma.f32	s15, s5, s6
 80055bc:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 80055c0:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80055c4:	eee3 7a84 	vfma.f32	s15, s7, s8
 80055c8:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 80055cc:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80055d0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80055d4:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 80055d8:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80055dc:	eee5 7a86 	vfma.f32	s15, s11, s12
 80055e0:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 80055e4:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80055e8:	eee0 7a81 	vfma.f32	s15, s1, s2
 80055ec:	4283      	cmp	r3, r0
 80055ee:	eee1 7a82 	vfma.f32	s15, s3, s4
 80055f2:	eee2 7a83 	vfma.f32	s15, s5, s6
 80055f6:	eee3 7a84 	vfma.f32	s15, s7, s8
 80055fa:	eee4 7a85 	vfma.f32	s15, s9, s10
 80055fe:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005602:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005606:	d199      	bne.n	800553c <forward_lstm+0xed8>
 8005608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800560c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005610:	189a      	adds	r2, r3, r2
 8005612:	2e00      	cmp	r6, #0
 8005614:	d078      	beq.n	8005708 <forward_lstm+0x10a4>
 8005616:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800561a:	4633      	mov	r3, r6
 800561c:	ed91 6a00 	vldr	s12, [r1]
 8005620:	edd2 7a00 	vldr	s15, [r2]
 8005624:	2b01      	cmp	r3, #1
 8005626:	eee6 6a27 	vfma.f32	s13, s12, s15
 800562a:	d06d      	beq.n	8005708 <forward_lstm+0x10a4>
 800562c:	ed91 6a01 	vldr	s12, [r1, #4]
 8005630:	edd2 7a01 	vldr	s15, [r2, #4]
 8005634:	2b02      	cmp	r3, #2
 8005636:	eee6 6a27 	vfma.f32	s13, s12, s15
 800563a:	d065      	beq.n	8005708 <forward_lstm+0x10a4>
 800563c:	ed91 6a02 	vldr	s12, [r1, #8]
 8005640:	edd2 7a02 	vldr	s15, [r2, #8]
 8005644:	2b03      	cmp	r3, #3
 8005646:	eee6 6a27 	vfma.f32	s13, s12, s15
 800564a:	d05d      	beq.n	8005708 <forward_lstm+0x10a4>
 800564c:	ed91 6a03 	vldr	s12, [r1, #12]
 8005650:	edd2 7a03 	vldr	s15, [r2, #12]
 8005654:	2b04      	cmp	r3, #4
 8005656:	eee6 6a27 	vfma.f32	s13, s12, s15
 800565a:	d055      	beq.n	8005708 <forward_lstm+0x10a4>
 800565c:	ed91 6a04 	vldr	s12, [r1, #16]
 8005660:	edd2 7a04 	vldr	s15, [r2, #16]
 8005664:	2b05      	cmp	r3, #5
 8005666:	eee6 6a27 	vfma.f32	s13, s12, s15
 800566a:	d04d      	beq.n	8005708 <forward_lstm+0x10a4>
 800566c:	ed91 6a05 	vldr	s12, [r1, #20]
 8005670:	edd2 7a05 	vldr	s15, [r2, #20]
 8005674:	2b06      	cmp	r3, #6
 8005676:	eee6 6a27 	vfma.f32	s13, s12, s15
 800567a:	d045      	beq.n	8005708 <forward_lstm+0x10a4>
 800567c:	ed91 6a06 	vldr	s12, [r1, #24]
 8005680:	edd2 7a06 	vldr	s15, [r2, #24]
 8005684:	2b07      	cmp	r3, #7
 8005686:	eee6 6a27 	vfma.f32	s13, s12, s15
 800568a:	d03d      	beq.n	8005708 <forward_lstm+0x10a4>
 800568c:	ed91 6a07 	vldr	s12, [r1, #28]
 8005690:	edd2 7a07 	vldr	s15, [r2, #28]
 8005694:	2b08      	cmp	r3, #8
 8005696:	eee6 6a27 	vfma.f32	s13, s12, s15
 800569a:	d035      	beq.n	8005708 <forward_lstm+0x10a4>
 800569c:	ed91 6a08 	vldr	s12, [r1, #32]
 80056a0:	edd2 7a08 	vldr	s15, [r2, #32]
 80056a4:	2b09      	cmp	r3, #9
 80056a6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80056aa:	d02d      	beq.n	8005708 <forward_lstm+0x10a4>
 80056ac:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80056b0:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80056b4:	2b0a      	cmp	r3, #10
 80056b6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80056ba:	d025      	beq.n	8005708 <forward_lstm+0x10a4>
 80056bc:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80056c0:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80056c4:	2b0b      	cmp	r3, #11
 80056c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80056ca:	d01d      	beq.n	8005708 <forward_lstm+0x10a4>
 80056cc:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 80056d0:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80056d4:	2b0c      	cmp	r3, #12
 80056d6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80056da:	d015      	beq.n	8005708 <forward_lstm+0x10a4>
 80056dc:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80056e0:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80056e4:	3b0d      	subs	r3, #13
 80056e6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80056ea:	d00d      	beq.n	8005708 <forward_lstm+0x10a4>
 80056ec:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80056f0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80056fa:	d005      	beq.n	8005708 <forward_lstm+0x10a4>
 80056fc:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8005700:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005704:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005708:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800570c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005710:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8005714:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005718:	4411      	add	r1, r2
 800571a:	ed8a 7a00 	vstr	s14, [sl]
 800571e:	ed93 6a00 	vldr	s12, [r3]
 8005722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005726:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800572a:	edd3 6a00 	vldr	s13, [r3]
 800572e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005732:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8005736:	ecf3 7a01 	vldmia	r3!, {s15}
 800573a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800573e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005742:	4419      	add	r1, r3
 8005744:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 8005748:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800574c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005750:	4411      	add	r1, r2
 8005752:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8005756:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800575a:	4499      	add	r9, r3
 800575c:	4419      	add	r1, r3
 800575e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005762:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8005766:	ee37 7a87 	vadd.f32	s14, s15, s14
 800576a:	4413      	add	r3, r2
 800576c:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8005770:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005774:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800577c:	bf88      	it	hi
 800577e:	eeb0 7a68 	vmovhi.f32	s14, s17
 8005782:	459c      	cmp	ip, r3
 8005784:	f108 0804 	add.w	r8, r8, #4
 8005788:	f10e 0e04 	add.w	lr, lr, #4
 800578c:	ecaa 7a01 	vstmia	sl!, {s14}
 8005790:	f47f a9b5 	bne.w	8004afe <forward_lstm+0x49a>
 8005794:	f8d7 80a4 	ldr.w	r8, [r7, #164]	; 0xa4
 8005798:	f8d7 9070 	ldr.w	r9, [r7, #112]	; 0x70
 800579c:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 80057a0:	4642      	mov	r2, r8
 80057a2:	4608      	mov	r0, r1
 80057a4:	ee19 3a90 	vmov	r3, s19
 80057a8:	46a3      	mov	fp, r4
 80057aa:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 80057ac:	47a0      	blx	r4
 80057ae:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 80057b2:	4642      	mov	r2, r8
 80057b4:	4608      	mov	r0, r1
 80057b6:	ee19 3a90 	vmov	r3, s19
 80057ba:	47a0      	blx	r4
 80057bc:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 80057c0:	4642      	mov	r2, r8
 80057c2:	4608      	mov	r0, r1
 80057c4:	ee1a 3a90 	vmov	r3, s21
 80057c8:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80057ca:	47a0      	blx	r4
 80057cc:	1e6a      	subs	r2, r5, #1
 80057ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057d2:	1eaa      	subs	r2, r5, #2
 80057d4:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80057d8:	1eea      	subs	r2, r5, #3
 80057da:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80057de:	1f2a      	subs	r2, r5, #4
 80057e0:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80057e4:	1f6a      	subs	r2, r5, #5
 80057e6:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80057ea:	1faa      	subs	r2, r5, #6
 80057ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ee:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057f2:	e9d7 811f 	ldrd	r8, r1, [r7, #124]	; 0x7c
 80057f6:	1fea      	subs	r2, r5, #7
 80057f8:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80057fc:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8005800:	f8d7 e0a0 	ldr.w	lr, [r7, #160]	; 0xa0
 8005804:	f8d7 c028 	ldr.w	ip, [r7, #40]	; 0x28
 8005808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800580a:	f8c7 60f0 	str.w	r6, [r7, #240]	; 0xf0
 800580e:	f1a5 0208 	sub.w	r2, r5, #8
 8005812:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8005816:	465c      	mov	r4, fp
 8005818:	461e      	mov	r6, r3
 800581a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800581e:	ecf8 7a01 	vldmia	r8!, {s15}
 8005822:	ecb3 6a01 	vldmia	r3!, {s12}
 8005826:	ed99 7a00 	vldr	s14, [r9]
 800582a:	ecfe 6a01 	vldmia	lr!, {s13}
 800582e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005832:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800583e:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8005b5c <forward_lstm+0x14f8>
 8005842:	ece9 7a01 	vstmia	r9!, {s15}
 8005846:	eca1 8a01 	vstmia	r1!, {s16}
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 82a3 	beq.w	8005d96 <forward_lstm+0x1732>
 8005850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005854:	f8d7 b0d8 	ldr.w	fp, [r7, #216]	; 0xd8
 8005858:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800585c:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8005860:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8005864:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8005868:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 800586c:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8005870:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8005874:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8005878:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 800587c:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8005880:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8005884:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8005888:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800588c:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8005890:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8005894:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005898:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800589c:	eee6 7a26 	vfma.f32	s15, s12, s13
 80058a0:	f1ab 0b10 	sub.w	fp, fp, #16
 80058a4:	f1bb 0f0f 	cmp.w	fp, #15
 80058a8:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 80058ac:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 80058b0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80058b4:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80058b8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80058bc:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 80058c0:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 80058c4:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80058c8:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 80058cc:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 80058d0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80058d4:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 80058d8:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 80058dc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80058e0:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 80058e4:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 80058e8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80058ec:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80058f0:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80058f4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80058f8:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80058fc:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8005900:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005904:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8005908:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800590c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005910:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8005914:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8005918:	eee1 7a21 	vfma.f32	s15, s2, s3
 800591c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005920:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005924:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005928:	eee5 7a25 	vfma.f32	s15, s10, s11
 800592c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005934:	d894      	bhi.n	8005860 <forward_lstm+0x11fc>
 8005936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800593a:	18c3      	adds	r3, r0, r3
 800593c:	2d00      	cmp	r5, #0
 800593e:	f000 8085 	beq.w	8005a4c <forward_lstm+0x13e8>
 8005942:	edd4 6a00 	vldr	s13, [r4]
 8005946:	edd3 7a00 	vldr	s15, [r3]
 800594a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800594e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005952:	2a00      	cmp	r2, #0
 8005954:	d07a      	beq.n	8005a4c <forward_lstm+0x13e8>
 8005956:	edd4 6a01 	vldr	s13, [r4, #4]
 800595a:	edd3 7a01 	vldr	s15, [r3, #4]
 800595e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005962:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005966:	2a00      	cmp	r2, #0
 8005968:	d070      	beq.n	8005a4c <forward_lstm+0x13e8>
 800596a:	edd4 6a02 	vldr	s13, [r4, #8]
 800596e:	edd3 7a02 	vldr	s15, [r3, #8]
 8005972:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005976:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800597a:	2a00      	cmp	r2, #0
 800597c:	d066      	beq.n	8005a4c <forward_lstm+0x13e8>
 800597e:	edd4 6a03 	vldr	s13, [r4, #12]
 8005982:	edd3 7a03 	vldr	s15, [r3, #12]
 8005986:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800598a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800598e:	2a00      	cmp	r2, #0
 8005990:	d05c      	beq.n	8005a4c <forward_lstm+0x13e8>
 8005992:	edd4 6a04 	vldr	s13, [r4, #16]
 8005996:	edd3 7a04 	vldr	s15, [r3, #16]
 800599a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800599e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80059a2:	2a00      	cmp	r2, #0
 80059a4:	d052      	beq.n	8005a4c <forward_lstm+0x13e8>
 80059a6:	edd4 6a05 	vldr	s13, [r4, #20]
 80059aa:	edd3 7a05 	vldr	s15, [r3, #20]
 80059ae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80059b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80059b6:	2a00      	cmp	r2, #0
 80059b8:	d048      	beq.n	8005a4c <forward_lstm+0x13e8>
 80059ba:	edd4 6a06 	vldr	s13, [r4, #24]
 80059be:	edd3 7a06 	vldr	s15, [r3, #24]
 80059c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80059c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80059ca:	b3fa      	cbz	r2, 8005a4c <forward_lstm+0x13e8>
 80059cc:	edd4 6a07 	vldr	s13, [r4, #28]
 80059d0:	edd3 7a07 	vldr	s15, [r3, #28]
 80059d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80059dc:	b3b2      	cbz	r2, 8005a4c <forward_lstm+0x13e8>
 80059de:	edd4 6a08 	vldr	s13, [r4, #32]
 80059e2:	edd3 7a08 	vldr	s15, [r3, #32]
 80059e6:	2d09      	cmp	r5, #9
 80059e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80059ec:	d02e      	beq.n	8005a4c <forward_lstm+0x13e8>
 80059ee:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 80059f2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80059f6:	2d0a      	cmp	r5, #10
 80059f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80059fc:	d026      	beq.n	8005a4c <forward_lstm+0x13e8>
 80059fe:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8005a02:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005a06:	2d0b      	cmp	r5, #11
 8005a08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005a0c:	d01e      	beq.n	8005a4c <forward_lstm+0x13e8>
 8005a0e:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8005a12:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005a16:	2d0c      	cmp	r5, #12
 8005a18:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005a1c:	d016      	beq.n	8005a4c <forward_lstm+0x13e8>
 8005a1e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8005a22:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005a26:	f1b5 020d 	subs.w	r2, r5, #13
 8005a2a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005a2e:	d00d      	beq.n	8005a4c <forward_lstm+0x13e8>
 8005a30:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8005a34:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005a38:	2a01      	cmp	r2, #1
 8005a3a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005a3e:	d005      	beq.n	8005a4c <forward_lstm+0x13e8>
 8005a40:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005a44:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8005a48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005a4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a50:	eddf 6a42 	vldr	s13, [pc, #264]	; 8005b5c <forward_lstm+0x14f8>
 8005a54:	ed01 7a01 	vstr	s14, [r1, #-4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 8196 	beq.w	8005d8a <forward_lstm+0x1726>
 8005a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a62:	f8d7 b0a4 	ldr.w	fp, [r7, #164]	; 0xa4
 8005a66:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005a6a:	f10c 0340 	add.w	r3, ip, #64	; 0x40
 8005a6e:	ed13 5a0f 	vldr	s10, [r3, #-60]	; 0xffffffc4
 8005a72:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8005a76:	ed52 5a10 	vldr	s11, [r2, #-64]	; 0xffffffc0
 8005a7a:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 8005a7e:	ed12 4a0d 	vldr	s8, [r2, #-52]	; 0xffffffcc
 8005a82:	ed52 4a0c 	vldr	s9, [r2, #-48]	; 0xffffffd0
 8005a86:	ed52 2a0a 	vldr	s5, [r2, #-40]	; 0xffffffd8
 8005a8a:	ed13 3a0a 	vldr	s6, [r3, #-40]	; 0xffffffd8
 8005a8e:	ed52 3a09 	vldr	s7, [r2, #-36]	; 0xffffffdc
 8005a92:	ed52 0a06 	vldr	s1, [r2, #-24]	; 0xffffffe8
 8005a96:	ed13 1a06 	vldr	s2, [r3, #-24]	; 0xffffffe8
 8005a9a:	ed52 1a05 	vldr	s3, [r2, #-20]	; 0xffffffec
 8005a9e:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8005aa2:	ee67 7a85 	vmul.f32	s15, s15, s10
 8005aa6:	ed12 5a0e 	vldr	s10, [r2, #-56]	; 0xffffffc8
 8005aaa:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005aae:	f1ab 0b10 	sub.w	fp, fp, #16
 8005ab2:	f1bb 0f0f 	cmp.w	fp, #15
 8005ab6:	ed53 5a0e 	vldr	s11, [r3, #-56]	; 0xffffffc8
 8005aba:	ed13 6a0d 	vldr	s12, [r3, #-52]	; 0xffffffcc
 8005abe:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005ac2:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005ac6:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005aca:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 8005ace:	ed52 5a1b 	vldr	s11, [r2, #-108]	; 0xffffff94
 8005ad2:	eee4 7a06 	vfma.f32	s15, s8, s12
 8005ad6:	ed13 6a1b 	vldr	s12, [r3, #-108]	; 0xffffff94
 8005ada:	ed13 4a19 	vldr	s8, [r3, #-100]	; 0xffffff9c
 8005ade:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005ae2:	ed52 4a18 	vldr	s9, [r2, #-96]	; 0xffffffa0
 8005ae6:	ed13 5a18 	vldr	s10, [r3, #-96]	; 0xffffffa0
 8005aea:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005aee:	ed52 5a17 	vldr	s11, [r2, #-92]	; 0xffffffa4
 8005af2:	ed13 6a17 	vldr	s12, [r3, #-92]	; 0xffffffa4
 8005af6:	eee2 7a83 	vfma.f32	s15, s5, s6
 8005afa:	ed52 2a14 	vldr	s5, [r2, #-80]	; 0xffffffb0
 8005afe:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 8005b02:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005b06:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 8005b0a:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 8005b0e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005b12:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 8005b16:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 8005b1a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005b1e:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 8005b22:	ed13 6a11 	vldr	s12, [r3, #-68]	; 0xffffffbc
 8005b26:	eee0 7a81 	vfma.f32	s15, s1, s2
 8005b2a:	eee1 7a82 	vfma.f32	s15, s3, s4
 8005b2e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8005b32:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005b36:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005b3a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005b3e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005b42:	d894      	bhi.n	8005a6e <forward_lstm+0x140a>
 8005b44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b48:	eb0c 0203 	add.w	r2, ip, r3
 8005b4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d07b      	beq.n	8005c4c <forward_lstm+0x15e8>
 8005b54:	f8d7 b0cc 	ldr.w	fp, [r7, #204]	; 0xcc
 8005b58:	e002      	b.n	8005b60 <forward_lstm+0x14fc>
 8005b5a:	bf00      	nop
 8005b5c:	00000000 	.word	0x00000000
 8005b60:	ed9b 6a00 	vldr	s12, [fp]
 8005b64:	edd2 7a00 	vldr	s15, [r2]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005b6e:	d06d      	beq.n	8005c4c <forward_lstm+0x15e8>
 8005b70:	ed9b 6a01 	vldr	s12, [fp, #4]
 8005b74:	edd2 7a01 	vldr	s15, [r2, #4]
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005b7e:	d065      	beq.n	8005c4c <forward_lstm+0x15e8>
 8005b80:	ed9b 6a02 	vldr	s12, [fp, #8]
 8005b84:	edd2 7a02 	vldr	s15, [r2, #8]
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005b8e:	d05d      	beq.n	8005c4c <forward_lstm+0x15e8>
 8005b90:	ed9b 6a03 	vldr	s12, [fp, #12]
 8005b94:	edd2 7a03 	vldr	s15, [r2, #12]
 8005b98:	2b04      	cmp	r3, #4
 8005b9a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005b9e:	d055      	beq.n	8005c4c <forward_lstm+0x15e8>
 8005ba0:	ed9b 6a04 	vldr	s12, [fp, #16]
 8005ba4:	edd2 7a04 	vldr	s15, [r2, #16]
 8005ba8:	2b05      	cmp	r3, #5
 8005baa:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005bae:	d04d      	beq.n	8005c4c <forward_lstm+0x15e8>
 8005bb0:	ed9b 6a05 	vldr	s12, [fp, #20]
 8005bb4:	edd2 7a05 	vldr	s15, [r2, #20]
 8005bb8:	2b06      	cmp	r3, #6
 8005bba:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005bbe:	d045      	beq.n	8005c4c <forward_lstm+0x15e8>
 8005bc0:	ed9b 6a06 	vldr	s12, [fp, #24]
 8005bc4:	edd2 7a06 	vldr	s15, [r2, #24]
 8005bc8:	2b07      	cmp	r3, #7
 8005bca:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005bce:	d03d      	beq.n	8005c4c <forward_lstm+0x15e8>
 8005bd0:	ed9b 6a07 	vldr	s12, [fp, #28]
 8005bd4:	edd2 7a07 	vldr	s15, [r2, #28]
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005bde:	d035      	beq.n	8005c4c <forward_lstm+0x15e8>
 8005be0:	ed9b 6a08 	vldr	s12, [fp, #32]
 8005be4:	edd2 7a08 	vldr	s15, [r2, #32]
 8005be8:	2b09      	cmp	r3, #9
 8005bea:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005bee:	d02d      	beq.n	8005c4c <forward_lstm+0x15e8>
 8005bf0:	ed9b 6a09 	vldr	s12, [fp, #36]	; 0x24
 8005bf4:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8005bf8:	2b0a      	cmp	r3, #10
 8005bfa:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005bfe:	d025      	beq.n	8005c4c <forward_lstm+0x15e8>
 8005c00:	ed9b 6a0a 	vldr	s12, [fp, #40]	; 0x28
 8005c04:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8005c08:	2b0b      	cmp	r3, #11
 8005c0a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005c0e:	d01d      	beq.n	8005c4c <forward_lstm+0x15e8>
 8005c10:	ed9b 6a0b 	vldr	s12, [fp, #44]	; 0x2c
 8005c14:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8005c18:	2b0c      	cmp	r3, #12
 8005c1a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005c1e:	d015      	beq.n	8005c4c <forward_lstm+0x15e8>
 8005c20:	ed9b 6a0c 	vldr	s12, [fp, #48]	; 0x30
 8005c24:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8005c28:	3b0d      	subs	r3, #13
 8005c2a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005c2e:	d00d      	beq.n	8005c4c <forward_lstm+0x15e8>
 8005c30:	ed9b 6a0d 	vldr	s12, [fp, #52]	; 0x34
 8005c34:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005c3e:	d005      	beq.n	8005c4c <forward_lstm+0x15e8>
 8005c40:	ed9b 6a0e 	vldr	s12, [fp, #56]	; 0x38
 8005c44:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005c48:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005c4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c50:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005c54:	4418      	add	r0, r3
 8005c56:	ed01 7a01 	vstr	s14, [r1, #-4]
 8005c5a:	ecb6 6a01 	vldmia	r6!, {s12}
 8005c5e:	ecfa 7a01 	vldmia	sl!, {s15}
 8005c62:	ed59 6a01 	vldr	s13, [r9, #-4]
 8005c66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c6a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005c6e:	449c      	add	ip, r3
 8005c70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c78:	459e      	cmp	lr, r3
 8005c7a:	ed01 7a01 	vstr	s14, [r1, #-4]
 8005c7e:	f47f adcc 	bne.w	800581a <forward_lstm+0x11b6>
 8005c82:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 8005c86:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8005c88:	f8d7 60f0 	ldr.w	r6, [r7, #240]	; 0xf0
 8005c8c:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 8005c90:	4608      	mov	r0, r1
 8005c92:	ee19 3a90 	vmov	r3, s19
 8005c96:	462a      	mov	r2, r5
 8005c98:	47a0      	blx	r4
 8005c9a:	ee1a 3a10 	vmov	r3, s20
 8005c9e:	462a      	mov	r2, r5
 8005ca0:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8005ca4:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8005ca6:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8005caa:	47a0      	blx	r4
 8005cac:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005cb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cb4:	6979      	ldr	r1, [r7, #20]
 8005cb6:	ecf3 7a01 	vldmia	r3!, {s15}
 8005cba:	ed92 7a00 	vldr	s14, [r2]
 8005cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cc2:	428b      	cmp	r3, r1
 8005cc4:	ece2 7a01 	vstmia	r2!, {s15}
 8005cc8:	d1f5      	bne.n	8005cb6 <forward_lstm+0x1652>
 8005cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cce:	899b      	ldrh	r3, [r3, #12]
 8005cd0:	b163      	cbz	r3, 8005cec <forward_lstm+0x1688>
 8005cd2:	e9d7 9503 	ldrd	r9, r5, [r7, #12]
 8005cd6:	2400      	movs	r4, #0
 8005cd8:	46a8      	mov	r8, r5
 8005cda:	f859 5f04 	ldr.w	r5, [r9, #4]!
 8005cde:	3401      	adds	r4, #1
 8005ce0:	2d00      	cmp	r5, #0
 8005ce2:	d13f      	bne.n	8005d64 <forward_lstm+0x1700>
 8005ce4:	42a3      	cmp	r3, r4
 8005ce6:	f108 0804 	add.w	r8, r8, #4
 8005cea:	dcf6      	bgt.n	8005cda <forward_lstm+0x1676>
 8005cec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cee:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8005cf2:	428a      	cmp	r2, r1
 8005cf4:	f340 809f 	ble.w	8005e36 <forward_lstm+0x17d2>
 8005cf8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005cfc:	69b9      	ldr	r1, [r7, #24]
 8005cfe:	440a      	add	r2, r1
 8005d00:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005d04:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005d08:	2a00      	cmp	r2, #0
 8005d0a:	f2c0 8094 	blt.w	8005e36 <forward_lstm+0x17d2>
 8005d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d12:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8005d16:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8005d1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d1e:	f7fe be57 	b.w	80049d0 <forward_lstm+0x36c>
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	4628      	mov	r0, r5
 8005d26:	69d9      	ldr	r1, [r3, #28]
 8005d28:	f000 fbd4 	bl	80064d4 <memcpy>
 8005d2c:	ee19 2a10 	vmov	r2, s18
 8005d30:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005d34:	2100      	movs	r1, #0
 8005d36:	f000 fbdb 	bl	80064f0 <memset>
 8005d3a:	f7fe bd97 	b.w	800486c <forward_lstm+0x208>
 8005d3e:	ee19 2a10 	vmov	r2, s18
 8005d42:	4619      	mov	r1, r3
 8005d44:	4628      	mov	r0, r5
 8005d46:	f000 fbd3 	bl	80064f0 <memset>
 8005d4a:	ee19 2a10 	vmov	r2, s18
 8005d4e:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8005d52:	4649      	mov	r1, r9
 8005d54:	f1b9 0f00 	cmp.w	r9, #0
 8005d58:	f47e ad7f 	bne.w	800485a <forward_lstm+0x1f6>
 8005d5c:	f000 fbc8 	bl	80064f0 <memset>
 8005d60:	f7fe bd7d 	b.w	800485e <forward_lstm+0x1fa>
 8005d64:	f8d8 3000 	ldr.w	r3, [r8]
 8005d68:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	ee19 2a10 	vmov	r2, s18
 8005d72:	f000 fbaf 	bl	80064d4 <memcpy>
 8005d76:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 8005d7a:	f848 3b04 	str.w	r3, [r8], #4
 8005d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d82:	899b      	ldrh	r3, [r3, #12]
 8005d84:	42a3      	cmp	r3, r4
 8005d86:	dca8      	bgt.n	8005cda <forward_lstm+0x1676>
 8005d88:	e7b0      	b.n	8005cec <forward_lstm+0x1688>
 8005d8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d8e:	f8d7 b0fc 	ldr.w	fp, [r7, #252]	; 0xfc
 8005d92:	4662      	mov	r2, ip
 8005d94:	e6e4      	b.n	8005b60 <forward_lstm+0x14fc>
 8005d96:	4603      	mov	r3, r0
 8005d98:	e5d0      	b.n	800593c <forward_lstm+0x12d8>
 8005d9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d9e:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8005da2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005da6:	e439      	b.n	800561c <forward_lstm+0xfb8>
 8005da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dac:	f7ff bb3e 	b.w	800542c <forward_lstm+0xdc8>
 8005db0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005db4:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8005db8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005dbc:	f7ff ba2a 	b.w	8005214 <forward_lstm+0xbb0>
 8005dc0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005dc4:	f7ff b92a 	b.w	800501c <forward_lstm+0x9b8>
 8005dc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005dcc:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8005dd0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8005dd4:	f7ff b812 	b.w	8004dfc <forward_lstm+0x798>
 8005dd8:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 8005ddc:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8005de0:	464b      	mov	r3, r9
 8005de2:	f7fe bf13 	b.w	8004c0c <forward_lstm+0x5a8>
 8005de6:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8005dea:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8005dec:	ee19 3a90 	vmov	r3, s19
 8005df0:	4608      	mov	r0, r1
 8005df2:	4690      	mov	r8, r2
 8005df4:	47a0      	blx	r4
 8005df6:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8005dfa:	ee19 3a90 	vmov	r3, s19
 8005dfe:	4642      	mov	r2, r8
 8005e00:	4608      	mov	r0, r1
 8005e02:	47a0      	blx	r4
 8005e04:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8005e08:	ee1a 3a90 	vmov	r3, s21
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	4608      	mov	r0, r1
 8005e10:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8005e12:	47a8      	blx	r5
 8005e14:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 8005e18:	ee19 3a90 	vmov	r3, s19
 8005e1c:	4642      	mov	r2, r8
 8005e1e:	4608      	mov	r0, r1
 8005e20:	47a0      	blx	r4
 8005e22:	ee1a 3a10 	vmov	r3, s20
 8005e26:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8005e28:	4642      	mov	r2, r8
 8005e2a:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8005e2e:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8005e32:	47a0      	blx	r4
 8005e34:	e749      	b.n	8005cca <forward_lstm+0x1666>
 8005e36:	b353      	cbz	r3, 8005e8e <forward_lstm+0x182a>
 8005e38:	e9d7 5403 	ldrd	r5, r4, [r7, #12]
 8005e3c:	f8d7 808c 	ldr.w	r8, [r7, #140]	; 0x8c
 8005e40:	f8d7 9090 	ldr.w	r9, [r7, #144]	; 0x90
 8005e44:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8005e48:	ee19 ba10 	vmov	fp, s18
 8005e4c:	2600      	movs	r6, #0
 8005e4e:	e00b      	b.n	8005e68 <forward_lstm+0x1804>
 8005e50:	6820      	ldr	r0, [r4, #0]
 8005e52:	465a      	mov	r2, fp
 8005e54:	4649      	mov	r1, r9
 8005e56:	f000 fb3d 	bl	80064d4 <memcpy>
 8005e5a:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005e5e:	3601      	adds	r6, #1
 8005e60:	42b3      	cmp	r3, r6
 8005e62:	f104 0404 	add.w	r4, r4, #4
 8005e66:	dd12      	ble.n	8005e8e <forward_lstm+0x182a>
 8005e68:	f855 2f04 	ldr.w	r2, [r5, #4]!
 8005e6c:	2a00      	cmp	r2, #0
 8005e6e:	d1f6      	bne.n	8005e5e <forward_lstm+0x17fa>
 8005e70:	3b01      	subs	r3, #1
 8005e72:	42b3      	cmp	r3, r6
 8005e74:	d1ec      	bne.n	8005e50 <forward_lstm+0x17ec>
 8005e76:	f89a 303d 	ldrb.w	r3, [sl, #61]	; 0x3d
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0e8      	beq.n	8005e50 <forward_lstm+0x17ec>
 8005e7e:	6820      	ldr	r0, [r4, #0]
 8005e80:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005e82:	465a      	mov	r2, fp
 8005e84:	f000 fb26 	bl	80064d4 <memcpy>
 8005e88:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005e8c:	e7e7      	b.n	8005e5e <forward_lstm+0x17fa>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	b18b      	cbz	r3, 8005eb6 <forward_lstm+0x1852>
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	69db      	ldr	r3, [r3, #28]
 8005e96:	b173      	cbz	r3, 8005eb6 <forward_lstm+0x1852>
 8005e98:	ee19 2a10 	vmov	r2, s18
 8005e9c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 fb18 	bl	80064d4 <memcpy>
 8005ea4:	ee19 4a10 	vmov	r4, s18
 8005ea8:	ee19 2a10 	vmov	r2, s18
 8005eac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005eb0:	4420      	add	r0, r4
 8005eb2:	f000 fb0f 	bl	80064d4 <memcpy>
 8005eb6:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	ecbd 8b06 	vpop	{d8-d10}
 8005ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ec4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ec8:	2301      	movs	r3, #1
 8005eca:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ecc:	4613      	mov	r3, r2
 8005ece:	f7fe bced 	b.w	80048ac <forward_lstm+0x248>
 8005ed2:	ee09 1a90 	vmov	s19, r1
 8005ed6:	ee0a 1a90 	vmov	s21, r1
 8005eda:	ee0a 1a10 	vmov	s20, r1
 8005ede:	4689      	mov	r9, r1
 8005ee0:	f7fe bc44 	b.w	800476c <forward_lstm+0x108>
 8005ee4:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8005ee8:	468b      	mov	fp, r1
 8005eea:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8005eee:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8005ef2:	f7fe bbe2 	b.w	80046ba <forward_lstm+0x56>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	deff      	udf	#255	; 0xff

08005efc <nl_func_sigmoid_array_f32>:
 8005efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efe:	ed2d 8b02 	vpush	{d8}
 8005f02:	698f      	ldr	r7, [r1, #24]
 8005f04:	6980      	ldr	r0, [r0, #24]
 8005f06:	68b9      	ldr	r1, [r7, #8]
 8005f08:	6886      	ldr	r6, [r0, #8]
 8005f0a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005f0e:	3a01      	subs	r2, #1
 8005f10:	0093      	lsls	r3, r2, #2
 8005f12:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005f16:	4291      	cmp	r1, r2
 8005f18:	d815      	bhi.n	8005f46 <nl_func_sigmoid_array_f32+0x4a>
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	1d14      	adds	r4, r2, #4
 8005f1e:	441e      	add	r6, r3
 8005f20:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8005f24:	4625      	mov	r5, r4
 8005f26:	ed34 0a01 	vldmdb	r4!, {s0}
 8005f2a:	eeb1 0a40 	vneg.f32	s0, s0
 8005f2e:	f001 fb45 	bl	80075bc <expf>
 8005f32:	ee30 0a08 	vadd.f32	s0, s0, s16
 8005f36:	3d08      	subs	r5, #8
 8005f38:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8005f3c:	ed66 7a01 	vstmdb	r6!, {s15}
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	42ab      	cmp	r3, r5
 8005f44:	d9ee      	bls.n	8005f24 <nl_func_sigmoid_array_f32+0x28>
 8005f46:	ecbd 8b02 	vpop	{d8}
 8005f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f4c <nl_func_tanh_array_f32>:
 8005f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4e:	698f      	ldr	r7, [r1, #24]
 8005f50:	6980      	ldr	r0, [r0, #24]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	6886      	ldr	r6, [r0, #8]
 8005f56:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005f5a:	3a01      	subs	r2, #1
 8005f5c:	0093      	lsls	r3, r2, #2
 8005f5e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005f62:	4291      	cmp	r1, r2
 8005f64:	d80d      	bhi.n	8005f82 <nl_func_tanh_array_f32+0x36>
 8005f66:	3304      	adds	r3, #4
 8005f68:	1d14      	adds	r4, r2, #4
 8005f6a:	441e      	add	r6, r3
 8005f6c:	4625      	mov	r5, r4
 8005f6e:	ed34 0a01 	vldmdb	r4!, {s0}
 8005f72:	f001 fad1 	bl	8007518 <tanhf>
 8005f76:	ed26 0a01 	vstmdb	r6!, {s0}
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	3d08      	subs	r5, #8
 8005f7e:	42ab      	cmp	r3, r5
 8005f80:	d9f4      	bls.n	8005f6c <nl_func_tanh_array_f32+0x20>
 8005f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f84 <ai_check_custom_types>:
 8005f84:	b082      	sub	sp, #8
 8005f86:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <ai_check_custom_types+0x50>)
 8005f88:	9301      	str	r3, [sp, #4]
 8005f8a:	b118      	cbz	r0, 8005f94 <ai_check_custom_types+0x10>
 8005f8c:	7803      	ldrb	r3, [r0, #0]
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d002      	beq.n	8005f98 <ai_check_custom_types+0x14>
 8005f92:	2000      	movs	r0, #0
 8005f94:	b002      	add	sp, #8
 8005f96:	4770      	bx	lr
 8005f98:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d004      	beq.n	8005faa <ai_check_custom_types+0x26>
 8005fa0:	2001      	movs	r0, #1
 8005fa2:	f080 0001 	eor.w	r0, r0, #1
 8005fa6:	b002      	add	sp, #8
 8005fa8:	4770      	bx	lr
 8005faa:	7842      	ldrb	r2, [r0, #1]
 8005fac:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	f100 0001 	add.w	r0, r0, #1
 8005fb6:	d1f3      	bne.n	8005fa0 <ai_check_custom_types+0x1c>
 8005fb8:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005fbc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d1ed      	bne.n	8005fa0 <ai_check_custom_types+0x1c>
 8005fc4:	7842      	ldrb	r2, [r0, #1]
 8005fc6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d1e8      	bne.n	8005fa0 <ai_check_custom_types+0x1c>
 8005fce:	2000      	movs	r0, #0
 8005fd0:	e7e7      	b.n	8005fa2 <ai_check_custom_types+0x1e>
 8005fd2:	bf00      	nop
 8005fd4:	84048403 	.word	0x84048403

08005fd8 <ai_layers_init_all>:
 8005fd8:	4601      	mov	r1, r0
 8005fda:	2000      	movs	r0, #0
 8005fdc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005fde:	b143      	cbz	r3, 8005ff2 <ai_layers_init_all+0x1a>
 8005fe0:	691a      	ldr	r2, [r3, #16]
 8005fe2:	60d9      	str	r1, [r3, #12]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	f100 0001 	add.w	r0, r0, #1
 8005fea:	d002      	beq.n	8005ff2 <ai_layers_init_all+0x1a>
 8005fec:	b10a      	cbz	r2, 8005ff2 <ai_layers_init_all+0x1a>
 8005fee:	4613      	mov	r3, r2
 8005ff0:	e7f5      	b.n	8005fde <ai_layers_init_all+0x6>
 8005ff2:	4770      	bx	lr

08005ff4 <ai_layers_post_init_all>:
 8005ff4:	b538      	push	{r3, r4, r5, lr}
 8005ff6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005ff8:	2500      	movs	r5, #0
 8005ffa:	b16c      	cbz	r4, 8006018 <ai_layers_post_init_all+0x24>
 8005ffc:	6863      	ldr	r3, [r4, #4]
 8005ffe:	07db      	lsls	r3, r3, #31
 8006000:	d504      	bpl.n	800600c <ai_layers_post_init_all+0x18>
 8006002:	6a23      	ldr	r3, [r4, #32]
 8006004:	4620      	mov	r0, r4
 8006006:	b10b      	cbz	r3, 800600c <ai_layers_post_init_all+0x18>
 8006008:	4798      	blx	r3
 800600a:	3501      	adds	r5, #1
 800600c:	6923      	ldr	r3, [r4, #16]
 800600e:	42a3      	cmp	r3, r4
 8006010:	d002      	beq.n	8006018 <ai_layers_post_init_all+0x24>
 8006012:	b10b      	cbz	r3, 8006018 <ai_layers_post_init_all+0x24>
 8006014:	461c      	mov	r4, r3
 8006016:	e7f0      	b.n	8005ffa <ai_layers_post_init_all+0x6>
 8006018:	4628      	mov	r0, r5
 800601a:	bd38      	pop	{r3, r4, r5, pc}

0800601c <ai_layers_forward_all>:
 800601c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006020:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8006024:	4604      	mov	r4, r0
 8006026:	f1b8 0f00 	cmp.w	r8, #0
 800602a:	d02b      	beq.n	8006084 <ai_layers_forward_all+0x68>
 800602c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800602e:	6381      	str	r1, [r0, #56]	; 0x38
 8006030:	b321      	cbz	r1, 800607c <ai_layers_forward_all+0x60>
 8006032:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006034:	2001      	movs	r0, #1
 8006036:	47c0      	blx	r8
 8006038:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800603a:	b1fe      	cbz	r6, 800607c <ai_layers_forward_all+0x60>
 800603c:	2700      	movs	r7, #0
 800603e:	4631      	mov	r1, r6
 8006040:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006042:	2002      	movs	r0, #2
 8006044:	47c0      	blx	r8
 8006046:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8006048:	4628      	mov	r0, r5
 800604a:	696b      	ldr	r3, [r5, #20]
 800604c:	4798      	blx	r3
 800604e:	692e      	ldr	r6, [r5, #16]
 8006050:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006052:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006054:	42b5      	cmp	r5, r6
 8006056:	f04f 0003 	mov.w	r0, #3
 800605a:	d007      	beq.n	800606c <ai_layers_forward_all+0x50>
 800605c:	47c0      	blx	r8
 800605e:	3701      	adds	r7, #1
 8006060:	63a6      	str	r6, [r4, #56]	; 0x38
 8006062:	2e00      	cmp	r6, #0
 8006064:	d1eb      	bne.n	800603e <ai_layers_forward_all+0x22>
 8006066:	4638      	mov	r0, r7
 8006068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800606c:	2003      	movs	r0, #3
 800606e:	47c0      	blx	r8
 8006070:	2300      	movs	r3, #0
 8006072:	3701      	adds	r7, #1
 8006074:	63a3      	str	r3, [r4, #56]	; 0x38
 8006076:	4638      	mov	r0, r7
 8006078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800607c:	2700      	movs	r7, #0
 800607e:	4638      	mov	r0, r7
 8006080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006084:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8006086:	6385      	str	r5, [r0, #56]	; 0x38
 8006088:	2d00      	cmp	r5, #0
 800608a:	d0f7      	beq.n	800607c <ai_layers_forward_all+0x60>
 800608c:	4647      	mov	r7, r8
 800608e:	696b      	ldr	r3, [r5, #20]
 8006090:	4628      	mov	r0, r5
 8006092:	4798      	blx	r3
 8006094:	462b      	mov	r3, r5
 8006096:	692d      	ldr	r5, [r5, #16]
 8006098:	429d      	cmp	r5, r3
 800609a:	d004      	beq.n	80060a6 <ai_layers_forward_all+0x8a>
 800609c:	63a5      	str	r5, [r4, #56]	; 0x38
 800609e:	3701      	adds	r7, #1
 80060a0:	2d00      	cmp	r5, #0
 80060a2:	d1f4      	bne.n	800608e <ai_layers_forward_all+0x72>
 80060a4:	e7df      	b.n	8006066 <ai_layers_forward_all+0x4a>
 80060a6:	2300      	movs	r3, #0
 80060a8:	63a3      	str	r3, [r4, #56]	; 0x38
 80060aa:	3701      	adds	r7, #1
 80060ac:	e7db      	b.n	8006066 <ai_layers_forward_all+0x4a>
 80060ae:	bf00      	nop

080060b0 <lite_dense_if32of32wf32>:
 80060b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b4:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 80060b8:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 80060bc:	4287      	cmp	r7, r0
 80060be:	f240 8106 	bls.w	80062ce <lite_dense_if32of32wf32+0x21e>
 80060c2:	f1a6 0810 	sub.w	r8, r6, #16
 80060c6:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80060ca:	f108 0801 	add.w	r8, r8, #1
 80060ce:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 80060d2:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80060d6:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 80060da:	4605      	mov	r5, r0
 80060dc:	f006 0a0f 	and.w	sl, r6, #15
 80060e0:	2e0f      	cmp	r6, #15
 80060e2:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80062f4 <lite_dense_if32of32wf32+0x244>
 80060e6:	f240 8101 	bls.w	80062ec <lite_dense_if32of32wf32+0x23c>
 80060ea:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 80060ee:	f102 0440 	add.w	r4, r2, #64	; 0x40
 80060f2:	46b6      	mov	lr, r6
 80060f4:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 80060f8:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 80060fc:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8006100:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8006104:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8006108:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 800610c:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8006110:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8006114:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8006118:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 800611c:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8006120:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8006124:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8006128:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800612c:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8006130:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006134:	f1ae 0e10 	sub.w	lr, lr, #16
 8006138:	f1be 0f0f 	cmp.w	lr, #15
 800613c:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8006140:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8006144:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006148:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800614c:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8006150:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8006154:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8006158:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800615c:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8006160:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8006164:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006168:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 800616c:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8006170:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006174:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8006178:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 800617c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006180:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8006184:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8006188:	eee4 7a24 	vfma.f32	s15, s8, s9
 800618c:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8006190:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8006194:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006198:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800619c:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 80061a0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80061a4:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 80061a8:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 80061ac:	eee1 7a21 	vfma.f32	s15, s2, s3
 80061b0:	eee2 7a22 	vfma.f32	s15, s4, s5
 80061b4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80061b8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80061bc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80061c0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80061c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061c8:	d894      	bhi.n	80060f4 <lite_dense_if32of32wf32+0x44>
 80061ca:	eb02 0e0b 	add.w	lr, r2, fp
 80061ce:	4654      	mov	r4, sl
 80061d0:	46c4      	mov	ip, r8
 80061d2:	2c00      	cmp	r4, #0
 80061d4:	d075      	beq.n	80062c2 <lite_dense_if32of32wf32+0x212>
 80061d6:	eddc 6a00 	vldr	s13, [ip]
 80061da:	edde 7a00 	vldr	s15, [lr]
 80061de:	2c01      	cmp	r4, #1
 80061e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80061e4:	d06d      	beq.n	80062c2 <lite_dense_if32of32wf32+0x212>
 80061e6:	eddc 6a01 	vldr	s13, [ip, #4]
 80061ea:	edde 7a01 	vldr	s15, [lr, #4]
 80061ee:	2c02      	cmp	r4, #2
 80061f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80061f4:	d065      	beq.n	80062c2 <lite_dense_if32of32wf32+0x212>
 80061f6:	eddc 6a02 	vldr	s13, [ip, #8]
 80061fa:	edde 7a02 	vldr	s15, [lr, #8]
 80061fe:	2c03      	cmp	r4, #3
 8006200:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006204:	d05d      	beq.n	80062c2 <lite_dense_if32of32wf32+0x212>
 8006206:	eddc 6a03 	vldr	s13, [ip, #12]
 800620a:	edde 7a03 	vldr	s15, [lr, #12]
 800620e:	2c04      	cmp	r4, #4
 8006210:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006214:	d055      	beq.n	80062c2 <lite_dense_if32of32wf32+0x212>
 8006216:	eddc 6a04 	vldr	s13, [ip, #16]
 800621a:	edde 7a04 	vldr	s15, [lr, #16]
 800621e:	2c05      	cmp	r4, #5
 8006220:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006224:	d04d      	beq.n	80062c2 <lite_dense_if32of32wf32+0x212>
 8006226:	eddc 6a05 	vldr	s13, [ip, #20]
 800622a:	edde 7a05 	vldr	s15, [lr, #20]
 800622e:	2c06      	cmp	r4, #6
 8006230:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006234:	d045      	beq.n	80062c2 <lite_dense_if32of32wf32+0x212>
 8006236:	eddc 6a06 	vldr	s13, [ip, #24]
 800623a:	edde 7a06 	vldr	s15, [lr, #24]
 800623e:	2c07      	cmp	r4, #7
 8006240:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006244:	d03d      	beq.n	80062c2 <lite_dense_if32of32wf32+0x212>
 8006246:	eddc 6a07 	vldr	s13, [ip, #28]
 800624a:	edde 7a07 	vldr	s15, [lr, #28]
 800624e:	2c08      	cmp	r4, #8
 8006250:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006254:	d035      	beq.n	80062c2 <lite_dense_if32of32wf32+0x212>
 8006256:	eddc 6a08 	vldr	s13, [ip, #32]
 800625a:	edde 7a08 	vldr	s15, [lr, #32]
 800625e:	2c09      	cmp	r4, #9
 8006260:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006264:	d02d      	beq.n	80062c2 <lite_dense_if32of32wf32+0x212>
 8006266:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800626a:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800626e:	2c0a      	cmp	r4, #10
 8006270:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006274:	d025      	beq.n	80062c2 <lite_dense_if32of32wf32+0x212>
 8006276:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800627a:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800627e:	2c0b      	cmp	r4, #11
 8006280:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006284:	d01d      	beq.n	80062c2 <lite_dense_if32of32wf32+0x212>
 8006286:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800628a:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800628e:	2c0c      	cmp	r4, #12
 8006290:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006294:	d015      	beq.n	80062c2 <lite_dense_if32of32wf32+0x212>
 8006296:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800629a:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800629e:	3c0d      	subs	r4, #13
 80062a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80062a4:	d00d      	beq.n	80062c2 <lite_dense_if32of32wf32+0x212>
 80062a6:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 80062aa:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 80062ae:	2c01      	cmp	r4, #1
 80062b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80062b4:	d005      	beq.n	80062c2 <lite_dense_if32of32wf32+0x212>
 80062b6:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 80062ba:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 80062be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80062c2:	444a      	add	r2, r9
 80062c4:	eca5 7a01 	vstmia	r5!, {s14}
 80062c8:	42af      	cmp	r7, r5
 80062ca:	f63f af09 	bhi.w	80060e0 <lite_dense_if32of32wf32+0x30>
 80062ce:	b15b      	cbz	r3, 80062e8 <lite_dense_if32of32wf32+0x238>
 80062d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062d2:	b14a      	cbz	r2, 80062e8 <lite_dense_if32of32wf32+0x238>
 80062d4:	edd0 7a00 	vldr	s15, [r0]
 80062d8:	ecb3 7a01 	vldmia	r3!, {s14}
 80062dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062e0:	ece0 7a01 	vstmia	r0!, {s15}
 80062e4:	4287      	cmp	r7, r0
 80062e6:	d1f5      	bne.n	80062d4 <lite_dense_if32of32wf32+0x224>
 80062e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ec:	4634      	mov	r4, r6
 80062ee:	4696      	mov	lr, r2
 80062f0:	468c      	mov	ip, r1
 80062f2:	e76e      	b.n	80061d2 <lite_dense_if32of32wf32+0x122>
 80062f4:	00000000 	.word	0x00000000

080062f8 <ai_version_get>:
 80062f8:	0212      	lsls	r2, r2, #8
 80062fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80062fe:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8006302:	4770      	bx	lr

08006304 <get_tensor_byte_size>:
 8006304:	b410      	push	{r4}
 8006306:	6983      	ldr	r3, [r0, #24]
 8006308:	68c4      	ldr	r4, [r0, #12]
 800630a:	6941      	ldr	r1, [r0, #20]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68e0      	ldr	r0, [r4, #12]
 8006310:	4a07      	ldr	r2, [pc, #28]	; (8006330 <get_tensor_byte_size+0x2c>)
 8006312:	68c9      	ldr	r1, [r1, #12]
 8006314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006318:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800631c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006320:	fb01 f000 	mul.w	r0, r1, r0
 8006324:	4293      	cmp	r3, r2
 8006326:	bf04      	itt	eq
 8006328:	3007      	addeq	r0, #7
 800632a:	08c0      	lsreq	r0, r0, #3
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	000400c0 	.word	0x000400c0

08006334 <ai_array_to_buffer_fmt>:
 8006334:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006338:	2b02      	cmp	r3, #2
 800633a:	d050      	beq.n	80063de <ai_array_to_buffer_fmt+0xaa>
 800633c:	4b2a      	ldr	r3, [pc, #168]	; (80063e8 <ai_array_to_buffer_fmt+0xb4>)
 800633e:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8006342:	429a      	cmp	r2, r3
 8006344:	d00b      	beq.n	800635e <ai_array_to_buffer_fmt+0x2a>
 8006346:	dc1c      	bgt.n	8006382 <ai_array_to_buffer_fmt+0x4e>
 8006348:	4b28      	ldr	r3, [pc, #160]	; (80063ec <ai_array_to_buffer_fmt+0xb8>)
 800634a:	429a      	cmp	r2, r3
 800634c:	d007      	beq.n	800635e <ai_array_to_buffer_fmt+0x2a>
 800634e:	dd0b      	ble.n	8006368 <ai_array_to_buffer_fmt+0x34>
 8006350:	4b27      	ldr	r3, [pc, #156]	; (80063f0 <ai_array_to_buffer_fmt+0xbc>)
 8006352:	429a      	cmp	r2, r3
 8006354:	d003      	beq.n	800635e <ai_array_to_buffer_fmt+0x2a>
 8006356:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800635a:	429a      	cmp	r2, r3
 800635c:	d131      	bne.n	80063c2 <ai_array_to_buffer_fmt+0x8e>
 800635e:	4613      	mov	r3, r2
 8006360:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006364:	4318      	orrs	r0, r3
 8006366:	4770      	bx	lr
 8006368:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800636c:	429a      	cmp	r2, r3
 800636e:	d0f6      	beq.n	800635e <ai_array_to_buffer_fmt+0x2a>
 8006370:	dd2c      	ble.n	80063cc <ai_array_to_buffer_fmt+0x98>
 8006372:	4b20      	ldr	r3, [pc, #128]	; (80063f4 <ai_array_to_buffer_fmt+0xc0>)
 8006374:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006378:	429a      	cmp	r2, r3
 800637a:	bf18      	it	ne
 800637c:	2340      	movne	r3, #64	; 0x40
 800637e:	4318      	orrs	r0, r3
 8006380:	4770      	bx	lr
 8006382:	4b1d      	ldr	r3, [pc, #116]	; (80063f8 <ai_array_to_buffer_fmt+0xc4>)
 8006384:	429a      	cmp	r2, r3
 8006386:	d0ea      	beq.n	800635e <ai_array_to_buffer_fmt+0x2a>
 8006388:	dd0e      	ble.n	80063a8 <ai_array_to_buffer_fmt+0x74>
 800638a:	4b1c      	ldr	r3, [pc, #112]	; (80063fc <ai_array_to_buffer_fmt+0xc8>)
 800638c:	429a      	cmp	r2, r3
 800638e:	d0e6      	beq.n	800635e <ai_array_to_buffer_fmt+0x2a>
 8006390:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8006394:	429a      	cmp	r2, r3
 8006396:	d0e2      	beq.n	800635e <ai_array_to_buffer_fmt+0x2a>
 8006398:	4b19      	ldr	r3, [pc, #100]	; (8006400 <ai_array_to_buffer_fmt+0xcc>)
 800639a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800639e:	429a      	cmp	r2, r3
 80063a0:	bf18      	it	ne
 80063a2:	2340      	movne	r3, #64	; 0x40
 80063a4:	4318      	orrs	r0, r3
 80063a6:	4770      	bx	lr
 80063a8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d0d6      	beq.n	800635e <ai_array_to_buffer_fmt+0x2a>
 80063b0:	3307      	adds	r3, #7
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d0d3      	beq.n	800635e <ai_array_to_buffer_fmt+0x2a>
 80063b6:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80063ba:	429a      	cmp	r2, r3
 80063bc:	bf18      	it	ne
 80063be:	2340      	movne	r3, #64	; 0x40
 80063c0:	e7ce      	b.n	8006360 <ai_array_to_buffer_fmt+0x2c>
 80063c2:	4b10      	ldr	r3, [pc, #64]	; (8006404 <ai_array_to_buffer_fmt+0xd0>)
 80063c4:	429a      	cmp	r2, r3
 80063c6:	bf18      	it	ne
 80063c8:	2340      	movne	r3, #64	; 0x40
 80063ca:	e7c9      	b.n	8006360 <ai_array_to_buffer_fmt+0x2c>
 80063cc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d0c4      	beq.n	800635e <ai_array_to_buffer_fmt+0x2a>
 80063d4:	3380      	adds	r3, #128	; 0x80
 80063d6:	429a      	cmp	r2, r3
 80063d8:	bf18      	it	ne
 80063da:	2340      	movne	r3, #64	; 0x40
 80063dc:	e7c0      	b.n	8006360 <ai_array_to_buffer_fmt+0x2c>
 80063de:	4b0a      	ldr	r3, [pc, #40]	; (8006408 <ai_array_to_buffer_fmt+0xd4>)
 80063e0:	4003      	ands	r3, r0
 80063e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063e6:	e7bb      	b.n	8006360 <ai_array_to_buffer_fmt+0x2c>
 80063e8:	00840040 	.word	0x00840040
 80063ec:	00040840 	.word	0x00040840
 80063f0:	00041040 	.word	0x00041040
 80063f4:	00040447 	.word	0x00040447
 80063f8:	00840840 	.word	0x00840840
 80063fc:	00841040 	.word	0x00841040
 8006400:	0084084f 	.word	0x0084084f
 8006404:	0004084f 	.word	0x0004084f
 8006408:	00803fff 	.word	0x00803fff

0800640c <ai_array_get_byte_size>:
 800640c:	b319      	cbz	r1, 8006456 <ai_array_get_byte_size+0x4a>
 800640e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8006412:	fb03 f101 	mul.w	r1, r3, r1
 8006416:	3107      	adds	r1, #7
 8006418:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800641c:	f021 0307 	bic.w	r3, r1, #7
 8006420:	2a04      	cmp	r2, #4
 8006422:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8006426:	fa23 f101 	lsr.w	r1, r3, r1
 800642a:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800642e:	d00b      	beq.n	8006448 <ai_array_get_byte_size+0x3c>
 8006430:	2a08      	cmp	r2, #8
 8006432:	d002      	beq.n	800643a <ai_array_get_byte_size+0x2e>
 8006434:	3107      	adds	r1, #7
 8006436:	08c8      	lsrs	r0, r1, #3
 8006438:	4770      	bx	lr
 800643a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800643e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8006442:	3107      	adds	r1, #7
 8006444:	08c8      	lsrs	r0, r1, #3
 8006446:	4770      	bx	lr
 8006448:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800644c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8006450:	3107      	adds	r1, #7
 8006452:	08c8      	lsrs	r0, r1, #3
 8006454:	4770      	bx	lr
 8006456:	4608      	mov	r0, r1
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop

0800645c <ai_array_get_data_byte_size>:
 800645c:	b169      	cbz	r1, 800647a <ai_array_get_data_byte_size+0x1e>
 800645e:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8006462:	fb02 f101 	mul.w	r1, r2, r1
 8006466:	1dcb      	adds	r3, r1, #7
 8006468:	f023 0307 	bic.w	r3, r3, #7
 800646c:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8006470:	fa23 f000 	lsr.w	r0, r3, r0
 8006474:	3007      	adds	r0, #7
 8006476:	08c0      	lsrs	r0, r0, #3
 8006478:	4770      	bx	lr
 800647a:	4608      	mov	r0, r1
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop

08006480 <__errno>:
 8006480:	4b01      	ldr	r3, [pc, #4]	; (8006488 <__errno+0x8>)
 8006482:	6818      	ldr	r0, [r3, #0]
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	200007a8 	.word	0x200007a8

0800648c <__libc_init_array>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	4d0d      	ldr	r5, [pc, #52]	; (80064c4 <__libc_init_array+0x38>)
 8006490:	4c0d      	ldr	r4, [pc, #52]	; (80064c8 <__libc_init_array+0x3c>)
 8006492:	1b64      	subs	r4, r4, r5
 8006494:	10a4      	asrs	r4, r4, #2
 8006496:	2600      	movs	r6, #0
 8006498:	42a6      	cmp	r6, r4
 800649a:	d109      	bne.n	80064b0 <__libc_init_array+0x24>
 800649c:	4d0b      	ldr	r5, [pc, #44]	; (80064cc <__libc_init_array+0x40>)
 800649e:	4c0c      	ldr	r4, [pc, #48]	; (80064d0 <__libc_init_array+0x44>)
 80064a0:	f001 fadc 	bl	8007a5c <_init>
 80064a4:	1b64      	subs	r4, r4, r5
 80064a6:	10a4      	asrs	r4, r4, #2
 80064a8:	2600      	movs	r6, #0
 80064aa:	42a6      	cmp	r6, r4
 80064ac:	d105      	bne.n	80064ba <__libc_init_array+0x2e>
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
 80064b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b4:	4798      	blx	r3
 80064b6:	3601      	adds	r6, #1
 80064b8:	e7ee      	b.n	8006498 <__libc_init_array+0xc>
 80064ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80064be:	4798      	blx	r3
 80064c0:	3601      	adds	r6, #1
 80064c2:	e7f2      	b.n	80064aa <__libc_init_array+0x1e>
 80064c4:	08008910 	.word	0x08008910
 80064c8:	08008910 	.word	0x08008910
 80064cc:	08008910 	.word	0x08008910
 80064d0:	08008914 	.word	0x08008914

080064d4 <memcpy>:
 80064d4:	440a      	add	r2, r1
 80064d6:	4291      	cmp	r1, r2
 80064d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80064dc:	d100      	bne.n	80064e0 <memcpy+0xc>
 80064de:	4770      	bx	lr
 80064e0:	b510      	push	{r4, lr}
 80064e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064ea:	4291      	cmp	r1, r2
 80064ec:	d1f9      	bne.n	80064e2 <memcpy+0xe>
 80064ee:	bd10      	pop	{r4, pc}

080064f0 <memset>:
 80064f0:	4402      	add	r2, r0
 80064f2:	4603      	mov	r3, r0
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d100      	bne.n	80064fa <memset+0xa>
 80064f8:	4770      	bx	lr
 80064fa:	f803 1b01 	strb.w	r1, [r3], #1
 80064fe:	e7f9      	b.n	80064f4 <memset+0x4>

08006500 <_free_r>:
 8006500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006502:	2900      	cmp	r1, #0
 8006504:	d044      	beq.n	8006590 <_free_r+0x90>
 8006506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800650a:	9001      	str	r0, [sp, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	f1a1 0404 	sub.w	r4, r1, #4
 8006512:	bfb8      	it	lt
 8006514:	18e4      	addlt	r4, r4, r3
 8006516:	f000 fc51 	bl	8006dbc <__malloc_lock>
 800651a:	4a1e      	ldr	r2, [pc, #120]	; (8006594 <_free_r+0x94>)
 800651c:	9801      	ldr	r0, [sp, #4]
 800651e:	6813      	ldr	r3, [r2, #0]
 8006520:	b933      	cbnz	r3, 8006530 <_free_r+0x30>
 8006522:	6063      	str	r3, [r4, #4]
 8006524:	6014      	str	r4, [r2, #0]
 8006526:	b003      	add	sp, #12
 8006528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800652c:	f000 bc4c 	b.w	8006dc8 <__malloc_unlock>
 8006530:	42a3      	cmp	r3, r4
 8006532:	d908      	bls.n	8006546 <_free_r+0x46>
 8006534:	6825      	ldr	r5, [r4, #0]
 8006536:	1961      	adds	r1, r4, r5
 8006538:	428b      	cmp	r3, r1
 800653a:	bf01      	itttt	eq
 800653c:	6819      	ldreq	r1, [r3, #0]
 800653e:	685b      	ldreq	r3, [r3, #4]
 8006540:	1949      	addeq	r1, r1, r5
 8006542:	6021      	streq	r1, [r4, #0]
 8006544:	e7ed      	b.n	8006522 <_free_r+0x22>
 8006546:	461a      	mov	r2, r3
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	b10b      	cbz	r3, 8006550 <_free_r+0x50>
 800654c:	42a3      	cmp	r3, r4
 800654e:	d9fa      	bls.n	8006546 <_free_r+0x46>
 8006550:	6811      	ldr	r1, [r2, #0]
 8006552:	1855      	adds	r5, r2, r1
 8006554:	42a5      	cmp	r5, r4
 8006556:	d10b      	bne.n	8006570 <_free_r+0x70>
 8006558:	6824      	ldr	r4, [r4, #0]
 800655a:	4421      	add	r1, r4
 800655c:	1854      	adds	r4, r2, r1
 800655e:	42a3      	cmp	r3, r4
 8006560:	6011      	str	r1, [r2, #0]
 8006562:	d1e0      	bne.n	8006526 <_free_r+0x26>
 8006564:	681c      	ldr	r4, [r3, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	6053      	str	r3, [r2, #4]
 800656a:	4421      	add	r1, r4
 800656c:	6011      	str	r1, [r2, #0]
 800656e:	e7da      	b.n	8006526 <_free_r+0x26>
 8006570:	d902      	bls.n	8006578 <_free_r+0x78>
 8006572:	230c      	movs	r3, #12
 8006574:	6003      	str	r3, [r0, #0]
 8006576:	e7d6      	b.n	8006526 <_free_r+0x26>
 8006578:	6825      	ldr	r5, [r4, #0]
 800657a:	1961      	adds	r1, r4, r5
 800657c:	428b      	cmp	r3, r1
 800657e:	bf04      	itt	eq
 8006580:	6819      	ldreq	r1, [r3, #0]
 8006582:	685b      	ldreq	r3, [r3, #4]
 8006584:	6063      	str	r3, [r4, #4]
 8006586:	bf04      	itt	eq
 8006588:	1949      	addeq	r1, r1, r5
 800658a:	6021      	streq	r1, [r4, #0]
 800658c:	6054      	str	r4, [r2, #4]
 800658e:	e7ca      	b.n	8006526 <_free_r+0x26>
 8006590:	b003      	add	sp, #12
 8006592:	bd30      	pop	{r4, r5, pc}
 8006594:	20000b60 	.word	0x20000b60

08006598 <sbrk_aligned>:
 8006598:	b570      	push	{r4, r5, r6, lr}
 800659a:	4e0e      	ldr	r6, [pc, #56]	; (80065d4 <sbrk_aligned+0x3c>)
 800659c:	460c      	mov	r4, r1
 800659e:	6831      	ldr	r1, [r6, #0]
 80065a0:	4605      	mov	r5, r0
 80065a2:	b911      	cbnz	r1, 80065aa <sbrk_aligned+0x12>
 80065a4:	f000 f91a 	bl	80067dc <_sbrk_r>
 80065a8:	6030      	str	r0, [r6, #0]
 80065aa:	4621      	mov	r1, r4
 80065ac:	4628      	mov	r0, r5
 80065ae:	f000 f915 	bl	80067dc <_sbrk_r>
 80065b2:	1c43      	adds	r3, r0, #1
 80065b4:	d00a      	beq.n	80065cc <sbrk_aligned+0x34>
 80065b6:	1cc4      	adds	r4, r0, #3
 80065b8:	f024 0403 	bic.w	r4, r4, #3
 80065bc:	42a0      	cmp	r0, r4
 80065be:	d007      	beq.n	80065d0 <sbrk_aligned+0x38>
 80065c0:	1a21      	subs	r1, r4, r0
 80065c2:	4628      	mov	r0, r5
 80065c4:	f000 f90a 	bl	80067dc <_sbrk_r>
 80065c8:	3001      	adds	r0, #1
 80065ca:	d101      	bne.n	80065d0 <sbrk_aligned+0x38>
 80065cc:	f04f 34ff 	mov.w	r4, #4294967295
 80065d0:	4620      	mov	r0, r4
 80065d2:	bd70      	pop	{r4, r5, r6, pc}
 80065d4:	20000b64 	.word	0x20000b64

080065d8 <_malloc_r>:
 80065d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065dc:	1ccd      	adds	r5, r1, #3
 80065de:	f025 0503 	bic.w	r5, r5, #3
 80065e2:	3508      	adds	r5, #8
 80065e4:	2d0c      	cmp	r5, #12
 80065e6:	bf38      	it	cc
 80065e8:	250c      	movcc	r5, #12
 80065ea:	2d00      	cmp	r5, #0
 80065ec:	4607      	mov	r7, r0
 80065ee:	db01      	blt.n	80065f4 <_malloc_r+0x1c>
 80065f0:	42a9      	cmp	r1, r5
 80065f2:	d905      	bls.n	8006600 <_malloc_r+0x28>
 80065f4:	230c      	movs	r3, #12
 80065f6:	603b      	str	r3, [r7, #0]
 80065f8:	2600      	movs	r6, #0
 80065fa:	4630      	mov	r0, r6
 80065fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006600:	4e2e      	ldr	r6, [pc, #184]	; (80066bc <_malloc_r+0xe4>)
 8006602:	f000 fbdb 	bl	8006dbc <__malloc_lock>
 8006606:	6833      	ldr	r3, [r6, #0]
 8006608:	461c      	mov	r4, r3
 800660a:	bb34      	cbnz	r4, 800665a <_malloc_r+0x82>
 800660c:	4629      	mov	r1, r5
 800660e:	4638      	mov	r0, r7
 8006610:	f7ff ffc2 	bl	8006598 <sbrk_aligned>
 8006614:	1c43      	adds	r3, r0, #1
 8006616:	4604      	mov	r4, r0
 8006618:	d14d      	bne.n	80066b6 <_malloc_r+0xde>
 800661a:	6834      	ldr	r4, [r6, #0]
 800661c:	4626      	mov	r6, r4
 800661e:	2e00      	cmp	r6, #0
 8006620:	d140      	bne.n	80066a4 <_malloc_r+0xcc>
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	4631      	mov	r1, r6
 8006626:	4638      	mov	r0, r7
 8006628:	eb04 0803 	add.w	r8, r4, r3
 800662c:	f000 f8d6 	bl	80067dc <_sbrk_r>
 8006630:	4580      	cmp	r8, r0
 8006632:	d13a      	bne.n	80066aa <_malloc_r+0xd2>
 8006634:	6821      	ldr	r1, [r4, #0]
 8006636:	3503      	adds	r5, #3
 8006638:	1a6d      	subs	r5, r5, r1
 800663a:	f025 0503 	bic.w	r5, r5, #3
 800663e:	3508      	adds	r5, #8
 8006640:	2d0c      	cmp	r5, #12
 8006642:	bf38      	it	cc
 8006644:	250c      	movcc	r5, #12
 8006646:	4629      	mov	r1, r5
 8006648:	4638      	mov	r0, r7
 800664a:	f7ff ffa5 	bl	8006598 <sbrk_aligned>
 800664e:	3001      	adds	r0, #1
 8006650:	d02b      	beq.n	80066aa <_malloc_r+0xd2>
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	442b      	add	r3, r5
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	e00e      	b.n	8006678 <_malloc_r+0xa0>
 800665a:	6822      	ldr	r2, [r4, #0]
 800665c:	1b52      	subs	r2, r2, r5
 800665e:	d41e      	bmi.n	800669e <_malloc_r+0xc6>
 8006660:	2a0b      	cmp	r2, #11
 8006662:	d916      	bls.n	8006692 <_malloc_r+0xba>
 8006664:	1961      	adds	r1, r4, r5
 8006666:	42a3      	cmp	r3, r4
 8006668:	6025      	str	r5, [r4, #0]
 800666a:	bf18      	it	ne
 800666c:	6059      	strne	r1, [r3, #4]
 800666e:	6863      	ldr	r3, [r4, #4]
 8006670:	bf08      	it	eq
 8006672:	6031      	streq	r1, [r6, #0]
 8006674:	5162      	str	r2, [r4, r5]
 8006676:	604b      	str	r3, [r1, #4]
 8006678:	4638      	mov	r0, r7
 800667a:	f104 060b 	add.w	r6, r4, #11
 800667e:	f000 fba3 	bl	8006dc8 <__malloc_unlock>
 8006682:	f026 0607 	bic.w	r6, r6, #7
 8006686:	1d23      	adds	r3, r4, #4
 8006688:	1af2      	subs	r2, r6, r3
 800668a:	d0b6      	beq.n	80065fa <_malloc_r+0x22>
 800668c:	1b9b      	subs	r3, r3, r6
 800668e:	50a3      	str	r3, [r4, r2]
 8006690:	e7b3      	b.n	80065fa <_malloc_r+0x22>
 8006692:	6862      	ldr	r2, [r4, #4]
 8006694:	42a3      	cmp	r3, r4
 8006696:	bf0c      	ite	eq
 8006698:	6032      	streq	r2, [r6, #0]
 800669a:	605a      	strne	r2, [r3, #4]
 800669c:	e7ec      	b.n	8006678 <_malloc_r+0xa0>
 800669e:	4623      	mov	r3, r4
 80066a0:	6864      	ldr	r4, [r4, #4]
 80066a2:	e7b2      	b.n	800660a <_malloc_r+0x32>
 80066a4:	4634      	mov	r4, r6
 80066a6:	6876      	ldr	r6, [r6, #4]
 80066a8:	e7b9      	b.n	800661e <_malloc_r+0x46>
 80066aa:	230c      	movs	r3, #12
 80066ac:	603b      	str	r3, [r7, #0]
 80066ae:	4638      	mov	r0, r7
 80066b0:	f000 fb8a 	bl	8006dc8 <__malloc_unlock>
 80066b4:	e7a1      	b.n	80065fa <_malloc_r+0x22>
 80066b6:	6025      	str	r5, [r4, #0]
 80066b8:	e7de      	b.n	8006678 <_malloc_r+0xa0>
 80066ba:	bf00      	nop
 80066bc:	20000b60 	.word	0x20000b60

080066c0 <iprintf>:
 80066c0:	b40f      	push	{r0, r1, r2, r3}
 80066c2:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <iprintf+0x2c>)
 80066c4:	b513      	push	{r0, r1, r4, lr}
 80066c6:	681c      	ldr	r4, [r3, #0]
 80066c8:	b124      	cbz	r4, 80066d4 <iprintf+0x14>
 80066ca:	69a3      	ldr	r3, [r4, #24]
 80066cc:	b913      	cbnz	r3, 80066d4 <iprintf+0x14>
 80066ce:	4620      	mov	r0, r4
 80066d0:	f000 fa6e 	bl	8006bb0 <__sinit>
 80066d4:	ab05      	add	r3, sp, #20
 80066d6:	9a04      	ldr	r2, [sp, #16]
 80066d8:	68a1      	ldr	r1, [r4, #8]
 80066da:	9301      	str	r3, [sp, #4]
 80066dc:	4620      	mov	r0, r4
 80066de:	f000 fba3 	bl	8006e28 <_vfiprintf_r>
 80066e2:	b002      	add	sp, #8
 80066e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066e8:	b004      	add	sp, #16
 80066ea:	4770      	bx	lr
 80066ec:	200007a8 	.word	0x200007a8

080066f0 <_puts_r>:
 80066f0:	b570      	push	{r4, r5, r6, lr}
 80066f2:	460e      	mov	r6, r1
 80066f4:	4605      	mov	r5, r0
 80066f6:	b118      	cbz	r0, 8006700 <_puts_r+0x10>
 80066f8:	6983      	ldr	r3, [r0, #24]
 80066fa:	b90b      	cbnz	r3, 8006700 <_puts_r+0x10>
 80066fc:	f000 fa58 	bl	8006bb0 <__sinit>
 8006700:	69ab      	ldr	r3, [r5, #24]
 8006702:	68ac      	ldr	r4, [r5, #8]
 8006704:	b913      	cbnz	r3, 800670c <_puts_r+0x1c>
 8006706:	4628      	mov	r0, r5
 8006708:	f000 fa52 	bl	8006bb0 <__sinit>
 800670c:	4b2c      	ldr	r3, [pc, #176]	; (80067c0 <_puts_r+0xd0>)
 800670e:	429c      	cmp	r4, r3
 8006710:	d120      	bne.n	8006754 <_puts_r+0x64>
 8006712:	686c      	ldr	r4, [r5, #4]
 8006714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006716:	07db      	lsls	r3, r3, #31
 8006718:	d405      	bmi.n	8006726 <_puts_r+0x36>
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	0598      	lsls	r0, r3, #22
 800671e:	d402      	bmi.n	8006726 <_puts_r+0x36>
 8006720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006722:	f000 fae3 	bl	8006cec <__retarget_lock_acquire_recursive>
 8006726:	89a3      	ldrh	r3, [r4, #12]
 8006728:	0719      	lsls	r1, r3, #28
 800672a:	d51d      	bpl.n	8006768 <_puts_r+0x78>
 800672c:	6923      	ldr	r3, [r4, #16]
 800672e:	b1db      	cbz	r3, 8006768 <_puts_r+0x78>
 8006730:	3e01      	subs	r6, #1
 8006732:	68a3      	ldr	r3, [r4, #8]
 8006734:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006738:	3b01      	subs	r3, #1
 800673a:	60a3      	str	r3, [r4, #8]
 800673c:	bb39      	cbnz	r1, 800678e <_puts_r+0x9e>
 800673e:	2b00      	cmp	r3, #0
 8006740:	da38      	bge.n	80067b4 <_puts_r+0xc4>
 8006742:	4622      	mov	r2, r4
 8006744:	210a      	movs	r1, #10
 8006746:	4628      	mov	r0, r5
 8006748:	f000 f858 	bl	80067fc <__swbuf_r>
 800674c:	3001      	adds	r0, #1
 800674e:	d011      	beq.n	8006774 <_puts_r+0x84>
 8006750:	250a      	movs	r5, #10
 8006752:	e011      	b.n	8006778 <_puts_r+0x88>
 8006754:	4b1b      	ldr	r3, [pc, #108]	; (80067c4 <_puts_r+0xd4>)
 8006756:	429c      	cmp	r4, r3
 8006758:	d101      	bne.n	800675e <_puts_r+0x6e>
 800675a:	68ac      	ldr	r4, [r5, #8]
 800675c:	e7da      	b.n	8006714 <_puts_r+0x24>
 800675e:	4b1a      	ldr	r3, [pc, #104]	; (80067c8 <_puts_r+0xd8>)
 8006760:	429c      	cmp	r4, r3
 8006762:	bf08      	it	eq
 8006764:	68ec      	ldreq	r4, [r5, #12]
 8006766:	e7d5      	b.n	8006714 <_puts_r+0x24>
 8006768:	4621      	mov	r1, r4
 800676a:	4628      	mov	r0, r5
 800676c:	f000 f898 	bl	80068a0 <__swsetup_r>
 8006770:	2800      	cmp	r0, #0
 8006772:	d0dd      	beq.n	8006730 <_puts_r+0x40>
 8006774:	f04f 35ff 	mov.w	r5, #4294967295
 8006778:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800677a:	07da      	lsls	r2, r3, #31
 800677c:	d405      	bmi.n	800678a <_puts_r+0x9a>
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	059b      	lsls	r3, r3, #22
 8006782:	d402      	bmi.n	800678a <_puts_r+0x9a>
 8006784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006786:	f000 fab2 	bl	8006cee <__retarget_lock_release_recursive>
 800678a:	4628      	mov	r0, r5
 800678c:	bd70      	pop	{r4, r5, r6, pc}
 800678e:	2b00      	cmp	r3, #0
 8006790:	da04      	bge.n	800679c <_puts_r+0xac>
 8006792:	69a2      	ldr	r2, [r4, #24]
 8006794:	429a      	cmp	r2, r3
 8006796:	dc06      	bgt.n	80067a6 <_puts_r+0xb6>
 8006798:	290a      	cmp	r1, #10
 800679a:	d004      	beq.n	80067a6 <_puts_r+0xb6>
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	6022      	str	r2, [r4, #0]
 80067a2:	7019      	strb	r1, [r3, #0]
 80067a4:	e7c5      	b.n	8006732 <_puts_r+0x42>
 80067a6:	4622      	mov	r2, r4
 80067a8:	4628      	mov	r0, r5
 80067aa:	f000 f827 	bl	80067fc <__swbuf_r>
 80067ae:	3001      	adds	r0, #1
 80067b0:	d1bf      	bne.n	8006732 <_puts_r+0x42>
 80067b2:	e7df      	b.n	8006774 <_puts_r+0x84>
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	250a      	movs	r5, #10
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	6022      	str	r2, [r4, #0]
 80067bc:	701d      	strb	r5, [r3, #0]
 80067be:	e7db      	b.n	8006778 <_puts_r+0x88>
 80067c0:	0800887c 	.word	0x0800887c
 80067c4:	0800889c 	.word	0x0800889c
 80067c8:	0800885c 	.word	0x0800885c

080067cc <puts>:
 80067cc:	4b02      	ldr	r3, [pc, #8]	; (80067d8 <puts+0xc>)
 80067ce:	4601      	mov	r1, r0
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	f7ff bf8d 	b.w	80066f0 <_puts_r>
 80067d6:	bf00      	nop
 80067d8:	200007a8 	.word	0x200007a8

080067dc <_sbrk_r>:
 80067dc:	b538      	push	{r3, r4, r5, lr}
 80067de:	4d06      	ldr	r5, [pc, #24]	; (80067f8 <_sbrk_r+0x1c>)
 80067e0:	2300      	movs	r3, #0
 80067e2:	4604      	mov	r4, r0
 80067e4:	4608      	mov	r0, r1
 80067e6:	602b      	str	r3, [r5, #0]
 80067e8:	f7fa f9fa 	bl	8000be0 <_sbrk>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d102      	bne.n	80067f6 <_sbrk_r+0x1a>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	b103      	cbz	r3, 80067f6 <_sbrk_r+0x1a>
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	20000b6c 	.word	0x20000b6c

080067fc <__swbuf_r>:
 80067fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fe:	460e      	mov	r6, r1
 8006800:	4614      	mov	r4, r2
 8006802:	4605      	mov	r5, r0
 8006804:	b118      	cbz	r0, 800680e <__swbuf_r+0x12>
 8006806:	6983      	ldr	r3, [r0, #24]
 8006808:	b90b      	cbnz	r3, 800680e <__swbuf_r+0x12>
 800680a:	f000 f9d1 	bl	8006bb0 <__sinit>
 800680e:	4b21      	ldr	r3, [pc, #132]	; (8006894 <__swbuf_r+0x98>)
 8006810:	429c      	cmp	r4, r3
 8006812:	d12b      	bne.n	800686c <__swbuf_r+0x70>
 8006814:	686c      	ldr	r4, [r5, #4]
 8006816:	69a3      	ldr	r3, [r4, #24]
 8006818:	60a3      	str	r3, [r4, #8]
 800681a:	89a3      	ldrh	r3, [r4, #12]
 800681c:	071a      	lsls	r2, r3, #28
 800681e:	d52f      	bpl.n	8006880 <__swbuf_r+0x84>
 8006820:	6923      	ldr	r3, [r4, #16]
 8006822:	b36b      	cbz	r3, 8006880 <__swbuf_r+0x84>
 8006824:	6923      	ldr	r3, [r4, #16]
 8006826:	6820      	ldr	r0, [r4, #0]
 8006828:	1ac0      	subs	r0, r0, r3
 800682a:	6963      	ldr	r3, [r4, #20]
 800682c:	b2f6      	uxtb	r6, r6
 800682e:	4283      	cmp	r3, r0
 8006830:	4637      	mov	r7, r6
 8006832:	dc04      	bgt.n	800683e <__swbuf_r+0x42>
 8006834:	4621      	mov	r1, r4
 8006836:	4628      	mov	r0, r5
 8006838:	f000 f926 	bl	8006a88 <_fflush_r>
 800683c:	bb30      	cbnz	r0, 800688c <__swbuf_r+0x90>
 800683e:	68a3      	ldr	r3, [r4, #8]
 8006840:	3b01      	subs	r3, #1
 8006842:	60a3      	str	r3, [r4, #8]
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	6022      	str	r2, [r4, #0]
 800684a:	701e      	strb	r6, [r3, #0]
 800684c:	6963      	ldr	r3, [r4, #20]
 800684e:	3001      	adds	r0, #1
 8006850:	4283      	cmp	r3, r0
 8006852:	d004      	beq.n	800685e <__swbuf_r+0x62>
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	07db      	lsls	r3, r3, #31
 8006858:	d506      	bpl.n	8006868 <__swbuf_r+0x6c>
 800685a:	2e0a      	cmp	r6, #10
 800685c:	d104      	bne.n	8006868 <__swbuf_r+0x6c>
 800685e:	4621      	mov	r1, r4
 8006860:	4628      	mov	r0, r5
 8006862:	f000 f911 	bl	8006a88 <_fflush_r>
 8006866:	b988      	cbnz	r0, 800688c <__swbuf_r+0x90>
 8006868:	4638      	mov	r0, r7
 800686a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800686c:	4b0a      	ldr	r3, [pc, #40]	; (8006898 <__swbuf_r+0x9c>)
 800686e:	429c      	cmp	r4, r3
 8006870:	d101      	bne.n	8006876 <__swbuf_r+0x7a>
 8006872:	68ac      	ldr	r4, [r5, #8]
 8006874:	e7cf      	b.n	8006816 <__swbuf_r+0x1a>
 8006876:	4b09      	ldr	r3, [pc, #36]	; (800689c <__swbuf_r+0xa0>)
 8006878:	429c      	cmp	r4, r3
 800687a:	bf08      	it	eq
 800687c:	68ec      	ldreq	r4, [r5, #12]
 800687e:	e7ca      	b.n	8006816 <__swbuf_r+0x1a>
 8006880:	4621      	mov	r1, r4
 8006882:	4628      	mov	r0, r5
 8006884:	f000 f80c 	bl	80068a0 <__swsetup_r>
 8006888:	2800      	cmp	r0, #0
 800688a:	d0cb      	beq.n	8006824 <__swbuf_r+0x28>
 800688c:	f04f 37ff 	mov.w	r7, #4294967295
 8006890:	e7ea      	b.n	8006868 <__swbuf_r+0x6c>
 8006892:	bf00      	nop
 8006894:	0800887c 	.word	0x0800887c
 8006898:	0800889c 	.word	0x0800889c
 800689c:	0800885c 	.word	0x0800885c

080068a0 <__swsetup_r>:
 80068a0:	4b32      	ldr	r3, [pc, #200]	; (800696c <__swsetup_r+0xcc>)
 80068a2:	b570      	push	{r4, r5, r6, lr}
 80068a4:	681d      	ldr	r5, [r3, #0]
 80068a6:	4606      	mov	r6, r0
 80068a8:	460c      	mov	r4, r1
 80068aa:	b125      	cbz	r5, 80068b6 <__swsetup_r+0x16>
 80068ac:	69ab      	ldr	r3, [r5, #24]
 80068ae:	b913      	cbnz	r3, 80068b6 <__swsetup_r+0x16>
 80068b0:	4628      	mov	r0, r5
 80068b2:	f000 f97d 	bl	8006bb0 <__sinit>
 80068b6:	4b2e      	ldr	r3, [pc, #184]	; (8006970 <__swsetup_r+0xd0>)
 80068b8:	429c      	cmp	r4, r3
 80068ba:	d10f      	bne.n	80068dc <__swsetup_r+0x3c>
 80068bc:	686c      	ldr	r4, [r5, #4]
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068c4:	0719      	lsls	r1, r3, #28
 80068c6:	d42c      	bmi.n	8006922 <__swsetup_r+0x82>
 80068c8:	06dd      	lsls	r5, r3, #27
 80068ca:	d411      	bmi.n	80068f0 <__swsetup_r+0x50>
 80068cc:	2309      	movs	r3, #9
 80068ce:	6033      	str	r3, [r6, #0]
 80068d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068d4:	81a3      	strh	r3, [r4, #12]
 80068d6:	f04f 30ff 	mov.w	r0, #4294967295
 80068da:	e03e      	b.n	800695a <__swsetup_r+0xba>
 80068dc:	4b25      	ldr	r3, [pc, #148]	; (8006974 <__swsetup_r+0xd4>)
 80068de:	429c      	cmp	r4, r3
 80068e0:	d101      	bne.n	80068e6 <__swsetup_r+0x46>
 80068e2:	68ac      	ldr	r4, [r5, #8]
 80068e4:	e7eb      	b.n	80068be <__swsetup_r+0x1e>
 80068e6:	4b24      	ldr	r3, [pc, #144]	; (8006978 <__swsetup_r+0xd8>)
 80068e8:	429c      	cmp	r4, r3
 80068ea:	bf08      	it	eq
 80068ec:	68ec      	ldreq	r4, [r5, #12]
 80068ee:	e7e6      	b.n	80068be <__swsetup_r+0x1e>
 80068f0:	0758      	lsls	r0, r3, #29
 80068f2:	d512      	bpl.n	800691a <__swsetup_r+0x7a>
 80068f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068f6:	b141      	cbz	r1, 800690a <__swsetup_r+0x6a>
 80068f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068fc:	4299      	cmp	r1, r3
 80068fe:	d002      	beq.n	8006906 <__swsetup_r+0x66>
 8006900:	4630      	mov	r0, r6
 8006902:	f7ff fdfd 	bl	8006500 <_free_r>
 8006906:	2300      	movs	r3, #0
 8006908:	6363      	str	r3, [r4, #52]	; 0x34
 800690a:	89a3      	ldrh	r3, [r4, #12]
 800690c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006910:	81a3      	strh	r3, [r4, #12]
 8006912:	2300      	movs	r3, #0
 8006914:	6063      	str	r3, [r4, #4]
 8006916:	6923      	ldr	r3, [r4, #16]
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	89a3      	ldrh	r3, [r4, #12]
 800691c:	f043 0308 	orr.w	r3, r3, #8
 8006920:	81a3      	strh	r3, [r4, #12]
 8006922:	6923      	ldr	r3, [r4, #16]
 8006924:	b94b      	cbnz	r3, 800693a <__swsetup_r+0x9a>
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800692c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006930:	d003      	beq.n	800693a <__swsetup_r+0x9a>
 8006932:	4621      	mov	r1, r4
 8006934:	4630      	mov	r0, r6
 8006936:	f000 fa01 	bl	8006d3c <__smakebuf_r>
 800693a:	89a0      	ldrh	r0, [r4, #12]
 800693c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006940:	f010 0301 	ands.w	r3, r0, #1
 8006944:	d00a      	beq.n	800695c <__swsetup_r+0xbc>
 8006946:	2300      	movs	r3, #0
 8006948:	60a3      	str	r3, [r4, #8]
 800694a:	6963      	ldr	r3, [r4, #20]
 800694c:	425b      	negs	r3, r3
 800694e:	61a3      	str	r3, [r4, #24]
 8006950:	6923      	ldr	r3, [r4, #16]
 8006952:	b943      	cbnz	r3, 8006966 <__swsetup_r+0xc6>
 8006954:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006958:	d1ba      	bne.n	80068d0 <__swsetup_r+0x30>
 800695a:	bd70      	pop	{r4, r5, r6, pc}
 800695c:	0781      	lsls	r1, r0, #30
 800695e:	bf58      	it	pl
 8006960:	6963      	ldrpl	r3, [r4, #20]
 8006962:	60a3      	str	r3, [r4, #8]
 8006964:	e7f4      	b.n	8006950 <__swsetup_r+0xb0>
 8006966:	2000      	movs	r0, #0
 8006968:	e7f7      	b.n	800695a <__swsetup_r+0xba>
 800696a:	bf00      	nop
 800696c:	200007a8 	.word	0x200007a8
 8006970:	0800887c 	.word	0x0800887c
 8006974:	0800889c 	.word	0x0800889c
 8006978:	0800885c 	.word	0x0800885c

0800697c <__sflush_r>:
 800697c:	898a      	ldrh	r2, [r1, #12]
 800697e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006982:	4605      	mov	r5, r0
 8006984:	0710      	lsls	r0, r2, #28
 8006986:	460c      	mov	r4, r1
 8006988:	d458      	bmi.n	8006a3c <__sflush_r+0xc0>
 800698a:	684b      	ldr	r3, [r1, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	dc05      	bgt.n	800699c <__sflush_r+0x20>
 8006990:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006992:	2b00      	cmp	r3, #0
 8006994:	dc02      	bgt.n	800699c <__sflush_r+0x20>
 8006996:	2000      	movs	r0, #0
 8006998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800699c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800699e:	2e00      	cmp	r6, #0
 80069a0:	d0f9      	beq.n	8006996 <__sflush_r+0x1a>
 80069a2:	2300      	movs	r3, #0
 80069a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069a8:	682f      	ldr	r7, [r5, #0]
 80069aa:	602b      	str	r3, [r5, #0]
 80069ac:	d032      	beq.n	8006a14 <__sflush_r+0x98>
 80069ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	075a      	lsls	r2, r3, #29
 80069b4:	d505      	bpl.n	80069c2 <__sflush_r+0x46>
 80069b6:	6863      	ldr	r3, [r4, #4]
 80069b8:	1ac0      	subs	r0, r0, r3
 80069ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069bc:	b10b      	cbz	r3, 80069c2 <__sflush_r+0x46>
 80069be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069c0:	1ac0      	subs	r0, r0, r3
 80069c2:	2300      	movs	r3, #0
 80069c4:	4602      	mov	r2, r0
 80069c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069c8:	6a21      	ldr	r1, [r4, #32]
 80069ca:	4628      	mov	r0, r5
 80069cc:	47b0      	blx	r6
 80069ce:	1c43      	adds	r3, r0, #1
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	d106      	bne.n	80069e2 <__sflush_r+0x66>
 80069d4:	6829      	ldr	r1, [r5, #0]
 80069d6:	291d      	cmp	r1, #29
 80069d8:	d82c      	bhi.n	8006a34 <__sflush_r+0xb8>
 80069da:	4a2a      	ldr	r2, [pc, #168]	; (8006a84 <__sflush_r+0x108>)
 80069dc:	40ca      	lsrs	r2, r1
 80069de:	07d6      	lsls	r6, r2, #31
 80069e0:	d528      	bpl.n	8006a34 <__sflush_r+0xb8>
 80069e2:	2200      	movs	r2, #0
 80069e4:	6062      	str	r2, [r4, #4]
 80069e6:	04d9      	lsls	r1, r3, #19
 80069e8:	6922      	ldr	r2, [r4, #16]
 80069ea:	6022      	str	r2, [r4, #0]
 80069ec:	d504      	bpl.n	80069f8 <__sflush_r+0x7c>
 80069ee:	1c42      	adds	r2, r0, #1
 80069f0:	d101      	bne.n	80069f6 <__sflush_r+0x7a>
 80069f2:	682b      	ldr	r3, [r5, #0]
 80069f4:	b903      	cbnz	r3, 80069f8 <__sflush_r+0x7c>
 80069f6:	6560      	str	r0, [r4, #84]	; 0x54
 80069f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069fa:	602f      	str	r7, [r5, #0]
 80069fc:	2900      	cmp	r1, #0
 80069fe:	d0ca      	beq.n	8006996 <__sflush_r+0x1a>
 8006a00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a04:	4299      	cmp	r1, r3
 8006a06:	d002      	beq.n	8006a0e <__sflush_r+0x92>
 8006a08:	4628      	mov	r0, r5
 8006a0a:	f7ff fd79 	bl	8006500 <_free_r>
 8006a0e:	2000      	movs	r0, #0
 8006a10:	6360      	str	r0, [r4, #52]	; 0x34
 8006a12:	e7c1      	b.n	8006998 <__sflush_r+0x1c>
 8006a14:	6a21      	ldr	r1, [r4, #32]
 8006a16:	2301      	movs	r3, #1
 8006a18:	4628      	mov	r0, r5
 8006a1a:	47b0      	blx	r6
 8006a1c:	1c41      	adds	r1, r0, #1
 8006a1e:	d1c7      	bne.n	80069b0 <__sflush_r+0x34>
 8006a20:	682b      	ldr	r3, [r5, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d0c4      	beq.n	80069b0 <__sflush_r+0x34>
 8006a26:	2b1d      	cmp	r3, #29
 8006a28:	d001      	beq.n	8006a2e <__sflush_r+0xb2>
 8006a2a:	2b16      	cmp	r3, #22
 8006a2c:	d101      	bne.n	8006a32 <__sflush_r+0xb6>
 8006a2e:	602f      	str	r7, [r5, #0]
 8006a30:	e7b1      	b.n	8006996 <__sflush_r+0x1a>
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a38:	81a3      	strh	r3, [r4, #12]
 8006a3a:	e7ad      	b.n	8006998 <__sflush_r+0x1c>
 8006a3c:	690f      	ldr	r7, [r1, #16]
 8006a3e:	2f00      	cmp	r7, #0
 8006a40:	d0a9      	beq.n	8006996 <__sflush_r+0x1a>
 8006a42:	0793      	lsls	r3, r2, #30
 8006a44:	680e      	ldr	r6, [r1, #0]
 8006a46:	bf08      	it	eq
 8006a48:	694b      	ldreq	r3, [r1, #20]
 8006a4a:	600f      	str	r7, [r1, #0]
 8006a4c:	bf18      	it	ne
 8006a4e:	2300      	movne	r3, #0
 8006a50:	eba6 0807 	sub.w	r8, r6, r7
 8006a54:	608b      	str	r3, [r1, #8]
 8006a56:	f1b8 0f00 	cmp.w	r8, #0
 8006a5a:	dd9c      	ble.n	8006996 <__sflush_r+0x1a>
 8006a5c:	6a21      	ldr	r1, [r4, #32]
 8006a5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a60:	4643      	mov	r3, r8
 8006a62:	463a      	mov	r2, r7
 8006a64:	4628      	mov	r0, r5
 8006a66:	47b0      	blx	r6
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	dc06      	bgt.n	8006a7a <__sflush_r+0xfe>
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a72:	81a3      	strh	r3, [r4, #12]
 8006a74:	f04f 30ff 	mov.w	r0, #4294967295
 8006a78:	e78e      	b.n	8006998 <__sflush_r+0x1c>
 8006a7a:	4407      	add	r7, r0
 8006a7c:	eba8 0800 	sub.w	r8, r8, r0
 8006a80:	e7e9      	b.n	8006a56 <__sflush_r+0xda>
 8006a82:	bf00      	nop
 8006a84:	20400001 	.word	0x20400001

08006a88 <_fflush_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	690b      	ldr	r3, [r1, #16]
 8006a8c:	4605      	mov	r5, r0
 8006a8e:	460c      	mov	r4, r1
 8006a90:	b913      	cbnz	r3, 8006a98 <_fflush_r+0x10>
 8006a92:	2500      	movs	r5, #0
 8006a94:	4628      	mov	r0, r5
 8006a96:	bd38      	pop	{r3, r4, r5, pc}
 8006a98:	b118      	cbz	r0, 8006aa2 <_fflush_r+0x1a>
 8006a9a:	6983      	ldr	r3, [r0, #24]
 8006a9c:	b90b      	cbnz	r3, 8006aa2 <_fflush_r+0x1a>
 8006a9e:	f000 f887 	bl	8006bb0 <__sinit>
 8006aa2:	4b14      	ldr	r3, [pc, #80]	; (8006af4 <_fflush_r+0x6c>)
 8006aa4:	429c      	cmp	r4, r3
 8006aa6:	d11b      	bne.n	8006ae0 <_fflush_r+0x58>
 8006aa8:	686c      	ldr	r4, [r5, #4]
 8006aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0ef      	beq.n	8006a92 <_fflush_r+0xa>
 8006ab2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ab4:	07d0      	lsls	r0, r2, #31
 8006ab6:	d404      	bmi.n	8006ac2 <_fflush_r+0x3a>
 8006ab8:	0599      	lsls	r1, r3, #22
 8006aba:	d402      	bmi.n	8006ac2 <_fflush_r+0x3a>
 8006abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006abe:	f000 f915 	bl	8006cec <__retarget_lock_acquire_recursive>
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	f7ff ff59 	bl	800697c <__sflush_r>
 8006aca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006acc:	07da      	lsls	r2, r3, #31
 8006ace:	4605      	mov	r5, r0
 8006ad0:	d4e0      	bmi.n	8006a94 <_fflush_r+0xc>
 8006ad2:	89a3      	ldrh	r3, [r4, #12]
 8006ad4:	059b      	lsls	r3, r3, #22
 8006ad6:	d4dd      	bmi.n	8006a94 <_fflush_r+0xc>
 8006ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ada:	f000 f908 	bl	8006cee <__retarget_lock_release_recursive>
 8006ade:	e7d9      	b.n	8006a94 <_fflush_r+0xc>
 8006ae0:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <_fflush_r+0x70>)
 8006ae2:	429c      	cmp	r4, r3
 8006ae4:	d101      	bne.n	8006aea <_fflush_r+0x62>
 8006ae6:	68ac      	ldr	r4, [r5, #8]
 8006ae8:	e7df      	b.n	8006aaa <_fflush_r+0x22>
 8006aea:	4b04      	ldr	r3, [pc, #16]	; (8006afc <_fflush_r+0x74>)
 8006aec:	429c      	cmp	r4, r3
 8006aee:	bf08      	it	eq
 8006af0:	68ec      	ldreq	r4, [r5, #12]
 8006af2:	e7da      	b.n	8006aaa <_fflush_r+0x22>
 8006af4:	0800887c 	.word	0x0800887c
 8006af8:	0800889c 	.word	0x0800889c
 8006afc:	0800885c 	.word	0x0800885c

08006b00 <std>:
 8006b00:	2300      	movs	r3, #0
 8006b02:	b510      	push	{r4, lr}
 8006b04:	4604      	mov	r4, r0
 8006b06:	e9c0 3300 	strd	r3, r3, [r0]
 8006b0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b0e:	6083      	str	r3, [r0, #8]
 8006b10:	8181      	strh	r1, [r0, #12]
 8006b12:	6643      	str	r3, [r0, #100]	; 0x64
 8006b14:	81c2      	strh	r2, [r0, #14]
 8006b16:	6183      	str	r3, [r0, #24]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	2208      	movs	r2, #8
 8006b1c:	305c      	adds	r0, #92	; 0x5c
 8006b1e:	f7ff fce7 	bl	80064f0 <memset>
 8006b22:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <std+0x38>)
 8006b24:	6263      	str	r3, [r4, #36]	; 0x24
 8006b26:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <std+0x3c>)
 8006b28:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b2a:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <std+0x40>)
 8006b2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <std+0x44>)
 8006b30:	6224      	str	r4, [r4, #32]
 8006b32:	6323      	str	r3, [r4, #48]	; 0x30
 8006b34:	bd10      	pop	{r4, pc}
 8006b36:	bf00      	nop
 8006b38:	080073b1 	.word	0x080073b1
 8006b3c:	080073d3 	.word	0x080073d3
 8006b40:	0800740b 	.word	0x0800740b
 8006b44:	0800742f 	.word	0x0800742f

08006b48 <_cleanup_r>:
 8006b48:	4901      	ldr	r1, [pc, #4]	; (8006b50 <_cleanup_r+0x8>)
 8006b4a:	f000 b8af 	b.w	8006cac <_fwalk_reent>
 8006b4e:	bf00      	nop
 8006b50:	08006a89 	.word	0x08006a89

08006b54 <__sfmoreglue>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	2268      	movs	r2, #104	; 0x68
 8006b58:	1e4d      	subs	r5, r1, #1
 8006b5a:	4355      	muls	r5, r2
 8006b5c:	460e      	mov	r6, r1
 8006b5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b62:	f7ff fd39 	bl	80065d8 <_malloc_r>
 8006b66:	4604      	mov	r4, r0
 8006b68:	b140      	cbz	r0, 8006b7c <__sfmoreglue+0x28>
 8006b6a:	2100      	movs	r1, #0
 8006b6c:	e9c0 1600 	strd	r1, r6, [r0]
 8006b70:	300c      	adds	r0, #12
 8006b72:	60a0      	str	r0, [r4, #8]
 8006b74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b78:	f7ff fcba 	bl	80064f0 <memset>
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}

08006b80 <__sfp_lock_acquire>:
 8006b80:	4801      	ldr	r0, [pc, #4]	; (8006b88 <__sfp_lock_acquire+0x8>)
 8006b82:	f000 b8b3 	b.w	8006cec <__retarget_lock_acquire_recursive>
 8006b86:	bf00      	nop
 8006b88:	20000b69 	.word	0x20000b69

08006b8c <__sfp_lock_release>:
 8006b8c:	4801      	ldr	r0, [pc, #4]	; (8006b94 <__sfp_lock_release+0x8>)
 8006b8e:	f000 b8ae 	b.w	8006cee <__retarget_lock_release_recursive>
 8006b92:	bf00      	nop
 8006b94:	20000b69 	.word	0x20000b69

08006b98 <__sinit_lock_acquire>:
 8006b98:	4801      	ldr	r0, [pc, #4]	; (8006ba0 <__sinit_lock_acquire+0x8>)
 8006b9a:	f000 b8a7 	b.w	8006cec <__retarget_lock_acquire_recursive>
 8006b9e:	bf00      	nop
 8006ba0:	20000b6a 	.word	0x20000b6a

08006ba4 <__sinit_lock_release>:
 8006ba4:	4801      	ldr	r0, [pc, #4]	; (8006bac <__sinit_lock_release+0x8>)
 8006ba6:	f000 b8a2 	b.w	8006cee <__retarget_lock_release_recursive>
 8006baa:	bf00      	nop
 8006bac:	20000b6a 	.word	0x20000b6a

08006bb0 <__sinit>:
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	f7ff fff0 	bl	8006b98 <__sinit_lock_acquire>
 8006bb8:	69a3      	ldr	r3, [r4, #24]
 8006bba:	b11b      	cbz	r3, 8006bc4 <__sinit+0x14>
 8006bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc0:	f7ff bff0 	b.w	8006ba4 <__sinit_lock_release>
 8006bc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bc8:	6523      	str	r3, [r4, #80]	; 0x50
 8006bca:	4b13      	ldr	r3, [pc, #76]	; (8006c18 <__sinit+0x68>)
 8006bcc:	4a13      	ldr	r2, [pc, #76]	; (8006c1c <__sinit+0x6c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bd2:	42a3      	cmp	r3, r4
 8006bd4:	bf04      	itt	eq
 8006bd6:	2301      	moveq	r3, #1
 8006bd8:	61a3      	streq	r3, [r4, #24]
 8006bda:	4620      	mov	r0, r4
 8006bdc:	f000 f820 	bl	8006c20 <__sfp>
 8006be0:	6060      	str	r0, [r4, #4]
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 f81c 	bl	8006c20 <__sfp>
 8006be8:	60a0      	str	r0, [r4, #8]
 8006bea:	4620      	mov	r0, r4
 8006bec:	f000 f818 	bl	8006c20 <__sfp>
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	60e0      	str	r0, [r4, #12]
 8006bf4:	2104      	movs	r1, #4
 8006bf6:	6860      	ldr	r0, [r4, #4]
 8006bf8:	f7ff ff82 	bl	8006b00 <std>
 8006bfc:	68a0      	ldr	r0, [r4, #8]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	2109      	movs	r1, #9
 8006c02:	f7ff ff7d 	bl	8006b00 <std>
 8006c06:	68e0      	ldr	r0, [r4, #12]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	2112      	movs	r1, #18
 8006c0c:	f7ff ff78 	bl	8006b00 <std>
 8006c10:	2301      	movs	r3, #1
 8006c12:	61a3      	str	r3, [r4, #24]
 8006c14:	e7d2      	b.n	8006bbc <__sinit+0xc>
 8006c16:	bf00      	nop
 8006c18:	08008858 	.word	0x08008858
 8006c1c:	08006b49 	.word	0x08006b49

08006c20 <__sfp>:
 8006c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c22:	4607      	mov	r7, r0
 8006c24:	f7ff ffac 	bl	8006b80 <__sfp_lock_acquire>
 8006c28:	4b1e      	ldr	r3, [pc, #120]	; (8006ca4 <__sfp+0x84>)
 8006c2a:	681e      	ldr	r6, [r3, #0]
 8006c2c:	69b3      	ldr	r3, [r6, #24]
 8006c2e:	b913      	cbnz	r3, 8006c36 <__sfp+0x16>
 8006c30:	4630      	mov	r0, r6
 8006c32:	f7ff ffbd 	bl	8006bb0 <__sinit>
 8006c36:	3648      	adds	r6, #72	; 0x48
 8006c38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c3c:	3b01      	subs	r3, #1
 8006c3e:	d503      	bpl.n	8006c48 <__sfp+0x28>
 8006c40:	6833      	ldr	r3, [r6, #0]
 8006c42:	b30b      	cbz	r3, 8006c88 <__sfp+0x68>
 8006c44:	6836      	ldr	r6, [r6, #0]
 8006c46:	e7f7      	b.n	8006c38 <__sfp+0x18>
 8006c48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c4c:	b9d5      	cbnz	r5, 8006c84 <__sfp+0x64>
 8006c4e:	4b16      	ldr	r3, [pc, #88]	; (8006ca8 <__sfp+0x88>)
 8006c50:	60e3      	str	r3, [r4, #12]
 8006c52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c56:	6665      	str	r5, [r4, #100]	; 0x64
 8006c58:	f000 f847 	bl	8006cea <__retarget_lock_init_recursive>
 8006c5c:	f7ff ff96 	bl	8006b8c <__sfp_lock_release>
 8006c60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c68:	6025      	str	r5, [r4, #0]
 8006c6a:	61a5      	str	r5, [r4, #24]
 8006c6c:	2208      	movs	r2, #8
 8006c6e:	4629      	mov	r1, r5
 8006c70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c74:	f7ff fc3c 	bl	80064f0 <memset>
 8006c78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c80:	4620      	mov	r0, r4
 8006c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c84:	3468      	adds	r4, #104	; 0x68
 8006c86:	e7d9      	b.n	8006c3c <__sfp+0x1c>
 8006c88:	2104      	movs	r1, #4
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	f7ff ff62 	bl	8006b54 <__sfmoreglue>
 8006c90:	4604      	mov	r4, r0
 8006c92:	6030      	str	r0, [r6, #0]
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d1d5      	bne.n	8006c44 <__sfp+0x24>
 8006c98:	f7ff ff78 	bl	8006b8c <__sfp_lock_release>
 8006c9c:	230c      	movs	r3, #12
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	e7ee      	b.n	8006c80 <__sfp+0x60>
 8006ca2:	bf00      	nop
 8006ca4:	08008858 	.word	0x08008858
 8006ca8:	ffff0001 	.word	0xffff0001

08006cac <_fwalk_reent>:
 8006cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	4688      	mov	r8, r1
 8006cb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cb8:	2700      	movs	r7, #0
 8006cba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cbe:	f1b9 0901 	subs.w	r9, r9, #1
 8006cc2:	d505      	bpl.n	8006cd0 <_fwalk_reent+0x24>
 8006cc4:	6824      	ldr	r4, [r4, #0]
 8006cc6:	2c00      	cmp	r4, #0
 8006cc8:	d1f7      	bne.n	8006cba <_fwalk_reent+0xe>
 8006cca:	4638      	mov	r0, r7
 8006ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cd0:	89ab      	ldrh	r3, [r5, #12]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d907      	bls.n	8006ce6 <_fwalk_reent+0x3a>
 8006cd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	d003      	beq.n	8006ce6 <_fwalk_reent+0x3a>
 8006cde:	4629      	mov	r1, r5
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	47c0      	blx	r8
 8006ce4:	4307      	orrs	r7, r0
 8006ce6:	3568      	adds	r5, #104	; 0x68
 8006ce8:	e7e9      	b.n	8006cbe <_fwalk_reent+0x12>

08006cea <__retarget_lock_init_recursive>:
 8006cea:	4770      	bx	lr

08006cec <__retarget_lock_acquire_recursive>:
 8006cec:	4770      	bx	lr

08006cee <__retarget_lock_release_recursive>:
 8006cee:	4770      	bx	lr

08006cf0 <__swhatbuf_r>:
 8006cf0:	b570      	push	{r4, r5, r6, lr}
 8006cf2:	460e      	mov	r6, r1
 8006cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf8:	2900      	cmp	r1, #0
 8006cfa:	b096      	sub	sp, #88	; 0x58
 8006cfc:	4614      	mov	r4, r2
 8006cfe:	461d      	mov	r5, r3
 8006d00:	da08      	bge.n	8006d14 <__swhatbuf_r+0x24>
 8006d02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	602a      	str	r2, [r5, #0]
 8006d0a:	061a      	lsls	r2, r3, #24
 8006d0c:	d410      	bmi.n	8006d30 <__swhatbuf_r+0x40>
 8006d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d12:	e00e      	b.n	8006d32 <__swhatbuf_r+0x42>
 8006d14:	466a      	mov	r2, sp
 8006d16:	f000 fbb1 	bl	800747c <_fstat_r>
 8006d1a:	2800      	cmp	r0, #0
 8006d1c:	dbf1      	blt.n	8006d02 <__swhatbuf_r+0x12>
 8006d1e:	9a01      	ldr	r2, [sp, #4]
 8006d20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d28:	425a      	negs	r2, r3
 8006d2a:	415a      	adcs	r2, r3
 8006d2c:	602a      	str	r2, [r5, #0]
 8006d2e:	e7ee      	b.n	8006d0e <__swhatbuf_r+0x1e>
 8006d30:	2340      	movs	r3, #64	; 0x40
 8006d32:	2000      	movs	r0, #0
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	b016      	add	sp, #88	; 0x58
 8006d38:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d3c <__smakebuf_r>:
 8006d3c:	898b      	ldrh	r3, [r1, #12]
 8006d3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d40:	079d      	lsls	r5, r3, #30
 8006d42:	4606      	mov	r6, r0
 8006d44:	460c      	mov	r4, r1
 8006d46:	d507      	bpl.n	8006d58 <__smakebuf_r+0x1c>
 8006d48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	6123      	str	r3, [r4, #16]
 8006d50:	2301      	movs	r3, #1
 8006d52:	6163      	str	r3, [r4, #20]
 8006d54:	b002      	add	sp, #8
 8006d56:	bd70      	pop	{r4, r5, r6, pc}
 8006d58:	ab01      	add	r3, sp, #4
 8006d5a:	466a      	mov	r2, sp
 8006d5c:	f7ff ffc8 	bl	8006cf0 <__swhatbuf_r>
 8006d60:	9900      	ldr	r1, [sp, #0]
 8006d62:	4605      	mov	r5, r0
 8006d64:	4630      	mov	r0, r6
 8006d66:	f7ff fc37 	bl	80065d8 <_malloc_r>
 8006d6a:	b948      	cbnz	r0, 8006d80 <__smakebuf_r+0x44>
 8006d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d70:	059a      	lsls	r2, r3, #22
 8006d72:	d4ef      	bmi.n	8006d54 <__smakebuf_r+0x18>
 8006d74:	f023 0303 	bic.w	r3, r3, #3
 8006d78:	f043 0302 	orr.w	r3, r3, #2
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	e7e3      	b.n	8006d48 <__smakebuf_r+0xc>
 8006d80:	4b0d      	ldr	r3, [pc, #52]	; (8006db8 <__smakebuf_r+0x7c>)
 8006d82:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d84:	89a3      	ldrh	r3, [r4, #12]
 8006d86:	6020      	str	r0, [r4, #0]
 8006d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d8c:	81a3      	strh	r3, [r4, #12]
 8006d8e:	9b00      	ldr	r3, [sp, #0]
 8006d90:	6163      	str	r3, [r4, #20]
 8006d92:	9b01      	ldr	r3, [sp, #4]
 8006d94:	6120      	str	r0, [r4, #16]
 8006d96:	b15b      	cbz	r3, 8006db0 <__smakebuf_r+0x74>
 8006d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	f000 fb7f 	bl	80074a0 <_isatty_r>
 8006da2:	b128      	cbz	r0, 8006db0 <__smakebuf_r+0x74>
 8006da4:	89a3      	ldrh	r3, [r4, #12]
 8006da6:	f023 0303 	bic.w	r3, r3, #3
 8006daa:	f043 0301 	orr.w	r3, r3, #1
 8006dae:	81a3      	strh	r3, [r4, #12]
 8006db0:	89a0      	ldrh	r0, [r4, #12]
 8006db2:	4305      	orrs	r5, r0
 8006db4:	81a5      	strh	r5, [r4, #12]
 8006db6:	e7cd      	b.n	8006d54 <__smakebuf_r+0x18>
 8006db8:	08006b49 	.word	0x08006b49

08006dbc <__malloc_lock>:
 8006dbc:	4801      	ldr	r0, [pc, #4]	; (8006dc4 <__malloc_lock+0x8>)
 8006dbe:	f7ff bf95 	b.w	8006cec <__retarget_lock_acquire_recursive>
 8006dc2:	bf00      	nop
 8006dc4:	20000b68 	.word	0x20000b68

08006dc8 <__malloc_unlock>:
 8006dc8:	4801      	ldr	r0, [pc, #4]	; (8006dd0 <__malloc_unlock+0x8>)
 8006dca:	f7ff bf90 	b.w	8006cee <__retarget_lock_release_recursive>
 8006dce:	bf00      	nop
 8006dd0:	20000b68 	.word	0x20000b68

08006dd4 <__sfputc_r>:
 8006dd4:	6893      	ldr	r3, [r2, #8]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	b410      	push	{r4}
 8006ddc:	6093      	str	r3, [r2, #8]
 8006dde:	da08      	bge.n	8006df2 <__sfputc_r+0x1e>
 8006de0:	6994      	ldr	r4, [r2, #24]
 8006de2:	42a3      	cmp	r3, r4
 8006de4:	db01      	blt.n	8006dea <__sfputc_r+0x16>
 8006de6:	290a      	cmp	r1, #10
 8006de8:	d103      	bne.n	8006df2 <__sfputc_r+0x1e>
 8006dea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dee:	f7ff bd05 	b.w	80067fc <__swbuf_r>
 8006df2:	6813      	ldr	r3, [r2, #0]
 8006df4:	1c58      	adds	r0, r3, #1
 8006df6:	6010      	str	r0, [r2, #0]
 8006df8:	7019      	strb	r1, [r3, #0]
 8006dfa:	4608      	mov	r0, r1
 8006dfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <__sfputs_r>:
 8006e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e04:	4606      	mov	r6, r0
 8006e06:	460f      	mov	r7, r1
 8006e08:	4614      	mov	r4, r2
 8006e0a:	18d5      	adds	r5, r2, r3
 8006e0c:	42ac      	cmp	r4, r5
 8006e0e:	d101      	bne.n	8006e14 <__sfputs_r+0x12>
 8006e10:	2000      	movs	r0, #0
 8006e12:	e007      	b.n	8006e24 <__sfputs_r+0x22>
 8006e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e18:	463a      	mov	r2, r7
 8006e1a:	4630      	mov	r0, r6
 8006e1c:	f7ff ffda 	bl	8006dd4 <__sfputc_r>
 8006e20:	1c43      	adds	r3, r0, #1
 8006e22:	d1f3      	bne.n	8006e0c <__sfputs_r+0xa>
 8006e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e28 <_vfiprintf_r>:
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	460d      	mov	r5, r1
 8006e2e:	b09d      	sub	sp, #116	; 0x74
 8006e30:	4614      	mov	r4, r2
 8006e32:	4698      	mov	r8, r3
 8006e34:	4606      	mov	r6, r0
 8006e36:	b118      	cbz	r0, 8006e40 <_vfiprintf_r+0x18>
 8006e38:	6983      	ldr	r3, [r0, #24]
 8006e3a:	b90b      	cbnz	r3, 8006e40 <_vfiprintf_r+0x18>
 8006e3c:	f7ff feb8 	bl	8006bb0 <__sinit>
 8006e40:	4b89      	ldr	r3, [pc, #548]	; (8007068 <_vfiprintf_r+0x240>)
 8006e42:	429d      	cmp	r5, r3
 8006e44:	d11b      	bne.n	8006e7e <_vfiprintf_r+0x56>
 8006e46:	6875      	ldr	r5, [r6, #4]
 8006e48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e4a:	07d9      	lsls	r1, r3, #31
 8006e4c:	d405      	bmi.n	8006e5a <_vfiprintf_r+0x32>
 8006e4e:	89ab      	ldrh	r3, [r5, #12]
 8006e50:	059a      	lsls	r2, r3, #22
 8006e52:	d402      	bmi.n	8006e5a <_vfiprintf_r+0x32>
 8006e54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e56:	f7ff ff49 	bl	8006cec <__retarget_lock_acquire_recursive>
 8006e5a:	89ab      	ldrh	r3, [r5, #12]
 8006e5c:	071b      	lsls	r3, r3, #28
 8006e5e:	d501      	bpl.n	8006e64 <_vfiprintf_r+0x3c>
 8006e60:	692b      	ldr	r3, [r5, #16]
 8006e62:	b9eb      	cbnz	r3, 8006ea0 <_vfiprintf_r+0x78>
 8006e64:	4629      	mov	r1, r5
 8006e66:	4630      	mov	r0, r6
 8006e68:	f7ff fd1a 	bl	80068a0 <__swsetup_r>
 8006e6c:	b1c0      	cbz	r0, 8006ea0 <_vfiprintf_r+0x78>
 8006e6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e70:	07dc      	lsls	r4, r3, #31
 8006e72:	d50e      	bpl.n	8006e92 <_vfiprintf_r+0x6a>
 8006e74:	f04f 30ff 	mov.w	r0, #4294967295
 8006e78:	b01d      	add	sp, #116	; 0x74
 8006e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e7e:	4b7b      	ldr	r3, [pc, #492]	; (800706c <_vfiprintf_r+0x244>)
 8006e80:	429d      	cmp	r5, r3
 8006e82:	d101      	bne.n	8006e88 <_vfiprintf_r+0x60>
 8006e84:	68b5      	ldr	r5, [r6, #8]
 8006e86:	e7df      	b.n	8006e48 <_vfiprintf_r+0x20>
 8006e88:	4b79      	ldr	r3, [pc, #484]	; (8007070 <_vfiprintf_r+0x248>)
 8006e8a:	429d      	cmp	r5, r3
 8006e8c:	bf08      	it	eq
 8006e8e:	68f5      	ldreq	r5, [r6, #12]
 8006e90:	e7da      	b.n	8006e48 <_vfiprintf_r+0x20>
 8006e92:	89ab      	ldrh	r3, [r5, #12]
 8006e94:	0598      	lsls	r0, r3, #22
 8006e96:	d4ed      	bmi.n	8006e74 <_vfiprintf_r+0x4c>
 8006e98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e9a:	f7ff ff28 	bl	8006cee <__retarget_lock_release_recursive>
 8006e9e:	e7e9      	b.n	8006e74 <_vfiprintf_r+0x4c>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea4:	2320      	movs	r3, #32
 8006ea6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006eaa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eae:	2330      	movs	r3, #48	; 0x30
 8006eb0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007074 <_vfiprintf_r+0x24c>
 8006eb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006eb8:	f04f 0901 	mov.w	r9, #1
 8006ebc:	4623      	mov	r3, r4
 8006ebe:	469a      	mov	sl, r3
 8006ec0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ec4:	b10a      	cbz	r2, 8006eca <_vfiprintf_r+0xa2>
 8006ec6:	2a25      	cmp	r2, #37	; 0x25
 8006ec8:	d1f9      	bne.n	8006ebe <_vfiprintf_r+0x96>
 8006eca:	ebba 0b04 	subs.w	fp, sl, r4
 8006ece:	d00b      	beq.n	8006ee8 <_vfiprintf_r+0xc0>
 8006ed0:	465b      	mov	r3, fp
 8006ed2:	4622      	mov	r2, r4
 8006ed4:	4629      	mov	r1, r5
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	f7ff ff93 	bl	8006e02 <__sfputs_r>
 8006edc:	3001      	adds	r0, #1
 8006ede:	f000 80aa 	beq.w	8007036 <_vfiprintf_r+0x20e>
 8006ee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ee4:	445a      	add	r2, fp
 8006ee6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ee8:	f89a 3000 	ldrb.w	r3, [sl]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 80a2 	beq.w	8007036 <_vfiprintf_r+0x20e>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006efc:	f10a 0a01 	add.w	sl, sl, #1
 8006f00:	9304      	str	r3, [sp, #16]
 8006f02:	9307      	str	r3, [sp, #28]
 8006f04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f08:	931a      	str	r3, [sp, #104]	; 0x68
 8006f0a:	4654      	mov	r4, sl
 8006f0c:	2205      	movs	r2, #5
 8006f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f12:	4858      	ldr	r0, [pc, #352]	; (8007074 <_vfiprintf_r+0x24c>)
 8006f14:	f7f9 f964 	bl	80001e0 <memchr>
 8006f18:	9a04      	ldr	r2, [sp, #16]
 8006f1a:	b9d8      	cbnz	r0, 8006f54 <_vfiprintf_r+0x12c>
 8006f1c:	06d1      	lsls	r1, r2, #27
 8006f1e:	bf44      	itt	mi
 8006f20:	2320      	movmi	r3, #32
 8006f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f26:	0713      	lsls	r3, r2, #28
 8006f28:	bf44      	itt	mi
 8006f2a:	232b      	movmi	r3, #43	; 0x2b
 8006f2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f30:	f89a 3000 	ldrb.w	r3, [sl]
 8006f34:	2b2a      	cmp	r3, #42	; 0x2a
 8006f36:	d015      	beq.n	8006f64 <_vfiprintf_r+0x13c>
 8006f38:	9a07      	ldr	r2, [sp, #28]
 8006f3a:	4654      	mov	r4, sl
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	f04f 0c0a 	mov.w	ip, #10
 8006f42:	4621      	mov	r1, r4
 8006f44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f48:	3b30      	subs	r3, #48	; 0x30
 8006f4a:	2b09      	cmp	r3, #9
 8006f4c:	d94e      	bls.n	8006fec <_vfiprintf_r+0x1c4>
 8006f4e:	b1b0      	cbz	r0, 8006f7e <_vfiprintf_r+0x156>
 8006f50:	9207      	str	r2, [sp, #28]
 8006f52:	e014      	b.n	8006f7e <_vfiprintf_r+0x156>
 8006f54:	eba0 0308 	sub.w	r3, r0, r8
 8006f58:	fa09 f303 	lsl.w	r3, r9, r3
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	9304      	str	r3, [sp, #16]
 8006f60:	46a2      	mov	sl, r4
 8006f62:	e7d2      	b.n	8006f0a <_vfiprintf_r+0xe2>
 8006f64:	9b03      	ldr	r3, [sp, #12]
 8006f66:	1d19      	adds	r1, r3, #4
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	9103      	str	r1, [sp, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	bfbb      	ittet	lt
 8006f70:	425b      	neglt	r3, r3
 8006f72:	f042 0202 	orrlt.w	r2, r2, #2
 8006f76:	9307      	strge	r3, [sp, #28]
 8006f78:	9307      	strlt	r3, [sp, #28]
 8006f7a:	bfb8      	it	lt
 8006f7c:	9204      	strlt	r2, [sp, #16]
 8006f7e:	7823      	ldrb	r3, [r4, #0]
 8006f80:	2b2e      	cmp	r3, #46	; 0x2e
 8006f82:	d10c      	bne.n	8006f9e <_vfiprintf_r+0x176>
 8006f84:	7863      	ldrb	r3, [r4, #1]
 8006f86:	2b2a      	cmp	r3, #42	; 0x2a
 8006f88:	d135      	bne.n	8006ff6 <_vfiprintf_r+0x1ce>
 8006f8a:	9b03      	ldr	r3, [sp, #12]
 8006f8c:	1d1a      	adds	r2, r3, #4
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	9203      	str	r2, [sp, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	bfb8      	it	lt
 8006f96:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f9a:	3402      	adds	r4, #2
 8006f9c:	9305      	str	r3, [sp, #20]
 8006f9e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007084 <_vfiprintf_r+0x25c>
 8006fa2:	7821      	ldrb	r1, [r4, #0]
 8006fa4:	2203      	movs	r2, #3
 8006fa6:	4650      	mov	r0, sl
 8006fa8:	f7f9 f91a 	bl	80001e0 <memchr>
 8006fac:	b140      	cbz	r0, 8006fc0 <_vfiprintf_r+0x198>
 8006fae:	2340      	movs	r3, #64	; 0x40
 8006fb0:	eba0 000a 	sub.w	r0, r0, sl
 8006fb4:	fa03 f000 	lsl.w	r0, r3, r0
 8006fb8:	9b04      	ldr	r3, [sp, #16]
 8006fba:	4303      	orrs	r3, r0
 8006fbc:	3401      	adds	r4, #1
 8006fbe:	9304      	str	r3, [sp, #16]
 8006fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fc4:	482c      	ldr	r0, [pc, #176]	; (8007078 <_vfiprintf_r+0x250>)
 8006fc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fca:	2206      	movs	r2, #6
 8006fcc:	f7f9 f908 	bl	80001e0 <memchr>
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d03f      	beq.n	8007054 <_vfiprintf_r+0x22c>
 8006fd4:	4b29      	ldr	r3, [pc, #164]	; (800707c <_vfiprintf_r+0x254>)
 8006fd6:	bb1b      	cbnz	r3, 8007020 <_vfiprintf_r+0x1f8>
 8006fd8:	9b03      	ldr	r3, [sp, #12]
 8006fda:	3307      	adds	r3, #7
 8006fdc:	f023 0307 	bic.w	r3, r3, #7
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	9303      	str	r3, [sp, #12]
 8006fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe6:	443b      	add	r3, r7
 8006fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8006fea:	e767      	b.n	8006ebc <_vfiprintf_r+0x94>
 8006fec:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	2001      	movs	r0, #1
 8006ff4:	e7a5      	b.n	8006f42 <_vfiprintf_r+0x11a>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	3401      	adds	r4, #1
 8006ffa:	9305      	str	r3, [sp, #20]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	f04f 0c0a 	mov.w	ip, #10
 8007002:	4620      	mov	r0, r4
 8007004:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007008:	3a30      	subs	r2, #48	; 0x30
 800700a:	2a09      	cmp	r2, #9
 800700c:	d903      	bls.n	8007016 <_vfiprintf_r+0x1ee>
 800700e:	2b00      	cmp	r3, #0
 8007010:	d0c5      	beq.n	8006f9e <_vfiprintf_r+0x176>
 8007012:	9105      	str	r1, [sp, #20]
 8007014:	e7c3      	b.n	8006f9e <_vfiprintf_r+0x176>
 8007016:	fb0c 2101 	mla	r1, ip, r1, r2
 800701a:	4604      	mov	r4, r0
 800701c:	2301      	movs	r3, #1
 800701e:	e7f0      	b.n	8007002 <_vfiprintf_r+0x1da>
 8007020:	ab03      	add	r3, sp, #12
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	462a      	mov	r2, r5
 8007026:	4b16      	ldr	r3, [pc, #88]	; (8007080 <_vfiprintf_r+0x258>)
 8007028:	a904      	add	r1, sp, #16
 800702a:	4630      	mov	r0, r6
 800702c:	f3af 8000 	nop.w
 8007030:	4607      	mov	r7, r0
 8007032:	1c78      	adds	r0, r7, #1
 8007034:	d1d6      	bne.n	8006fe4 <_vfiprintf_r+0x1bc>
 8007036:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007038:	07d9      	lsls	r1, r3, #31
 800703a:	d405      	bmi.n	8007048 <_vfiprintf_r+0x220>
 800703c:	89ab      	ldrh	r3, [r5, #12]
 800703e:	059a      	lsls	r2, r3, #22
 8007040:	d402      	bmi.n	8007048 <_vfiprintf_r+0x220>
 8007042:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007044:	f7ff fe53 	bl	8006cee <__retarget_lock_release_recursive>
 8007048:	89ab      	ldrh	r3, [r5, #12]
 800704a:	065b      	lsls	r3, r3, #25
 800704c:	f53f af12 	bmi.w	8006e74 <_vfiprintf_r+0x4c>
 8007050:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007052:	e711      	b.n	8006e78 <_vfiprintf_r+0x50>
 8007054:	ab03      	add	r3, sp, #12
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	462a      	mov	r2, r5
 800705a:	4b09      	ldr	r3, [pc, #36]	; (8007080 <_vfiprintf_r+0x258>)
 800705c:	a904      	add	r1, sp, #16
 800705e:	4630      	mov	r0, r6
 8007060:	f000 f880 	bl	8007164 <_printf_i>
 8007064:	e7e4      	b.n	8007030 <_vfiprintf_r+0x208>
 8007066:	bf00      	nop
 8007068:	0800887c 	.word	0x0800887c
 800706c:	0800889c 	.word	0x0800889c
 8007070:	0800885c 	.word	0x0800885c
 8007074:	080088bc 	.word	0x080088bc
 8007078:	080088c6 	.word	0x080088c6
 800707c:	00000000 	.word	0x00000000
 8007080:	08006e03 	.word	0x08006e03
 8007084:	080088c2 	.word	0x080088c2

08007088 <_printf_common>:
 8007088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800708c:	4616      	mov	r6, r2
 800708e:	4699      	mov	r9, r3
 8007090:	688a      	ldr	r2, [r1, #8]
 8007092:	690b      	ldr	r3, [r1, #16]
 8007094:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007098:	4293      	cmp	r3, r2
 800709a:	bfb8      	it	lt
 800709c:	4613      	movlt	r3, r2
 800709e:	6033      	str	r3, [r6, #0]
 80070a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070a4:	4607      	mov	r7, r0
 80070a6:	460c      	mov	r4, r1
 80070a8:	b10a      	cbz	r2, 80070ae <_printf_common+0x26>
 80070aa:	3301      	adds	r3, #1
 80070ac:	6033      	str	r3, [r6, #0]
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	0699      	lsls	r1, r3, #26
 80070b2:	bf42      	ittt	mi
 80070b4:	6833      	ldrmi	r3, [r6, #0]
 80070b6:	3302      	addmi	r3, #2
 80070b8:	6033      	strmi	r3, [r6, #0]
 80070ba:	6825      	ldr	r5, [r4, #0]
 80070bc:	f015 0506 	ands.w	r5, r5, #6
 80070c0:	d106      	bne.n	80070d0 <_printf_common+0x48>
 80070c2:	f104 0a19 	add.w	sl, r4, #25
 80070c6:	68e3      	ldr	r3, [r4, #12]
 80070c8:	6832      	ldr	r2, [r6, #0]
 80070ca:	1a9b      	subs	r3, r3, r2
 80070cc:	42ab      	cmp	r3, r5
 80070ce:	dc26      	bgt.n	800711e <_printf_common+0x96>
 80070d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070d4:	1e13      	subs	r3, r2, #0
 80070d6:	6822      	ldr	r2, [r4, #0]
 80070d8:	bf18      	it	ne
 80070da:	2301      	movne	r3, #1
 80070dc:	0692      	lsls	r2, r2, #26
 80070de:	d42b      	bmi.n	8007138 <_printf_common+0xb0>
 80070e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070e4:	4649      	mov	r1, r9
 80070e6:	4638      	mov	r0, r7
 80070e8:	47c0      	blx	r8
 80070ea:	3001      	adds	r0, #1
 80070ec:	d01e      	beq.n	800712c <_printf_common+0xa4>
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	68e5      	ldr	r5, [r4, #12]
 80070f2:	6832      	ldr	r2, [r6, #0]
 80070f4:	f003 0306 	and.w	r3, r3, #6
 80070f8:	2b04      	cmp	r3, #4
 80070fa:	bf08      	it	eq
 80070fc:	1aad      	subeq	r5, r5, r2
 80070fe:	68a3      	ldr	r3, [r4, #8]
 8007100:	6922      	ldr	r2, [r4, #16]
 8007102:	bf0c      	ite	eq
 8007104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007108:	2500      	movne	r5, #0
 800710a:	4293      	cmp	r3, r2
 800710c:	bfc4      	itt	gt
 800710e:	1a9b      	subgt	r3, r3, r2
 8007110:	18ed      	addgt	r5, r5, r3
 8007112:	2600      	movs	r6, #0
 8007114:	341a      	adds	r4, #26
 8007116:	42b5      	cmp	r5, r6
 8007118:	d11a      	bne.n	8007150 <_printf_common+0xc8>
 800711a:	2000      	movs	r0, #0
 800711c:	e008      	b.n	8007130 <_printf_common+0xa8>
 800711e:	2301      	movs	r3, #1
 8007120:	4652      	mov	r2, sl
 8007122:	4649      	mov	r1, r9
 8007124:	4638      	mov	r0, r7
 8007126:	47c0      	blx	r8
 8007128:	3001      	adds	r0, #1
 800712a:	d103      	bne.n	8007134 <_printf_common+0xac>
 800712c:	f04f 30ff 	mov.w	r0, #4294967295
 8007130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007134:	3501      	adds	r5, #1
 8007136:	e7c6      	b.n	80070c6 <_printf_common+0x3e>
 8007138:	18e1      	adds	r1, r4, r3
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	2030      	movs	r0, #48	; 0x30
 800713e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007142:	4422      	add	r2, r4
 8007144:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007148:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800714c:	3302      	adds	r3, #2
 800714e:	e7c7      	b.n	80070e0 <_printf_common+0x58>
 8007150:	2301      	movs	r3, #1
 8007152:	4622      	mov	r2, r4
 8007154:	4649      	mov	r1, r9
 8007156:	4638      	mov	r0, r7
 8007158:	47c0      	blx	r8
 800715a:	3001      	adds	r0, #1
 800715c:	d0e6      	beq.n	800712c <_printf_common+0xa4>
 800715e:	3601      	adds	r6, #1
 8007160:	e7d9      	b.n	8007116 <_printf_common+0x8e>
	...

08007164 <_printf_i>:
 8007164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007168:	7e0f      	ldrb	r7, [r1, #24]
 800716a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800716c:	2f78      	cmp	r7, #120	; 0x78
 800716e:	4691      	mov	r9, r2
 8007170:	4680      	mov	r8, r0
 8007172:	460c      	mov	r4, r1
 8007174:	469a      	mov	sl, r3
 8007176:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800717a:	d807      	bhi.n	800718c <_printf_i+0x28>
 800717c:	2f62      	cmp	r7, #98	; 0x62
 800717e:	d80a      	bhi.n	8007196 <_printf_i+0x32>
 8007180:	2f00      	cmp	r7, #0
 8007182:	f000 80d8 	beq.w	8007336 <_printf_i+0x1d2>
 8007186:	2f58      	cmp	r7, #88	; 0x58
 8007188:	f000 80a3 	beq.w	80072d2 <_printf_i+0x16e>
 800718c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007190:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007194:	e03a      	b.n	800720c <_printf_i+0xa8>
 8007196:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800719a:	2b15      	cmp	r3, #21
 800719c:	d8f6      	bhi.n	800718c <_printf_i+0x28>
 800719e:	a101      	add	r1, pc, #4	; (adr r1, 80071a4 <_printf_i+0x40>)
 80071a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071a4:	080071fd 	.word	0x080071fd
 80071a8:	08007211 	.word	0x08007211
 80071ac:	0800718d 	.word	0x0800718d
 80071b0:	0800718d 	.word	0x0800718d
 80071b4:	0800718d 	.word	0x0800718d
 80071b8:	0800718d 	.word	0x0800718d
 80071bc:	08007211 	.word	0x08007211
 80071c0:	0800718d 	.word	0x0800718d
 80071c4:	0800718d 	.word	0x0800718d
 80071c8:	0800718d 	.word	0x0800718d
 80071cc:	0800718d 	.word	0x0800718d
 80071d0:	0800731d 	.word	0x0800731d
 80071d4:	08007241 	.word	0x08007241
 80071d8:	080072ff 	.word	0x080072ff
 80071dc:	0800718d 	.word	0x0800718d
 80071e0:	0800718d 	.word	0x0800718d
 80071e4:	0800733f 	.word	0x0800733f
 80071e8:	0800718d 	.word	0x0800718d
 80071ec:	08007241 	.word	0x08007241
 80071f0:	0800718d 	.word	0x0800718d
 80071f4:	0800718d 	.word	0x0800718d
 80071f8:	08007307 	.word	0x08007307
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	1d1a      	adds	r2, r3, #4
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	602a      	str	r2, [r5, #0]
 8007204:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007208:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800720c:	2301      	movs	r3, #1
 800720e:	e0a3      	b.n	8007358 <_printf_i+0x1f4>
 8007210:	6820      	ldr	r0, [r4, #0]
 8007212:	6829      	ldr	r1, [r5, #0]
 8007214:	0606      	lsls	r6, r0, #24
 8007216:	f101 0304 	add.w	r3, r1, #4
 800721a:	d50a      	bpl.n	8007232 <_printf_i+0xce>
 800721c:	680e      	ldr	r6, [r1, #0]
 800721e:	602b      	str	r3, [r5, #0]
 8007220:	2e00      	cmp	r6, #0
 8007222:	da03      	bge.n	800722c <_printf_i+0xc8>
 8007224:	232d      	movs	r3, #45	; 0x2d
 8007226:	4276      	negs	r6, r6
 8007228:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800722c:	485e      	ldr	r0, [pc, #376]	; (80073a8 <_printf_i+0x244>)
 800722e:	230a      	movs	r3, #10
 8007230:	e019      	b.n	8007266 <_printf_i+0x102>
 8007232:	680e      	ldr	r6, [r1, #0]
 8007234:	602b      	str	r3, [r5, #0]
 8007236:	f010 0f40 	tst.w	r0, #64	; 0x40
 800723a:	bf18      	it	ne
 800723c:	b236      	sxthne	r6, r6
 800723e:	e7ef      	b.n	8007220 <_printf_i+0xbc>
 8007240:	682b      	ldr	r3, [r5, #0]
 8007242:	6820      	ldr	r0, [r4, #0]
 8007244:	1d19      	adds	r1, r3, #4
 8007246:	6029      	str	r1, [r5, #0]
 8007248:	0601      	lsls	r1, r0, #24
 800724a:	d501      	bpl.n	8007250 <_printf_i+0xec>
 800724c:	681e      	ldr	r6, [r3, #0]
 800724e:	e002      	b.n	8007256 <_printf_i+0xf2>
 8007250:	0646      	lsls	r6, r0, #25
 8007252:	d5fb      	bpl.n	800724c <_printf_i+0xe8>
 8007254:	881e      	ldrh	r6, [r3, #0]
 8007256:	4854      	ldr	r0, [pc, #336]	; (80073a8 <_printf_i+0x244>)
 8007258:	2f6f      	cmp	r7, #111	; 0x6f
 800725a:	bf0c      	ite	eq
 800725c:	2308      	moveq	r3, #8
 800725e:	230a      	movne	r3, #10
 8007260:	2100      	movs	r1, #0
 8007262:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007266:	6865      	ldr	r5, [r4, #4]
 8007268:	60a5      	str	r5, [r4, #8]
 800726a:	2d00      	cmp	r5, #0
 800726c:	bfa2      	ittt	ge
 800726e:	6821      	ldrge	r1, [r4, #0]
 8007270:	f021 0104 	bicge.w	r1, r1, #4
 8007274:	6021      	strge	r1, [r4, #0]
 8007276:	b90e      	cbnz	r6, 800727c <_printf_i+0x118>
 8007278:	2d00      	cmp	r5, #0
 800727a:	d04d      	beq.n	8007318 <_printf_i+0x1b4>
 800727c:	4615      	mov	r5, r2
 800727e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007282:	fb03 6711 	mls	r7, r3, r1, r6
 8007286:	5dc7      	ldrb	r7, [r0, r7]
 8007288:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800728c:	4637      	mov	r7, r6
 800728e:	42bb      	cmp	r3, r7
 8007290:	460e      	mov	r6, r1
 8007292:	d9f4      	bls.n	800727e <_printf_i+0x11a>
 8007294:	2b08      	cmp	r3, #8
 8007296:	d10b      	bne.n	80072b0 <_printf_i+0x14c>
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	07de      	lsls	r6, r3, #31
 800729c:	d508      	bpl.n	80072b0 <_printf_i+0x14c>
 800729e:	6923      	ldr	r3, [r4, #16]
 80072a0:	6861      	ldr	r1, [r4, #4]
 80072a2:	4299      	cmp	r1, r3
 80072a4:	bfde      	ittt	le
 80072a6:	2330      	movle	r3, #48	; 0x30
 80072a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072b0:	1b52      	subs	r2, r2, r5
 80072b2:	6122      	str	r2, [r4, #16]
 80072b4:	f8cd a000 	str.w	sl, [sp]
 80072b8:	464b      	mov	r3, r9
 80072ba:	aa03      	add	r2, sp, #12
 80072bc:	4621      	mov	r1, r4
 80072be:	4640      	mov	r0, r8
 80072c0:	f7ff fee2 	bl	8007088 <_printf_common>
 80072c4:	3001      	adds	r0, #1
 80072c6:	d14c      	bne.n	8007362 <_printf_i+0x1fe>
 80072c8:	f04f 30ff 	mov.w	r0, #4294967295
 80072cc:	b004      	add	sp, #16
 80072ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072d2:	4835      	ldr	r0, [pc, #212]	; (80073a8 <_printf_i+0x244>)
 80072d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072d8:	6829      	ldr	r1, [r5, #0]
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80072e0:	6029      	str	r1, [r5, #0]
 80072e2:	061d      	lsls	r5, r3, #24
 80072e4:	d514      	bpl.n	8007310 <_printf_i+0x1ac>
 80072e6:	07df      	lsls	r7, r3, #31
 80072e8:	bf44      	itt	mi
 80072ea:	f043 0320 	orrmi.w	r3, r3, #32
 80072ee:	6023      	strmi	r3, [r4, #0]
 80072f0:	b91e      	cbnz	r6, 80072fa <_printf_i+0x196>
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	f023 0320 	bic.w	r3, r3, #32
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	2310      	movs	r3, #16
 80072fc:	e7b0      	b.n	8007260 <_printf_i+0xfc>
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	f043 0320 	orr.w	r3, r3, #32
 8007304:	6023      	str	r3, [r4, #0]
 8007306:	2378      	movs	r3, #120	; 0x78
 8007308:	4828      	ldr	r0, [pc, #160]	; (80073ac <_printf_i+0x248>)
 800730a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800730e:	e7e3      	b.n	80072d8 <_printf_i+0x174>
 8007310:	0659      	lsls	r1, r3, #25
 8007312:	bf48      	it	mi
 8007314:	b2b6      	uxthmi	r6, r6
 8007316:	e7e6      	b.n	80072e6 <_printf_i+0x182>
 8007318:	4615      	mov	r5, r2
 800731a:	e7bb      	b.n	8007294 <_printf_i+0x130>
 800731c:	682b      	ldr	r3, [r5, #0]
 800731e:	6826      	ldr	r6, [r4, #0]
 8007320:	6961      	ldr	r1, [r4, #20]
 8007322:	1d18      	adds	r0, r3, #4
 8007324:	6028      	str	r0, [r5, #0]
 8007326:	0635      	lsls	r5, r6, #24
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	d501      	bpl.n	8007330 <_printf_i+0x1cc>
 800732c:	6019      	str	r1, [r3, #0]
 800732e:	e002      	b.n	8007336 <_printf_i+0x1d2>
 8007330:	0670      	lsls	r0, r6, #25
 8007332:	d5fb      	bpl.n	800732c <_printf_i+0x1c8>
 8007334:	8019      	strh	r1, [r3, #0]
 8007336:	2300      	movs	r3, #0
 8007338:	6123      	str	r3, [r4, #16]
 800733a:	4615      	mov	r5, r2
 800733c:	e7ba      	b.n	80072b4 <_printf_i+0x150>
 800733e:	682b      	ldr	r3, [r5, #0]
 8007340:	1d1a      	adds	r2, r3, #4
 8007342:	602a      	str	r2, [r5, #0]
 8007344:	681d      	ldr	r5, [r3, #0]
 8007346:	6862      	ldr	r2, [r4, #4]
 8007348:	2100      	movs	r1, #0
 800734a:	4628      	mov	r0, r5
 800734c:	f7f8 ff48 	bl	80001e0 <memchr>
 8007350:	b108      	cbz	r0, 8007356 <_printf_i+0x1f2>
 8007352:	1b40      	subs	r0, r0, r5
 8007354:	6060      	str	r0, [r4, #4]
 8007356:	6863      	ldr	r3, [r4, #4]
 8007358:	6123      	str	r3, [r4, #16]
 800735a:	2300      	movs	r3, #0
 800735c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007360:	e7a8      	b.n	80072b4 <_printf_i+0x150>
 8007362:	6923      	ldr	r3, [r4, #16]
 8007364:	462a      	mov	r2, r5
 8007366:	4649      	mov	r1, r9
 8007368:	4640      	mov	r0, r8
 800736a:	47d0      	blx	sl
 800736c:	3001      	adds	r0, #1
 800736e:	d0ab      	beq.n	80072c8 <_printf_i+0x164>
 8007370:	6823      	ldr	r3, [r4, #0]
 8007372:	079b      	lsls	r3, r3, #30
 8007374:	d413      	bmi.n	800739e <_printf_i+0x23a>
 8007376:	68e0      	ldr	r0, [r4, #12]
 8007378:	9b03      	ldr	r3, [sp, #12]
 800737a:	4298      	cmp	r0, r3
 800737c:	bfb8      	it	lt
 800737e:	4618      	movlt	r0, r3
 8007380:	e7a4      	b.n	80072cc <_printf_i+0x168>
 8007382:	2301      	movs	r3, #1
 8007384:	4632      	mov	r2, r6
 8007386:	4649      	mov	r1, r9
 8007388:	4640      	mov	r0, r8
 800738a:	47d0      	blx	sl
 800738c:	3001      	adds	r0, #1
 800738e:	d09b      	beq.n	80072c8 <_printf_i+0x164>
 8007390:	3501      	adds	r5, #1
 8007392:	68e3      	ldr	r3, [r4, #12]
 8007394:	9903      	ldr	r1, [sp, #12]
 8007396:	1a5b      	subs	r3, r3, r1
 8007398:	42ab      	cmp	r3, r5
 800739a:	dcf2      	bgt.n	8007382 <_printf_i+0x21e>
 800739c:	e7eb      	b.n	8007376 <_printf_i+0x212>
 800739e:	2500      	movs	r5, #0
 80073a0:	f104 0619 	add.w	r6, r4, #25
 80073a4:	e7f5      	b.n	8007392 <_printf_i+0x22e>
 80073a6:	bf00      	nop
 80073a8:	080088cd 	.word	0x080088cd
 80073ac:	080088de 	.word	0x080088de

080073b0 <__sread>:
 80073b0:	b510      	push	{r4, lr}
 80073b2:	460c      	mov	r4, r1
 80073b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b8:	f000 f894 	bl	80074e4 <_read_r>
 80073bc:	2800      	cmp	r0, #0
 80073be:	bfab      	itete	ge
 80073c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073c2:	89a3      	ldrhlt	r3, [r4, #12]
 80073c4:	181b      	addge	r3, r3, r0
 80073c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073ca:	bfac      	ite	ge
 80073cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80073ce:	81a3      	strhlt	r3, [r4, #12]
 80073d0:	bd10      	pop	{r4, pc}

080073d2 <__swrite>:
 80073d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d6:	461f      	mov	r7, r3
 80073d8:	898b      	ldrh	r3, [r1, #12]
 80073da:	05db      	lsls	r3, r3, #23
 80073dc:	4605      	mov	r5, r0
 80073de:	460c      	mov	r4, r1
 80073e0:	4616      	mov	r6, r2
 80073e2:	d505      	bpl.n	80073f0 <__swrite+0x1e>
 80073e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e8:	2302      	movs	r3, #2
 80073ea:	2200      	movs	r2, #0
 80073ec:	f000 f868 	bl	80074c0 <_lseek_r>
 80073f0:	89a3      	ldrh	r3, [r4, #12]
 80073f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073fa:	81a3      	strh	r3, [r4, #12]
 80073fc:	4632      	mov	r2, r6
 80073fe:	463b      	mov	r3, r7
 8007400:	4628      	mov	r0, r5
 8007402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007406:	f000 b817 	b.w	8007438 <_write_r>

0800740a <__sseek>:
 800740a:	b510      	push	{r4, lr}
 800740c:	460c      	mov	r4, r1
 800740e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007412:	f000 f855 	bl	80074c0 <_lseek_r>
 8007416:	1c43      	adds	r3, r0, #1
 8007418:	89a3      	ldrh	r3, [r4, #12]
 800741a:	bf15      	itete	ne
 800741c:	6560      	strne	r0, [r4, #84]	; 0x54
 800741e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007422:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007426:	81a3      	strheq	r3, [r4, #12]
 8007428:	bf18      	it	ne
 800742a:	81a3      	strhne	r3, [r4, #12]
 800742c:	bd10      	pop	{r4, pc}

0800742e <__sclose>:
 800742e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007432:	f000 b813 	b.w	800745c <_close_r>
	...

08007438 <_write_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	4d07      	ldr	r5, [pc, #28]	; (8007458 <_write_r+0x20>)
 800743c:	4604      	mov	r4, r0
 800743e:	4608      	mov	r0, r1
 8007440:	4611      	mov	r1, r2
 8007442:	2200      	movs	r2, #0
 8007444:	602a      	str	r2, [r5, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	f7f9 fb79 	bl	8000b3e <_write>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d102      	bne.n	8007456 <_write_r+0x1e>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	b103      	cbz	r3, 8007456 <_write_r+0x1e>
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	20000b6c 	.word	0x20000b6c

0800745c <_close_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	4d06      	ldr	r5, [pc, #24]	; (8007478 <_close_r+0x1c>)
 8007460:	2300      	movs	r3, #0
 8007462:	4604      	mov	r4, r0
 8007464:	4608      	mov	r0, r1
 8007466:	602b      	str	r3, [r5, #0]
 8007468:	f7f9 fb85 	bl	8000b76 <_close>
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	d102      	bne.n	8007476 <_close_r+0x1a>
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	b103      	cbz	r3, 8007476 <_close_r+0x1a>
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	bd38      	pop	{r3, r4, r5, pc}
 8007478:	20000b6c 	.word	0x20000b6c

0800747c <_fstat_r>:
 800747c:	b538      	push	{r3, r4, r5, lr}
 800747e:	4d07      	ldr	r5, [pc, #28]	; (800749c <_fstat_r+0x20>)
 8007480:	2300      	movs	r3, #0
 8007482:	4604      	mov	r4, r0
 8007484:	4608      	mov	r0, r1
 8007486:	4611      	mov	r1, r2
 8007488:	602b      	str	r3, [r5, #0]
 800748a:	f7f9 fb80 	bl	8000b8e <_fstat>
 800748e:	1c43      	adds	r3, r0, #1
 8007490:	d102      	bne.n	8007498 <_fstat_r+0x1c>
 8007492:	682b      	ldr	r3, [r5, #0]
 8007494:	b103      	cbz	r3, 8007498 <_fstat_r+0x1c>
 8007496:	6023      	str	r3, [r4, #0]
 8007498:	bd38      	pop	{r3, r4, r5, pc}
 800749a:	bf00      	nop
 800749c:	20000b6c 	.word	0x20000b6c

080074a0 <_isatty_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	4d06      	ldr	r5, [pc, #24]	; (80074bc <_isatty_r+0x1c>)
 80074a4:	2300      	movs	r3, #0
 80074a6:	4604      	mov	r4, r0
 80074a8:	4608      	mov	r0, r1
 80074aa:	602b      	str	r3, [r5, #0]
 80074ac:	f7f9 fb7f 	bl	8000bae <_isatty>
 80074b0:	1c43      	adds	r3, r0, #1
 80074b2:	d102      	bne.n	80074ba <_isatty_r+0x1a>
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	b103      	cbz	r3, 80074ba <_isatty_r+0x1a>
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	bd38      	pop	{r3, r4, r5, pc}
 80074bc:	20000b6c 	.word	0x20000b6c

080074c0 <_lseek_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4d07      	ldr	r5, [pc, #28]	; (80074e0 <_lseek_r+0x20>)
 80074c4:	4604      	mov	r4, r0
 80074c6:	4608      	mov	r0, r1
 80074c8:	4611      	mov	r1, r2
 80074ca:	2200      	movs	r2, #0
 80074cc:	602a      	str	r2, [r5, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	f7f9 fb78 	bl	8000bc4 <_lseek>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d102      	bne.n	80074de <_lseek_r+0x1e>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	b103      	cbz	r3, 80074de <_lseek_r+0x1e>
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	20000b6c 	.word	0x20000b6c

080074e4 <_read_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4d07      	ldr	r5, [pc, #28]	; (8007504 <_read_r+0x20>)
 80074e8:	4604      	mov	r4, r0
 80074ea:	4608      	mov	r0, r1
 80074ec:	4611      	mov	r1, r2
 80074ee:	2200      	movs	r2, #0
 80074f0:	602a      	str	r2, [r5, #0]
 80074f2:	461a      	mov	r2, r3
 80074f4:	f7f9 fb06 	bl	8000b04 <_read>
 80074f8:	1c43      	adds	r3, r0, #1
 80074fa:	d102      	bne.n	8007502 <_read_r+0x1e>
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	b103      	cbz	r3, 8007502 <_read_r+0x1e>
 8007500:	6023      	str	r3, [r4, #0]
 8007502:	bd38      	pop	{r3, r4, r5, pc}
 8007504:	20000b6c 	.word	0x20000b6c

08007508 <fabsf>:
 8007508:	ee10 3a10 	vmov	r3, s0
 800750c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007510:	ee00 3a10 	vmov	s0, r3
 8007514:	4770      	bx	lr
	...

08007518 <tanhf>:
 8007518:	b510      	push	{r4, lr}
 800751a:	ee10 4a10 	vmov	r4, s0
 800751e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007522:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007526:	ed2d 8b02 	vpush	{d8}
 800752a:	eeb0 7a40 	vmov.f32	s14, s0
 800752e:	db0c      	blt.n	800754a <tanhf+0x32>
 8007530:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007534:	eec0 7a07 	vdiv.f32	s15, s0, s14
 8007538:	2c00      	cmp	r4, #0
 800753a:	bfac      	ite	ge
 800753c:	ee37 0a80 	vaddge.f32	s0, s15, s0
 8007540:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 8007544:	ecbd 8b02 	vpop	{d8}
 8007548:	bd10      	pop	{r4, pc}
 800754a:	4a1b      	ldr	r2, [pc, #108]	; (80075b8 <tanhf+0xa0>)
 800754c:	4293      	cmp	r3, r2
 800754e:	dc30      	bgt.n	80075b2 <tanhf+0x9a>
 8007550:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8007554:	da06      	bge.n	8007564 <tanhf+0x4c>
 8007556:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800755a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800755e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007562:	e7ef      	b.n	8007544 <tanhf+0x2c>
 8007564:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007568:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800756c:	db12      	blt.n	8007594 <tanhf+0x7c>
 800756e:	f7ff ffcb 	bl	8007508 <fabsf>
 8007572:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007576:	f000 f947 	bl	8007808 <expm1f>
 800757a:	ee30 0a08 	vadd.f32	s0, s0, s16
 800757e:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8007582:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007586:	ee30 0a67 	vsub.f32	s0, s0, s15
 800758a:	2c00      	cmp	r4, #0
 800758c:	bfb8      	it	lt
 800758e:	eeb1 0a40 	vneglt.f32	s0, s0
 8007592:	e7d7      	b.n	8007544 <tanhf+0x2c>
 8007594:	f7ff ffb8 	bl	8007508 <fabsf>
 8007598:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800759c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80075a0:	f000 f932 	bl	8007808 <expm1f>
 80075a4:	ee70 7a08 	vadd.f32	s15, s0, s16
 80075a8:	eeb1 7a40 	vneg.f32	s14, s0
 80075ac:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80075b0:	e7eb      	b.n	800758a <tanhf+0x72>
 80075b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80075b6:	e7e8      	b.n	800758a <tanhf+0x72>
 80075b8:	41afffff 	.word	0x41afffff

080075bc <expf>:
 80075bc:	b508      	push	{r3, lr}
 80075be:	ed2d 8b02 	vpush	{d8}
 80075c2:	eef0 8a40 	vmov.f32	s17, s0
 80075c6:	f000 f82f 	bl	8007628 <__ieee754_expf>
 80075ca:	eeb0 8a40 	vmov.f32	s16, s0
 80075ce:	eeb0 0a68 	vmov.f32	s0, s17
 80075d2:	f000 fa35 	bl	8007a40 <finitef>
 80075d6:	b160      	cbz	r0, 80075f2 <expf+0x36>
 80075d8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8007618 <expf+0x5c>
 80075dc:	eef4 8ae7 	vcmpe.f32	s17, s15
 80075e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e4:	dd0a      	ble.n	80075fc <expf+0x40>
 80075e6:	f7fe ff4b 	bl	8006480 <__errno>
 80075ea:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800761c <expf+0x60>
 80075ee:	2322      	movs	r3, #34	; 0x22
 80075f0:	6003      	str	r3, [r0, #0]
 80075f2:	eeb0 0a48 	vmov.f32	s0, s16
 80075f6:	ecbd 8b02 	vpop	{d8}
 80075fa:	bd08      	pop	{r3, pc}
 80075fc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007620 <expf+0x64>
 8007600:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007608:	d5f3      	bpl.n	80075f2 <expf+0x36>
 800760a:	f7fe ff39 	bl	8006480 <__errno>
 800760e:	2322      	movs	r3, #34	; 0x22
 8007610:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8007624 <expf+0x68>
 8007614:	6003      	str	r3, [r0, #0]
 8007616:	e7ec      	b.n	80075f2 <expf+0x36>
 8007618:	42b17180 	.word	0x42b17180
 800761c:	7f800000 	.word	0x7f800000
 8007620:	c2cff1b5 	.word	0xc2cff1b5
 8007624:	00000000 	.word	0x00000000

08007628 <__ieee754_expf>:
 8007628:	ee10 2a10 	vmov	r2, s0
 800762c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007630:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007634:	d902      	bls.n	800763c <__ieee754_expf+0x14>
 8007636:	ee30 0a00 	vadd.f32	s0, s0, s0
 800763a:	4770      	bx	lr
 800763c:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8007640:	d106      	bne.n	8007650 <__ieee754_expf+0x28>
 8007642:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800777c <__ieee754_expf+0x154>
 8007646:	2b00      	cmp	r3, #0
 8007648:	bf18      	it	ne
 800764a:	eeb0 0a67 	vmovne.f32	s0, s15
 800764e:	4770      	bx	lr
 8007650:	484b      	ldr	r0, [pc, #300]	; (8007780 <__ieee754_expf+0x158>)
 8007652:	4282      	cmp	r2, r0
 8007654:	dd02      	ble.n	800765c <__ieee754_expf+0x34>
 8007656:	2000      	movs	r0, #0
 8007658:	f000 b8d0 	b.w	80077fc <__math_oflowf>
 800765c:	2a00      	cmp	r2, #0
 800765e:	da05      	bge.n	800766c <__ieee754_expf+0x44>
 8007660:	4a48      	ldr	r2, [pc, #288]	; (8007784 <__ieee754_expf+0x15c>)
 8007662:	4291      	cmp	r1, r2
 8007664:	d902      	bls.n	800766c <__ieee754_expf+0x44>
 8007666:	2000      	movs	r0, #0
 8007668:	f000 b8c2 	b.w	80077f0 <__math_uflowf>
 800766c:	4a46      	ldr	r2, [pc, #280]	; (8007788 <__ieee754_expf+0x160>)
 800766e:	4291      	cmp	r1, r2
 8007670:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007674:	d952      	bls.n	800771c <__ieee754_expf+0xf4>
 8007676:	4a45      	ldr	r2, [pc, #276]	; (800778c <__ieee754_expf+0x164>)
 8007678:	4291      	cmp	r1, r2
 800767a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800767e:	d834      	bhi.n	80076ea <__ieee754_expf+0xc2>
 8007680:	4943      	ldr	r1, [pc, #268]	; (8007790 <__ieee754_expf+0x168>)
 8007682:	4411      	add	r1, r2
 8007684:	ed91 7a00 	vldr	s14, [r1]
 8007688:	4942      	ldr	r1, [pc, #264]	; (8007794 <__ieee754_expf+0x16c>)
 800768a:	440a      	add	r2, r1
 800768c:	edd2 7a00 	vldr	s15, [r2]
 8007690:	ee30 7a47 	vsub.f32	s14, s0, s14
 8007694:	f1c3 0201 	rsb	r2, r3, #1
 8007698:	1ad2      	subs	r2, r2, r3
 800769a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800769e:	ee20 6a00 	vmul.f32	s12, s0, s0
 80076a2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8007798 <__ieee754_expf+0x170>
 80076a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800779c <__ieee754_expf+0x174>
 80076aa:	eee6 6a05 	vfma.f32	s13, s12, s10
 80076ae:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80077a0 <__ieee754_expf+0x178>
 80076b2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80076b6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80077a4 <__ieee754_expf+0x17c>
 80076ba:	eee5 6a06 	vfma.f32	s13, s10, s12
 80076be:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80077a8 <__ieee754_expf+0x180>
 80076c2:	eea6 5a86 	vfma.f32	s10, s13, s12
 80076c6:	eef0 6a40 	vmov.f32	s13, s0
 80076ca:	eee5 6a46 	vfms.f32	s13, s10, s12
 80076ce:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80076d2:	ee20 5a26 	vmul.f32	s10, s0, s13
 80076d6:	bb92      	cbnz	r2, 800773e <__ieee754_expf+0x116>
 80076d8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80076dc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80076e0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80076e4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80076e8:	4770      	bx	lr
 80076ea:	4b30      	ldr	r3, [pc, #192]	; (80077ac <__ieee754_expf+0x184>)
 80076ec:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80077b0 <__ieee754_expf+0x188>
 80076f0:	eddf 6a30 	vldr	s13, [pc, #192]	; 80077b4 <__ieee754_expf+0x18c>
 80076f4:	4413      	add	r3, r2
 80076f6:	edd3 7a00 	vldr	s15, [r3]
 80076fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80076fe:	eeb0 7a40 	vmov.f32	s14, s0
 8007702:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007706:	ee17 2a90 	vmov	r2, s15
 800770a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800770e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8007712:	eddf 6a29 	vldr	s13, [pc, #164]	; 80077b8 <__ieee754_expf+0x190>
 8007716:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800771a:	e7be      	b.n	800769a <__ieee754_expf+0x72>
 800771c:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8007720:	d20b      	bcs.n	800773a <__ieee754_expf+0x112>
 8007722:	eddf 6a26 	vldr	s13, [pc, #152]	; 80077bc <__ieee754_expf+0x194>
 8007726:	ee70 6a26 	vadd.f32	s13, s0, s13
 800772a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800772e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007732:	dd02      	ble.n	800773a <__ieee754_expf+0x112>
 8007734:	ee30 0a25 	vadd.f32	s0, s0, s11
 8007738:	4770      	bx	lr
 800773a:	2200      	movs	r2, #0
 800773c:	e7af      	b.n	800769e <__ieee754_expf+0x76>
 800773e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007742:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8007746:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800774a:	bfb8      	it	lt
 800774c:	3264      	addlt	r2, #100	; 0x64
 800774e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007752:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007756:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800775a:	ee17 3a90 	vmov	r3, s15
 800775e:	bfab      	itete	ge
 8007760:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8007764:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8007768:	ee00 3a10 	vmovge	s0, r3
 800776c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80077c0 <__ieee754_expf+0x198>
 8007770:	bfbc      	itt	lt
 8007772:	ee00 3a10 	vmovlt	s0, r3
 8007776:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800777a:	4770      	bx	lr
 800777c:	00000000 	.word	0x00000000
 8007780:	42b17217 	.word	0x42b17217
 8007784:	42cff1b5 	.word	0x42cff1b5
 8007788:	3eb17218 	.word	0x3eb17218
 800778c:	3f851591 	.word	0x3f851591
 8007790:	080088f8 	.word	0x080088f8
 8007794:	08008900 	.word	0x08008900
 8007798:	3331bb4c 	.word	0x3331bb4c
 800779c:	b5ddea0e 	.word	0xb5ddea0e
 80077a0:	388ab355 	.word	0x388ab355
 80077a4:	bb360b61 	.word	0xbb360b61
 80077a8:	3e2aaaab 	.word	0x3e2aaaab
 80077ac:	080088f0 	.word	0x080088f0
 80077b0:	3fb8aa3b 	.word	0x3fb8aa3b
 80077b4:	3f317180 	.word	0x3f317180
 80077b8:	3717f7d1 	.word	0x3717f7d1
 80077bc:	7149f2ca 	.word	0x7149f2ca
 80077c0:	0d800000 	.word	0x0d800000

080077c4 <with_errnof>:
 80077c4:	b513      	push	{r0, r1, r4, lr}
 80077c6:	4604      	mov	r4, r0
 80077c8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80077cc:	f7fe fe58 	bl	8006480 <__errno>
 80077d0:	ed9d 0a01 	vldr	s0, [sp, #4]
 80077d4:	6004      	str	r4, [r0, #0]
 80077d6:	b002      	add	sp, #8
 80077d8:	bd10      	pop	{r4, pc}

080077da <xflowf>:
 80077da:	b130      	cbz	r0, 80077ea <xflowf+0x10>
 80077dc:	eef1 7a40 	vneg.f32	s15, s0
 80077e0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80077e4:	2022      	movs	r0, #34	; 0x22
 80077e6:	f7ff bfed 	b.w	80077c4 <with_errnof>
 80077ea:	eef0 7a40 	vmov.f32	s15, s0
 80077ee:	e7f7      	b.n	80077e0 <xflowf+0x6>

080077f0 <__math_uflowf>:
 80077f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80077f8 <__math_uflowf+0x8>
 80077f4:	f7ff bff1 	b.w	80077da <xflowf>
 80077f8:	10000000 	.word	0x10000000

080077fc <__math_oflowf>:
 80077fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007804 <__math_oflowf+0x8>
 8007800:	f7ff bfeb 	b.w	80077da <xflowf>
 8007804:	70000000 	.word	0x70000000

08007808 <expm1f>:
 8007808:	ee10 2a10 	vmov	r2, s0
 800780c:	497d      	ldr	r1, [pc, #500]	; (8007a04 <expm1f+0x1fc>)
 800780e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007812:	428b      	cmp	r3, r1
 8007814:	d921      	bls.n	800785a <expm1f+0x52>
 8007816:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800781a:	d902      	bls.n	8007822 <expm1f+0x1a>
 800781c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007820:	4770      	bx	lr
 8007822:	d106      	bne.n	8007832 <expm1f+0x2a>
 8007824:	2a00      	cmp	r2, #0
 8007826:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800782a:	bfb8      	it	lt
 800782c:	eeb0 0a67 	vmovlt.f32	s0, s15
 8007830:	4770      	bx	lr
 8007832:	2a00      	cmp	r2, #0
 8007834:	db05      	blt.n	8007842 <expm1f+0x3a>
 8007836:	4974      	ldr	r1, [pc, #464]	; (8007a08 <expm1f+0x200>)
 8007838:	428b      	cmp	r3, r1
 800783a:	d95c      	bls.n	80078f6 <expm1f+0xee>
 800783c:	2000      	movs	r0, #0
 800783e:	f7ff bfdd 	b.w	80077fc <__math_oflowf>
 8007842:	eddf 7a72 	vldr	s15, [pc, #456]	; 8007a0c <expm1f+0x204>
 8007846:	ee70 7a27 	vadd.f32	s15, s0, s15
 800784a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800784e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007852:	d550      	bpl.n	80078f6 <expm1f+0xee>
 8007854:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007858:	4770      	bx	lr
 800785a:	496d      	ldr	r1, [pc, #436]	; (8007a10 <expm1f+0x208>)
 800785c:	428b      	cmp	r3, r1
 800785e:	d967      	bls.n	8007930 <expm1f+0x128>
 8007860:	496c      	ldr	r1, [pc, #432]	; (8007a14 <expm1f+0x20c>)
 8007862:	428b      	cmp	r3, r1
 8007864:	d847      	bhi.n	80078f6 <expm1f+0xee>
 8007866:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8007a18 <expm1f+0x210>
 800786a:	2a00      	cmp	r2, #0
 800786c:	bfa7      	ittee	ge
 800786e:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8007872:	eddf 7a6a 	vldrge	s15, [pc, #424]	; 8007a1c <expm1f+0x214>
 8007876:	eddf 7a6a 	vldrlt	s15, [pc, #424]	; 8007a20 <expm1f+0x218>
 800787a:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800787e:	bfac      	ite	ge
 8007880:	2301      	movge	r3, #1
 8007882:	f04f 33ff 	movlt.w	r3, #4294967295
 8007886:	ee37 0a67 	vsub.f32	s0, s14, s15
 800788a:	ee37 7a40 	vsub.f32	s14, s14, s0
 800788e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007892:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8007896:	ee20 4a25 	vmul.f32	s8, s0, s11
 800789a:	ed9f 6a62 	vldr	s12, [pc, #392]	; 8007a24 <expm1f+0x21c>
 800789e:	eddf 6a62 	vldr	s13, [pc, #392]	; 8007a28 <expm1f+0x220>
 80078a2:	ed9f 5a62 	vldr	s10, [pc, #392]	; 8007a2c <expm1f+0x224>
 80078a6:	ee20 7a04 	vmul.f32	s14, s0, s8
 80078aa:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 80078ae:	eee7 6a06 	vfma.f32	s13, s14, s12
 80078b2:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 8007a30 <expm1f+0x228>
 80078b6:	eea6 6a87 	vfma.f32	s12, s13, s14
 80078ba:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007a34 <expm1f+0x22c>
 80078be:	eee6 6a07 	vfma.f32	s13, s12, s14
 80078c2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80078c6:	eea6 5a87 	vfma.f32	s10, s13, s14
 80078ca:	eef0 6a46 	vmov.f32	s13, s12
 80078ce:	eee5 6a07 	vfma.f32	s13, s10, s14
 80078d2:	eee4 4a66 	vfms.f32	s9, s8, s13
 80078d6:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 80078da:	eea0 4a64 	vfms.f32	s8, s0, s9
 80078de:	ee36 5ae4 	vsub.f32	s10, s13, s9
 80078e2:	eec5 6a04 	vdiv.f32	s13, s10, s8
 80078e6:	ee66 6a87 	vmul.f32	s13, s13, s14
 80078ea:	bb7b      	cbnz	r3, 800794c <expm1f+0x144>
 80078ec:	eef0 7a47 	vmov.f32	s15, s14
 80078f0:	eed0 7a26 	vfnms.f32	s15, s0, s13
 80078f4:	e025      	b.n	8007942 <expm1f+0x13a>
 80078f6:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80078fa:	2a00      	cmp	r2, #0
 80078fc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007900:	bfb8      	it	lt
 8007902:	eef0 7a47 	vmovlt.f32	s15, s14
 8007906:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8007a38 <expm1f+0x230>
 800790a:	eddf 6a43 	vldr	s13, [pc, #268]	; 8007a18 <expm1f+0x210>
 800790e:	ee40 7a07 	vmla.f32	s15, s0, s14
 8007912:	eeb0 7a40 	vmov.f32	s14, s0
 8007916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800791a:	ee17 3a90 	vmov	r3, s15
 800791e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007922:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8007926:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a1c <expm1f+0x214>
 800792a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800792e:	e7aa      	b.n	8007886 <expm1f+0x7e>
 8007930:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 8007934:	d208      	bcs.n	8007948 <expm1f+0x140>
 8007936:	eddf 7a41 	vldr	s15, [pc, #260]	; 8007a3c <expm1f+0x234>
 800793a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800793e:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8007942:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007946:	4770      	bx	lr
 8007948:	2300      	movs	r3, #0
 800794a:	e7a2      	b.n	8007892 <expm1f+0x8a>
 800794c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8007950:	1c5a      	adds	r2, r3, #1
 8007952:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8007956:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800795a:	d106      	bne.n	800796a <expm1f+0x162>
 800795c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007960:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8007964:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8007968:	4770      	bx	lr
 800796a:	2b01      	cmp	r3, #1
 800796c:	d118      	bne.n	80079a0 <expm1f+0x198>
 800796e:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 8007972:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800797a:	bf5b      	ittet	pl
 800797c:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8007980:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8007984:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 8007988:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800798c:	bf43      	ittte	mi
 800798e:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 8007992:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 8007996:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800799a:	eeb0 0a46 	vmovpl.f32	s0, s12
 800799e:	4770      	bx	lr
 80079a0:	1c5a      	adds	r2, r3, #1
 80079a2:	2a39      	cmp	r2, #57	; 0x39
 80079a4:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 80079a8:	d90b      	bls.n	80079c2 <expm1f+0x1ba>
 80079aa:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80079ae:	ee36 0a40 	vsub.f32	s0, s12, s0
 80079b2:	ee10 3a10 	vmov	r3, s0
 80079b6:	440b      	add	r3, r1
 80079b8:	ee00 3a10 	vmov	s0, r3
 80079bc:	ee30 0a46 	vsub.f32	s0, s0, s12
 80079c0:	4770      	bx	lr
 80079c2:	2b16      	cmp	r3, #22
 80079c4:	dc11      	bgt.n	80079ea <expm1f+0x1e2>
 80079c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80079ca:	fa42 f303 	asr.w	r3, r2, r3
 80079ce:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 80079d2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80079d6:	ee07 3a90 	vmov	s15, r3
 80079da:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80079de:	ee10 3a10 	vmov	r3, s0
 80079e2:	440b      	add	r3, r1
 80079e4:	ee00 3a10 	vmov	s0, r3
 80079e8:	4770      	bx	lr
 80079ea:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80079ee:	05db      	lsls	r3, r3, #23
 80079f0:	ee07 3a10 	vmov	s14, r3
 80079f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079f8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80079fc:	ee37 0a86 	vadd.f32	s0, s15, s12
 8007a00:	e7ed      	b.n	80079de <expm1f+0x1d6>
 8007a02:	bf00      	nop
 8007a04:	4195b843 	.word	0x4195b843
 8007a08:	42b17217 	.word	0x42b17217
 8007a0c:	0da24260 	.word	0x0da24260
 8007a10:	3eb17218 	.word	0x3eb17218
 8007a14:	3f851591 	.word	0x3f851591
 8007a18:	3f317180 	.word	0x3f317180
 8007a1c:	3717f7d1 	.word	0x3717f7d1
 8007a20:	b717f7d1 	.word	0xb717f7d1
 8007a24:	b457edbb 	.word	0xb457edbb
 8007a28:	36867e54 	.word	0x36867e54
 8007a2c:	bd088889 	.word	0xbd088889
 8007a30:	b8a670cd 	.word	0xb8a670cd
 8007a34:	3ad00d01 	.word	0x3ad00d01
 8007a38:	3fb8aa3b 	.word	0x3fb8aa3b
 8007a3c:	7149f2ca 	.word	0x7149f2ca

08007a40 <finitef>:
 8007a40:	b082      	sub	sp, #8
 8007a42:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007a46:	9801      	ldr	r0, [sp, #4]
 8007a48:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007a4c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007a50:	bfac      	ite	ge
 8007a52:	2000      	movge	r0, #0
 8007a54:	2001      	movlt	r0, #1
 8007a56:	b002      	add	sp, #8
 8007a58:	4770      	bx	lr
	...

08007a5c <_init>:
 8007a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a5e:	bf00      	nop
 8007a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a62:	bc08      	pop	{r3}
 8007a64:	469e      	mov	lr, r3
 8007a66:	4770      	bx	lr

08007a68 <_fini>:
 8007a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6a:	bf00      	nop
 8007a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6e:	bc08      	pop	{r3}
 8007a70:	469e      	mov	lr, r3
 8007a72:	4770      	bx	lr
